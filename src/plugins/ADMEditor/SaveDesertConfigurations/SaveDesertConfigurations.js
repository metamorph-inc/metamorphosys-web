/*globals define */

/**
 * Generated by PluginGenerator from webgme on Fri Nov 14 2014 16:45:18 GMT-0600 (Central Standard Time).
 */

define( [ 'plugin/PluginConfig',
    'plugin/PluginBase',
    'plugin/SaveDesertConfigurations/SaveDesertConfigurations/meta'
], function ( PluginConfig, PluginBase, MetaTypes ) {
    'use strict';

    /**
     * Initializes a new instance of SaveDesertConfigurations.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin SaveDesertConfigurations.
     * @constructor
     */
    var SaveDesertConfigurations = function () {
        // Call base class' constructor.
        PluginBase.call( this );
        this.meta = MetaTypes;
    };

    // Prototypal inheritance from PluginBase.
    SaveDesertConfigurations.prototype = Object.create( PluginBase.prototype );
    SaveDesertConfigurations.prototype.constructor = SaveDesertConfigurations;

    /**
     * Gets the name of the SaveDesertConfigurations.
     * @returns {string} The name of the plugin.
     * @public
     */
    SaveDesertConfigurations.prototype.getName = function () {
        return "Save Desert Configurations";
    };

    /**
     * Gets the semantic version (semver.org) of the SaveDesertConfigurations.
     * @returns {string} The version of the plugin.
     * @public
     */
    SaveDesertConfigurations.prototype.getVersion = function () {
        return "0.1.0";
    };

    /**
     * Gets the configuration structure for the SaveDesertConfigurations.
     * The ConfigurationStructure defines the configuration for the plugin
     * and will be used to populate the GUI when invoking the plugin from webGME.
     * @returns {object} The version of the plugin.
     * @public
     */
    SaveDesertConfigurations.prototype.getConfigStructure = function () {
        return [ {
            'name': 'setData',
            'displayName': 'Configuration Set Data',
            'description': '',
            'value': '',
            'valueType': 'string',
            'readOnly': false
        }, {
            'name': 'configurations',
            'displayName': 'Configurations',
            'description': 'List of configurations.',
            'value': '',
            'valueType': 'string',
            'readOnly': false
        } ];
    };


    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */
    SaveDesertConfigurations.prototype.main = function ( callback ) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this,
            currentConfig = self.getCurrentConfig(),
            setData,
            setNode,
            configurations;

        if ( !self.activeNode ) {
            self.createMessage( null,
                'Active node is not present! This happens sometimes... Loading another model ' +
                'and trying again will solve it most of times.', 'error' );
            callback( 'Active node is not present!', self.result );
            return;
        }

        if ( self.isMetaTypeOf( self.activeNode, self.META.Container ) === false ) {
            self.createMessage( null, 'This plugin must be called from an Container.', 'error' );
            callback( null, self.result );
            return;
        }

        self.updateMETA( self.meta );
        setData = JSON.parse( currentConfig.setData );
        //        console.log(setData);
        setNode = self.saveSetNode( self.activeNode, setData );

        configurations = JSON.parse( currentConfig.configurations );
        //        console.log(configurations);
        self.saveConfigurations( setNode, configurations );
        self.result.setSuccess( true );
        self.save( 'Configurations saved to model.', function ( err ) {
            callback( null, self.result );
        } );

    };

    SaveDesertConfigurations.prototype.saveSetNode = function ( containerNode, setData ) {
        var self = this,
            setNode;
        setNode = self.core.createNode( {
            parent: containerNode,
            base: MetaTypes.DesertConfigurationSet
        } );
        self.core.setAttribute( setNode, 'name', setData.name );
        if ( setData.description ) {
            self.core.setAttribute( setNode, 'INFO', setData.description );
        }

        return setNode;
    };

    SaveDesertConfigurations.prototype.saveConfigurations = function ( setNode, configurations ) {
        var self = this,
            i,
            configData,
            configNode;
        for ( i = 0; i < configurations.length; i += 1 ) {
            configData = configurations[ i ];
            configNode = self.core.createNode( {
                parent: setNode,
                base: MetaTypes.DesertConfiguration
            } );
            self.core.setAttribute( configNode, 'name', configData.name );
            self.core.setAttribute( configNode, 'AlternativeAssignment', JSON.stringify( configData.alternativeAssignments ) );
        }

    };


    return SaveDesertConfigurations;
} );