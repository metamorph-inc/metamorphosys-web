! function () {
    function a( a, b ) {
        if ( a || ( a = {} ), !b ) return a;
        for ( var c in b ) "undefined" == typeof a[ c ] && ( a[ c ] = b[ c ] );
        return a
    }

    function b( a, b ) {
        if ( a ) throw new RangeError( b )
    }
    var c = 9007199254740992,
        d = -c,
        e = "0123456789",
        f = "abcdefghijklmnopqrstuvwxyz",
        g = f.toUpperCase(),
        h = e + "abcdef",
        i = Array.prototype.slice,
        j = function ( a ) {
            return this instanceof j ? ( void 0 !== a && ( "function" == typeof a ? this.random = a : this.seed = a ),
                void( "undefined" == typeof this.random && ( this.mt = this.mersenne_twister( a ), this.random =
                    function () {
                        return this.mt.random( this.seed )
                    } ) ) ) : new j( a )
        };
    j.prototype.bool = function ( c ) {
        return c = a( c, {
            likelihood: 50
        } ), b( c.likelihood < 0 || c.likelihood > 100, "Chance: Likelihood accepts values from 0 to 100." ), 100 *
            this.random() < c.likelihood
    }, j.prototype.character = function ( c ) {
        c = a( c );
        var d, h, i = "!@#$%^&*()[]";
        return b( c.alpha && c.symbols, "Chance: Cannot specify both alpha and symbols." ), d = "lower" === c.casing ?
            f : "upper" === c.casing ? g : f + g, h = c.pool ? c.pool : c.alpha ? d : c.symbols ? i : d + e + i, h.charAt(
                this.natural( {
                    max: h.length - 1
                } ) )
    }, j.prototype.floating = function ( d ) {
        var e;
        d = a( d, {
            fixed: 4
        } );
        var f = Math.pow( 10, d.fixed );
        b( d.fixed && d.precision, "Chance: Cannot specify both fixed and precision." );
        var g = c / f,
            h = -g;
        b( d.min && d.fixed && d.min < h, "Chance: Min specified is out of range with fixed. Min should be, at least, " +
            h ), b( d.max && d.fixed && d.max > g,
            "Chance: Max specified is out of range with fixed. Max should be, at most, " + g ), d = a( d, {
            min: h,
            max: g
        } ), e = this.integer( {
            min: d.min * f,
            max: d.max * f
        } );
        var i = ( e / f )
            .toFixed( d.fixed );
        return parseFloat( i )
    }, j.prototype.integer = function ( e ) {
        return e = a( e, {
            min: d,
            max: c
        } ), b( e.min > e.max, "Chance: Min cannot be greater than Max." ), Math.floor( this.random() * ( e.max - e.min +
            1 ) + e.min )
    }, j.prototype.natural = function ( b ) {
        return b = a( b, {
            min: 0,
            max: c
        } ), this.integer( b )
    }, j.prototype.normal = function ( b ) {
        b = a( b, {
            mean: 0,
            dev: 1
        } );
        var c, d, e, f, g = b.mean,
            h = b.dev;
        do d = 2 * this.random() - 1, e = 2 * this.random() - 1, c = d * d + e * e; while ( c >= 1 );
        return f = d * Math.sqrt( -2 * Math.log( c ) / c ), h * f + g
    }, j.prototype.string = function ( b ) {
        b = a( b );
        for ( var c = b.length || this.natural( {
            min: 5,
            max: 20
        } ), d = "", e = b.pool, f = 0; c > f; f++ ) d += this.character( {
            pool: e
        } );
        return d
    }, j.prototype.capitalize = function ( a ) {
        return a.charAt( 0 )
            .toUpperCase() + a.substr( 1 )
    }, j.prototype.mixin = function ( a ) {
        for ( var b in a ) j.prototype[ b ] = a[ b ];
        return this
    }, j.prototype.unique = function ( b, c, d ) {
        d = a( d, {
            comparator: function ( a ) {
                return -1 !== a.indexOf( g )
            }
        } );
        for ( var e = [], f = 0; e.length < c; ) {
            var g = b.apply( this, i.call( arguments, 2 ) );
            if ( d.comparator( e, g ) || ( e.push( g ), f = 0 ), ++f > 50 * c ) throw new RangeError(
                "Chance: num is likely too large for sample set" )
        }
        return e
    }, j.prototype.pad = function ( a, b, c ) {
        return c = c || "0", a += "", a.length >= b ? a : new Array( b - a.length + 1 )
            .join( c ) + a
    }, j.prototype.pick = function ( a, b ) {
        return b && 1 !== b ? this.shuffle( a )
            .slice( 0, b ) : a[ this.natural( {
                max: a.length - 1
            } ) ]
    }, j.prototype.shuffle = function ( a ) {
        for ( var b = a.slice( 0 ), c = [], d = 0, e = Number( b.length ), f = 0; e > f; f++ ) d = this.natural( {
            max: b.length - 1
        } ), c[ f ] = b[ d ], b.splice( d, 1 );
        return c
    }, j.prototype.paragraph = function ( b ) {
        b = a( b );
        for ( var c = b.sentences || this.natural( {
            min: 3,
            max: 7
        } ), d = [], e = 0; c > e; e++ ) d.push( this.sentence() );
        return d.join( " " )
    }, j.prototype.sentence = function ( b ) {
        b = a( b );
        for ( var c, d = b.words || this.natural( {
                min: 12,
                max: 18
            } ), e = [], f = 0; d > f; f++ ) e.push( this.word() );
        return c = e.join( " " ), c = this.capitalize( c ) + "."
    }, j.prototype.syllable = function ( b ) {
        b = a( b );
        for ( var c, d = b.length || this.natural( {
                min: 2,
                max: 3
            } ), e = "bcdfghjklmnprstvwz", f = "aeiou", g = e + f, h = "", i = 0; d > i; i++ ) c = this.character( 0 ===
            i ? {
                pool: g
            } : -1 === e.indexOf( c ) ? {
                pool: e
            } : {
                pool: f
            } ), h += c;
        return h
    }, j.prototype.word = function ( c ) {
        c = a( c ), b( c.syllables && c.length, "Chance: Cannot specify both syllables AND length." );
        var d = c.syllables || this.natural( {
            min: 1,
            max: 3
        } ),
            e = "";
        if ( c.length ) {
            do e += this.syllable(); while ( e.length < c.length );
            e = e.substring( 0, c.length )
        } else
            for ( var f = 0; d > f; f++ ) e += this.syllable();
        return e
    }, j.prototype.age = function ( b ) {
        b = a( b );
        var c;
        switch ( b.type ) {
        case "child":
            c = this.natural( {
                min: 1,
                max: 12
            } );
            break;
        case "teen":
            c = this.natural( {
                min: 13,
                max: 19
            } );
            break;
        case "adult":
            c = this.natural( {
                min: 18,
                max: 65
            } );
            break;
        case "senior":
            c = this.natural( {
                min: 65,
                max: 100
            } );
            break;
        case "all":
            c = this.natural( {
                min: 1,
                max: 100
            } );
            break;
        default:
            c = this.natural( {
                min: 18,
                max: 65
            } )
        }
        return c
    }, j.prototype.birthday = function ( b ) {
        return b = a( b, {
            year: ( new Date )
                .getFullYear() - this.age( b )
        } ), this.date( b )
    };
    var k = {
        male: [ "James", "John", "Robert", "Michael", "William", "David", "Richard", "Joseph", "Charles", "Thomas",
            "Christopher", "Daniel", "Matthew", "George", "Donald", "Anthony", "Paul", "Mark", "Edward", "Steven",
            "Kenneth", "Andrew", "Brian", "Joshua", "Kevin", "Ronald", "Timothy", "Jason", "Jeffrey", "Frank", "Gary",
            "Ryan", "Nicholas", "Eric", "Stephen", "Jacob", "Larry", "Jonathan", "Scott", "Raymond", "Justin",
            "Brandon", "Gregory", "Samuel", "Benjamin", "Patrick", "Jack", "Henry", "Walter", "Dennis", "Jerry",
            "Alexander", "Peter", "Tyler", "Douglas", "Harold", "Aaron", "Jose", "Adam", "Arthur", "Zachary", "Carl",
            "Nathan", "Albert", "Kyle", "Lawrence", "Joe", "Willie", "Gerald", "Roger", "Keith", "Jeremy", "Terry",
            "Harry", "Ralph", "Sean", "Jesse", "Roy", "Louis", "Billy", "Austin", "Bruce", "Eugene", "Christian",
            "Bryan", "Wayne", "Russell", "Howard", "Fred", "Ethan", "Jordan", "Philip", "Alan", "Juan", "Randy",
            "Vincent", "Bobby", "Dylan", "Johnny", "Phillip", "Victor", "Clarence", "Ernest", "Martin", "Craig",
            "Stanley", "Shawn", "Travis", "Bradley", "Leonard", "Earl", "Gabriel", "Jimmy", "Francis", "Todd", "Noah",
            "Danny", "Dale", "Cody", "Carlos", "Allen", "Frederick", "Logan", "Curtis", "Alex", "Joel", "Luis",
            "Norman", "Marvin", "Glenn", "Tony", "Nathaniel", "Rodney", "Melvin", "Alfred", "Steve", "Cameron", "Chad",
            "Edwin", "Caleb", "Evan", "Antonio", "Lee", "Herbert", "Jeffery", "Isaac", "Derek", "Ricky", "Marcus",
            "Theodore", "Elijah", "Luke", "Jesus", "Eddie", "Troy", "Mike", "Dustin", "Ray", "Adrian", "Bernard",
            "Leroy", "Angel", "Randall", "Wesley", "Ian", "Jared", "Mason", "Hunter", "Calvin", "Oscar", "Clifford",
            "Jay", "Shane", "Ronnie", "Barry", "Lucas", "Corey", "Manuel", "Leo", "Tommy", "Warren", "Jackson",
            "Isaiah", "Connor", "Don", "Dean", "Jon", "Julian", "Miguel", "Bill", "Lloyd", "Charlie", "Mitchell",
            "Leon", "Jerome", "Darrell", "Jeremiah", "Alvin", "Brett", "Seth", "Floyd", "Jim", "Blake", "Micheal",
            "Gordon", "Trevor", "Lewis", "Erik", "Edgar", "Vernon", "Devin", "Gavin", "Jayden", "Chris", "Clyde", "Tom",
            "Derrick", "Mario", "Brent", "Marc", "Herman", "Chase", "Dominic", "Ricardo", "Franklin", "Maurice", "Max",
            "Aiden", "Owen", "Lester", "Gilbert", "Elmer", "Gene", "Francisco", "Glen", "Cory", "Garrett", "Clayton",
            "Sam", "Jorge", "Chester", "Alejandro", "Jeff", "Harvey", "Milton", "Cole", "Ivan", "Andre", "Duane",
            "Landon"
        ],
        female: [ "Mary", "Emma", "Elizabeth", "Minnie", "Margaret", "Ida", "Alice", "Bertha", "Sarah", "Annie",
            "Clara", "Ella", "Florence", "Cora", "Martha", "Laura", "Nellie", "Grace", "Carrie", "Maude", "Mabel",
            "Bessie", "Jennie", "Gertrude", "Julia", "Hattie", "Edith", "Mattie", "Rose", "Catherine", "Lillian", "Ada",
            "Lillie", "Helen", "Jessie", "Louise", "Ethel", "Lula", "Myrtle", "Eva", "Frances", "Lena", "Lucy", "Edna",
            "Maggie", "Pearl", "Daisy", "Fannie", "Josephine", "Dora", "Rosa", "Katherine", "Agnes", "Marie", "Nora",
            "May", "Mamie", "Blanche", "Stella", "Ellen", "Nancy", "Effie", "Sallie", "Nettie", "Della", "Lizzie",
            "Flora", "Susie", "Maud", "Mae", "Etta", "Harriet", "Sadie", "Caroline", "Katie", "Lydia", "Elsie", "Kate",
            "Susan", "Mollie", "Alma", "Addie", "Georgia", "Eliza", "Lulu", "Nannie", "Lottie", "Amanda", "Belle",
            "Charlotte", "Rebecca", "Ruth", "Viola", "Olive", "Amelia", "Hannah", "Jane", "Virginia", "Emily",
            "Matilda", "Irene", "Kathryn", "Esther", "Willie", "Henrietta", "Ollie", "Amy", "Rachel", "Sara", "Estella",
            "Theresa", "Augusta", "Ora", "Pauline", "Josie", "Lola", "Sophia", "Leona", "Anne", "Mildred", "Ann",
            "Beulah", "Callie", "Lou", "Delia", "Eleanor", "Barbara", "Iva", "Louisa", "Maria", "Mayme", "Evelyn",
            "Estelle", "Nina", "Betty", "Marion", "Bettie", "Dorothy", "Luella", "Inez", "Lela", "Rosie", "Allie",
            "Millie", "Janie", "Cornelia", "Victoria", "Ruby", "Winifred", "Alta", "Celia", "Christine", "Beatrice",
            "Birdie", "Harriett", "Mable", "Myra", "Sophie", "Tillie", "Isabel", "Sylvia", "Carolyn", "Isabelle",
            "Leila", "Sally", "Ina", "Essie", "Bertie", "Nell", "Alberta", "Katharine", "Lora", "Rena", "Mina", "Rhoda",
            "Mathilda", "Abbie", "Eula", "Dollie", "Hettie", "Eunice", "Fanny", "Ola", "Lenora", "Adelaide",
            "Christina", "Lelia", "Nelle", "Sue", "Johanna", "Lilly", "Lucinda", "Minerva", "Lettie", "Roxie",
            "Cynthia", "Helena", "Hilda", "Hulda", "Bernice", "Genevieve", "Jean", "Cordelia", "Marian", "Francis",
            "Jeanette", "Adeline", "Gussie", "Leah", "Lois", "Lura", "Mittie", "Hallie", "Isabella", "Olga", "Phoebe",
            "Teresa", "Hester", "Lida", "Lina", "Winnie", "Claudia", "Marguerite", "Vera", "Cecelia", "Bess", "Emilie",
            "John", "Rosetta", "Verna", "Myrtie", "Cecilia", "Elva", "Olivia", "Ophelia", "Georgie", "Elnora", "Violet",
            "Adele", "Lily", "Linnie", "Loretta", "Madge", "Polly", "Virgie", "Eugenia", "Lucile", "Lucille", "Mabelle",
            "Rosalie"
        ]
    };
    j.prototype.first = function ( b ) {
        return b = a( b, {
            gender: this.gender()
        } ), this.pick( k[ b.gender.toLowerCase() ] )
    }, j.prototype.gender = function () {
        return this.pick( [ "Male", "Female" ] )
    };
    var l = [ "Smith", "Johnson", "Williams", "Jones", "Brown", "Davis", "Miller", "Wilson", "Moore", "Taylor",
        "Anderson", "Thomas", "Jackson", "White", "Harris", "Martin", "Thompson", "Garcia", "Martinez", "Robinson",
        "Clark", "Rodriguez", "Lewis", "Lee", "Walker", "Hall", "Allen", "Young", "Hernandez", "King", "Wright",
        "Lopez", "Hill", "Scott", "Green", "Adams", "Baker", "Gonzalez", "Nelson", "Carter", "Mitchell", "Perez",
        "Roberts", "Turner", "Phillips", "Campbell", "Parker", "Evans", "Edwards", "Collins", "Stewart", "Sanchez",
        "Morris", "Rogers", "Reed", "Cook", "Morgan", "Bell", "Murphy", "Bailey", "Rivera", "Cooper", "Richardson",
        "Cox", "Howard", "Ward", "Torres", "Peterson", "Gray", "Ramirez", "James", "Watson", "Brooks", "Kelly",
        "Sanders", "Price", "Bennett", "Wood", "Barnes", "Ross", "Henderson", "Coleman", "Jenkins", "Perry", "Powell",
        "Long", "Patterson", "Hughes", "Flores", "Washington", "Butler", "Simmons", "Foster", "Gonzales", "Bryant",
        "Alexander", "Russell", "Griffin", "Diaz", "Hayes", "Myers", "Ford", "Hamilton", "Graham", "Sullivan",
        "Wallace", "Woods", "Cole", "West", "Jordan", "Owens", "Reynolds", "Fisher", "Ellis", "Harrison", "Gibson",
        "McDonald", "Cruz", "Marshall", "Ortiz", "Gomez", "Murray", "Freeman", "Wells", "Webb", "Simpson", "Stevens",
        "Tucker", "Porter", "Hunter", "Hicks", "Crawford", "Henry", "Boyd", "Mason", "Morales", "Kennedy", "Warren",
        "Dixon", "Ramos", "Reyes", "Burns", "Gordon", "Shaw", "Holmes", "Rice", "Robertson", "Hunt", "Black", "Daniels",
        "Palmer", "Mills", "Nichols", "Grant", "Knight", "Ferguson", "Rose", "Stone", "Hawkins", "Dunn", "Perkins",
        "Hudson", "Spencer", "Gardner", "Stephens", "Payne", "Pierce", "Berry", "Matthews", "Arnold", "Wagner",
        "Willis", "Ray", "Watkins", "Olson", "Carroll", "Duncan", "Snyder", "Hart", "Cunningham", "Bradley", "Lane",
        "Andrews", "Ruiz", "Harper", "Fox", "Riley", "Armstrong", "Carpenter", "Weaver", "Greene", "Lawrence",
        "Elliott", "Chavez", "Sims", "Austin", "Peters", "Kelley", "Franklin", "Lawson", "Fields", "Gutierrez", "Ryan",
        "Schmidt", "Carr", "Vasquez", "Castillo", "Wheeler", "Chapman", "Oliver", "Montgomery", "Richards",
        "Williamson", "Johnston", "Banks", "Meyer", "Bishop", "McCoy", "Howell", "Alvarez", "Morrison", "Hansen",
        "Fernandez", "Garza", "Harvey", "Little", "Burton", "Stanley", "Nguyen", "George", "Jacobs", "Reid", "Kim",
        "Fuller", "Lynch", "Dean", "Gilbert", "Garrett", "Romero", "Welch", "Larson", "Frazier", "Burke", "Hanson",
        "Day", "Mendoza", "Moreno", "Bowman", "Medina", "Fowler", "Brewer", "Hoffman", "Carlson", "Silva", "Pearson",
        "Holland", "Douglas", "Fleming", "Jensen", "Vargas", "Byrd", "Davidson", "Hopkins", "May", "Terry", "Herrera",
        "Wade", "Soto", "Walters", "Curtis", "Neal", "Caldwell", "Lowe", "Jennings", "Barnett", "Graves", "Jimenez",
        "Horton", "Shelton", "Barrett", "Obrien", "Castro", "Sutton", "Gregory", "McKinney", "Lucas", "Miles", "Craig",
        "Rodriquez", "Chambers", "Holt", "Lambert", "Fletcher", "Watts", "Bates", "Hale", "Rhodes", "Pena", "Beck",
        "Newman", "Haynes", "McDaniel", "Mendez", "Bush", "Vaughn", "Parks", "Dawson", "Santiago", "Norris", "Hardy",
        "Love", "Steele", "Curry", "Powers", "Schultz", "Barker", "Guzman", "Page", "Munoz", "Ball", "Keller",
        "Chandler", "Weber", "Leonard", "Walsh", "Lyons", "Ramsey", "Wolfe", "Schneider", "Mullins", "Benson", "Sharp",
        "Bowen", "Daniel", "Barber", "Cummings", "Hines", "Baldwin", "Griffith", "Valdez", "Hubbard", "Salazar",
        "Reeves", "Warner", "Stevenson", "Burgess", "Santos", "Tate", "Cross", "Garner", "Mann", "Mack", "Moss",
        "Thornton", "Dennis", "McGee", "Farmer", "Delgado", "Aguilar", "Vega", "Glover", "Manning", "Cohen", "Harmon",
        "Rodgers", "Robbins", "Newton", "Todd", "Blair", "Higgins", "Ingram", "Reese", "Cannon", "Strickland",
        "Townsend", "Potter", "Goodwin", "Walton", "Rowe", "Hampton", "Ortega", "Patton", "Swanson", "Joseph",
        "Francis", "Goodman", "Maldonado", "Yates", "Becker", "Erickson", "Hodges", "Rios", "Conner", "Adkins",
        "Webster", "Norman", "Malone", "Hammond", "Flowers", "Cobb", "Moody", "Quinn", "Blake", "Maxwell", "Pope",
        "Floyd", "Osborne", "Paul", "McCarthy", "Guerrero", "Lindsey", "Estrada", "Sandoval", "Gibbs", "Tyler", "Gross",
        "Fitzgerald", "Stokes", "Doyle", "Sherman", "Saunders", "Wise", "Colon", "Gill", "Alvarado", "Greer", "Padilla",
        "Simon", "Waters", "Nunez", "Ballard", "Schwartz", "McBride", "Houston", "Christensen", "Klein", "Pratt",
        "Briggs", "Parsons", "McLaughlin", "Zimmerman", "French", "Buchanan", "Moran", "Copeland", "Roy", "Pittman",
        "Brady", "McCormick", "Holloway", "Brock", "Poole", "Frank", "Logan", "Owen", "Bass", "Marsh", "Drake", "Wong",
        "Jefferson", "Park", "Morton", "Abbott", "Sparks", "Patrick", "Norton", "Huff", "Clayton", "Massey", "Lloyd",
        "Figueroa", "Carson", "Bowers", "Roberson", "Barton", "Tran", "Lamb", "Harrington", "Casey", "Boone", "Cortez",
        "Clarke", "Mathis", "Singleton", "Wilkins", "Cain", "Bryan", "Underwood", "Hogan", "McKenzie", "Collier",
        "Luna", "Phelps", "McGuire", "Allison", "Bridges", "Wilkerson", "Nash", "Summers", "Atkins"
    ];
    j.prototype.last = function () {
        return this.pick( l )
    }, j.prototype.name = function ( b ) {
        b = a( b );
        var c, d = this.first( b ),
            e = this.last();
        return c = b.middle ? d + " " + this.first( b ) + " " + e : b.middle_initial ? d + " " + this.character( {
            alpha: !0,
            casing: "upper"
        } ) + ". " + e : d + " " + e, b.prefix && ( c = this.prefix( b ) + " " + c ), c
    }, j.prototype.name_prefixes = function ( a ) {
        a = a || "all";
        var b = [ {
            name: "Doctor",
            abbreviation: "Dr."
        } ];
        return ( "male" === a || "all" === a ) && b.push( {
            name: "Mister",
            abbreviation: "Mr."
        } ), ( "female" === a || "all" === a ) && ( b.push( {
            name: "Miss",
            abbreviation: "Miss"
        } ), b.push( {
            name: "Misses",
            abbreviation: "Mrs."
        } ) ), b
    }, j.prototype.prefix = function ( a ) {
        return this.name_prefix( a )
    }, j.prototype.name_prefix = function ( b ) {
        return b = a( b, {
            gender: "all"
        } ), b.full ? this.pick( this.name_prefixes( b.gender ) )
            .name : this.pick( this.name_prefixes( b.gender ) )
            .abbreviation
    }, j.prototype.ssn = function () {
        var a, b = "1234567890";
        return a = this.string( {
            pool: b,
            length: 3
        } ) + "-" + this.string( {
            pool: b,
            length: 2
        } ) + "-" + this.string( {
            pool: b,
            length: 4
        } )
    }, j.prototype.color = function ( b ) {
        function c( a, b ) {
            return [ a, a, a ].join( b || "" )
        }
        b = a( b, {
            format: this.pick( [ "hex", "shorthex", "rgb" ] ),
            grayscale: !1
        } );
        var d = b.grayscale;
        if ( "hex" === b.format ) return "#" + ( d ? c( this.hash( {
            length: 2
        } ) ) : this.hash( {
            length: 6
        } ) );
        if ( "shorthex" === b.format ) return "#" + ( d ? c( this.hash( {
            length: 1
        } ) ) : this.hash( {
            length: 3
        } ) );
        if ( "rgb" === b.format ) return d ? "rgb(" + c( this.natural( {
            max: 255
        } ), "," ) + ")" : "rgb(" + this.natural( {
            max: 255
        } ) + "," + this.natural( {
            max: 255
        } ) + "," + this.natural( {
            max: 255
        } ) + ")";
        throw new Error( 'Invalid format provided. Please provide one of "hex", "shorthex", or "rgb"' )
    }, j.prototype.domain = function ( b ) {
        return b = a( b ), this.word() + "." + ( b.tld || this.tld() )
    }, j.prototype.email = function ( b ) {
        return b = a( b ), this.word() + "@" + ( b.domain || this.domain() )
    }, j.prototype.fbid = function () {
        return parseInt( "10000" + this.natural( {
            max: 1e11
        } ), 10 )
    }, j.prototype.google_analytics = function () {
        var a = this.pad( this.natural( {
            max: 999999
        } ), 6 ),
            b = this.pad( this.natural( {
                max: 99
            } ), 2 );
        return "UA-" + a + "-" + b
    }, j.prototype.hashtag = function () {
        return "#" + this.word()
    }, j.prototype.ip = function () {
        return this.natural( {
            max: 255
        } ) + "." + this.natural( {
            max: 255
        } ) + "." + this.natural( {
            max: 255
        } ) + "." + this.natural( {
            max: 255
        } )
    }, j.prototype.ipv6 = function () {
        for ( var a = "", b = 0; 8 > b; b++ ) a += this.hash( {
            length: 4
        } ) + ":";
        return a.substr( 0, a.length - 1 )
    }, j.prototype.klout = function () {
        return this.natural( {
            min: 1,
            max: 99
        } )
    }, j.prototype.tlds = function () {
        return [ "com", "org", "edu", "gov", "co.uk", "net", "io" ]
    }, j.prototype.tld = function () {
        return this.pick( this.tlds() )
    }, j.prototype.twitter = function () {
        return "@" + this.word()
    }, j.prototype.address = function ( b ) {
        return b = a( b ), this.natural( {
            min: 5,
            max: 2e3
        } ) + " " + this.street( b )
    }, j.prototype.areacode = function ( b ) {
        b = a( b, {
            parens: !0
        } );
        var c = this.natural( {
            min: 2,
            max: 9
        } )
            .toString() + this.natural( {
                min: 0,
                max: 8
            } )
            .toString() + this.natural( {
                min: 0,
                max: 9
            } )
            .toString();
        return b.parens ? "(" + c + ")" : c
    }, j.prototype.city = function () {
        return this.capitalize( this.word( {
            syllables: 3
        } ) )
    }, j.prototype.coordinates = function ( b ) {
        return b = a( b ), this.latitude( b ) + ", " + this.longitude( b )
    }, j.prototype.geoJson = function ( b ) {
        return b = a( b ), this.latitude( b ) + ", " + this.longitude( b ) + ", " + this.altitude( b )
    }, j.prototype.altitude = function ( b ) {
        return b = a( b, {
            fixed: 5
        } ), this.floating( {
            min: 0,
            max: 32736e3,
            fixed: b.fixed
        } )
    }, j.prototype.depth = function ( b ) {
        return b = a( b, {
            fixed: 5
        } ), this.floating( {
            min: -35994,
            max: 0,
            fixed: b.fixed
        } )
    }, j.prototype.latitude = function ( b ) {
        return b = a( b, {
            fixed: 5,
            min: -90,
            max: 90
        } ), this.floating( {
            min: b.min,
            max: b.max,
            fixed: b.fixed
        } )
    }, j.prototype.longitude = function ( b ) {
        return b = a( b, {
            fixed: 5,
            min: -180,
            max: 180
        } ), this.floating( {
            min: b.min,
            max: b.max,
            fixed: b.fixed
        } )
    }, j.prototype.phone = function ( b ) {
        b = a( b, {
            formatted: !0
        } ), b.formatted || ( b.parens = !1 );
        var c = this.areacode( b )
            .toString(),
            d = this.natural( {
                min: 2,
                max: 9
            } )
                .toString() + this.natural( {
                    min: 0,
                    max: 9
                } )
                .toString() + this.natural( {
                    min: 0,
                    max: 9
                } )
                .toString(),
            e = this.natural( {
                min: 1e3,
                max: 9999
            } )
                .toString();
        return b.formatted ? c + " " + d + "-" + e : c + d + e
    }, j.prototype.postal = function () {
        var a = this.character( {
            pool: "XVTSRPNKLMHJGECBA"
        } ),
            b = a + this.natural( {
                max: 9
            } ) + this.character( {
                alpha: !0,
                casing: "upper"
            } ),
            c = this.natural( {
                max: 9
            } ) + this.character( {
                alpha: !0,
                casing: "upper"
            } ) + this.natural( {
                max: 9
            } );
        return b + " " + c
    }, j.prototype.provinces = function () {
        return [ {
            name: "Alberta",
            abbreviation: "AB"
        }, {
            name: "British Columbia",
            abbreviation: "BC"
        }, {
            name: "Manitoba",
            abbreviation: "MB"
        }, {
            name: "New Brunswick",
            abbreviation: "NB"
        }, {
            name: "Newfoundland and Labrador",
            abbreviation: "NL"
        }, {
            name: "Nova Scotia",
            abbreviation: "NS"
        }, {
            name: "Ontario",
            abbreviation: "ON"
        }, {
            name: "Prince Edward Island",
            abbreviation: "PE"
        }, {
            name: "Quebec",
            abbreviation: "QC"
        }, {
            name: "Saskatchewan",
            abbreviation: "SK"
        }, {
            name: "Northwest Territories",
            abbreviation: "NT"
        }, {
            name: "Nunavut",
            abbreviation: "NU"
        }, {
            name: "Yukon",
            abbreviation: "YT"
        } ]
    }, j.prototype.province = function ( a ) {
        return a && a.full ? this.pick( this.provinces() )
            .name : this.pick( this.provinces() )
            .abbreviation
    }, j.prototype.radio = function ( b ) {
        b = a( b, {
            side: "?"
        } );
        var c = "";
        switch ( b.side.toLowerCase() ) {
        case "east":
        case "e":
            c = "W";
            break;
        case "west":
        case "w":
            c = "K";
            break;
        default:
            c = this.character( {
                pool: "KW"
            } )
        }
        return c + this.character( {
            alpha: !0,
            casing: "upper"
        } ) + this.character( {
            alpha: !0,
            casing: "upper"
        } ) + this.character( {
            alpha: !0,
            casing: "upper"
        } )
    }, j.prototype.state = function ( a ) {
        return a && a.full ? this.pick( this.states( a ) )
            .name : this.pick( this.states( a ) )
            .abbreviation
    }, j.prototype.states = function ( b ) {
        b = a( b );
        var c, d, e, f;
        return d = [ {
            name: "Alabama",
            abbreviation: "AL"
        }, {
            name: "Alaska",
            abbreviation: "AK"
        }, {
            name: "Arizona",
            abbreviation: "AZ"
        }, {
            name: "Arkansas",
            abbreviation: "AR"
        }, {
            name: "California",
            abbreviation: "CA"
        }, {
            name: "Colorado",
            abbreviation: "CO"
        }, {
            name: "Connecticut",
            abbreviation: "CT"
        }, {
            name: "Delaware",
            abbreviation: "DE"
        }, {
            name: "District of Columbia",
            abbreviation: "DC"
        }, {
            name: "Florida",
            abbreviation: "FL"
        }, {
            name: "Georgia",
            abbreviation: "GA"
        }, {
            name: "Hawaii",
            abbreviation: "HI"
        }, {
            name: "Idaho",
            abbreviation: "ID"
        }, {
            name: "Illinois",
            abbreviation: "IL"
        }, {
            name: "Indiana",
            abbreviation: "IN"
        }, {
            name: "Iowa",
            abbreviation: "IA"
        }, {
            name: "Kansas",
            abbreviation: "KS"
        }, {
            name: "Kentucky",
            abbreviation: "KY"
        }, {
            name: "Louisiana",
            abbreviation: "LA"
        }, {
            name: "Maine",
            abbreviation: "ME"
        }, {
            name: "Maryland",
            abbreviation: "MD"
        }, {
            name: "Massachusetts",
            abbreviation: "MA"
        }, {
            name: "Michigan",
            abbreviation: "MI"
        }, {
            name: "Minnesota",
            abbreviation: "MN"
        }, {
            name: "Mississippi",
            abbreviation: "MS"
        }, {
            name: "Missouri",
            abbreviation: "MO"
        }, {
            name: "Montana",
            abbreviation: "MT"
        }, {
            name: "Nebraska",
            abbreviation: "NE"
        }, {
            name: "Nevada",
            abbreviation: "NV"
        }, {
            name: "New Hampshire",
            abbreviation: "NH"
        }, {
            name: "New Jersey",
            abbreviation: "NJ"
        }, {
            name: "New Mexico",
            abbreviation: "NM"
        }, {
            name: "New York",
            abbreviation: "NY"
        }, {
            name: "North Carolina",
            abbreviation: "NC"
        }, {
            name: "North Dakota",
            abbreviation: "ND"
        }, {
            name: "Ohio",
            abbreviation: "OH"
        }, {
            name: "Oklahoma",
            abbreviation: "OK"
        }, {
            name: "Oregon",
            abbreviation: "OR"
        }, {
            name: "Pennsylvania",
            abbreviation: "PA"
        }, {
            name: "Rhode Island",
            abbreviation: "RI"
        }, {
            name: "South Carolina",
            abbreviation: "SC"
        }, {
            name: "South Dakota",
            abbreviation: "SD"
        }, {
            name: "Tennessee",
            abbreviation: "TN"
        }, {
            name: "Texas",
            abbreviation: "TX"
        }, {
            name: "Utah",
            abbreviation: "UT"
        }, {
            name: "Vermont",
            abbreviation: "VT"
        }, {
            name: "Virginia",
            abbreviation: "VA"
        }, {
            name: "Washington",
            abbreviation: "WA"
        }, {
            name: "West Virginia",
            abbreviation: "WV"
        }, {
            name: "Wisconsin",
            abbreviation: "WI"
        }, {
            name: "Wyoming",
            abbreviation: "WY"
        } ], e = [ {
            name: "American Samoa",
            abbreviation: "AS"
        }, {
            name: "Federated States of Micronesia",
            abbreviation: "FM"
        }, {
            name: "Guam",
            abbreviation: "GU"
        }, {
            name: "Marshall Islands",
            abbreviation: "MH"
        }, {
            name: "Northern Mariana Islands",
            abbreviation: "MP"
        }, {
            name: "Puerto Rico",
            abbreviation: "PR"
        }, {
            name: "Virgin Islands, U.S.",
            abbreviation: "VI"
        } ], f = [ {
            name: "Armed Forces Europe",
            abbreviation: "AE"
        }, {
            name: "Armed Forces Pacific",
            abbreviation: "AP"
        }, {
            name: "Armed Forces the Americas",
            abbreviation: "AA"
        } ], c = d, b.territories && ( c = c.concat( e ) ), b.armed_forces && ( c = c.concat( f ) ), c
    }, j.prototype.street = function ( b ) {
        b = a( b );
        var c = this.word( {
            syllables: 2
        } );
        return c = this.capitalize( c ), c += " ", c += b.short_suffix ? this.street_suffix()
            .abbreviation : this.street_suffix()
            .name
    }, j.prototype.street_suffix = function () {
        return this.pick( this.street_suffixes() )
    }, j.prototype.street_suffixes = function () {
        return [ {
            name: "Avenue",
            abbreviation: "Ave"
        }, {
            name: "Boulevard",
            abbreviation: "Blvd"
        }, {
            name: "Center",
            abbreviation: "Ctr"
        }, {
            name: "Circle",
            abbreviation: "Cir"
        }, {
            name: "Court",
            abbreviation: "Ct"
        }, {
            name: "Drive",
            abbreviation: "Dr"
        }, {
            name: "Extension",
            abbreviation: "Ext"
        }, {
            name: "Glen",
            abbreviation: "Gln"
        }, {
            name: "Grove",
            abbreviation: "Grv"
        }, {
            name: "Heights",
            abbreviation: "Hts"
        }, {
            name: "Highway",
            abbreviation: "Hwy"
        }, {
            name: "Junction",
            abbreviation: "Jct"
        }, {
            name: "Key",
            abbreviation: "Key"
        }, {
            name: "Lane",
            abbreviation: "Ln"
        }, {
            name: "Loop",
            abbreviation: "Loop"
        }, {
            name: "Manor",
            abbreviation: "Mnr"
        }, {
            name: "Mill",
            abbreviation: "Mill"
        }, {
            name: "Park",
            abbreviation: "Park"
        }, {
            name: "Parkway",
            abbreviation: "Pkwy"
        }, {
            name: "Pass",
            abbreviation: "Pass"
        }, {
            name: "Path",
            abbreviation: "Path"
        }, {
            name: "Pike",
            abbreviation: "Pike"
        }, {
            name: "Place",
            abbreviation: "Pl"
        }, {
            name: "Plaza",
            abbreviation: "Plz"
        }, {
            name: "Point",
            abbreviation: "Pt"
        }, {
            name: "Ridge",
            abbreviation: "Rdg"
        }, {
            name: "River",
            abbreviation: "Riv"
        }, {
            name: "Road",
            abbreviation: "Rd"
        }, {
            name: "Square",
            abbreviation: "Sq"
        }, {
            name: "Street",
            abbreviation: "St"
        }, {
            name: "Terrace",
            abbreviation: "Ter"
        }, {
            name: "Trail",
            abbreviation: "Trl"
        }, {
            name: "Turnpike",
            abbreviation: "Tpke"
        }, {
            name: "View",
            abbreviation: "Vw"
        }, {
            name: "Way",
            abbreviation: "Way"
        } ]
    }, j.prototype.tv = function ( a ) {
        return this.radio( a )
    }, j.prototype.zip = function ( a ) {
        for ( var b = "", c = 0; 5 > c; c++ ) b += this.natural( {
            max: 9
        } )
            .toString();
        if ( a && a.plusfour === !0 )
            for ( b += "-", c = 0; 4 > c; c++ ) b += this.natural( {
                max: 9
            } )
                .toString();
        return b
    }, j.prototype.ampm = function () {
        return this.bool() ? "am" : "pm"
    }, j.prototype.date = function ( b ) {
        var c, d = this.month( {
                raw: !0
            } );
        b = a( b, {
            year: parseInt( this.year(), 10 ),
            month: d.numeric - 1,
            day: this.natural( {
                min: 1,
                max: d.days
            } ),
            hour: this.hour(),
            minute: this.minute(),
            second: this.second(),
            millisecond: this.millisecond(),
            american: !0,
            string: !1
        } );
        var e = new Date( b.year, b.month, b.day, b.hour, b.minute, b.second, b.millisecond );
        return c = b.american ? e.getMonth() + 1 + "/" + e.getDate() + "/" + e.getFullYear() : e.getDate() + "/" + ( e.getMonth() +
            1 ) + "/" + e.getFullYear(), b.string ? c : e
    }, j.prototype.hammertime = function ( a ) {
        return this.date( a )
            .getTime()
    }, j.prototype.hour = function ( b ) {
        b = a( b );
        var c = b.twentyfour ? 24 : 12;
        return this.natural( {
            min: 1,
            max: c
        } )
    }, j.prototype.millisecond = function () {
        return this.natural( {
            max: 999
        } )
    }, j.prototype.minute = j.prototype.second = function () {
        return this.natural( {
            max: 59
        } )
    }, j.prototype.month = function ( b ) {
        b = a( b );
        var c = this.pick( this.months() );
        return b.raw ? c : c.name
    }, j.prototype.months = function () {
        return [ {
            name: "January",
            short_name: "Jan",
            numeric: "01",
            days: 31
        }, {
            name: "February",
            short_name: "Feb",
            numeric: "02",
            days: 28
        }, {
            name: "March",
            short_name: "Mar",
            numeric: "03",
            days: 31
        }, {
            name: "April",
            short_name: "Apr",
            numeric: "04",
            days: 30
        }, {
            name: "May",
            short_name: "May",
            numeric: "05",
            days: 31
        }, {
            name: "June",
            short_name: "Jun",
            numeric: "06",
            days: 30
        }, {
            name: "July",
            short_name: "Jul",
            numeric: "07",
            days: 31
        }, {
            name: "August",
            short_name: "Aug",
            numeric: "08",
            days: 31
        }, {
            name: "September",
            short_name: "Sep",
            numeric: "09",
            days: 30
        }, {
            name: "October",
            short_name: "Oct",
            numeric: "10",
            days: 31
        }, {
            name: "November",
            short_name: "Nov",
            numeric: "11",
            days: 30
        }, {
            name: "December",
            short_name: "Dec",
            numeric: "12",
            days: 31
        } ]
    }, j.prototype.second = function () {
        return this.natural( {
            max: 59
        } )
    }, j.prototype.timestamp = function () {
        return this.natural( {
            min: 1,
            max: parseInt( ( new Date )
                .getTime() / 1e3, 10 )
        } )
    }, j.prototype.year = function ( b ) {
        return b = a( b, {
            min: ( new Date )
                .getFullYear()
        } ), b.max = "undefined" != typeof b.max ? b.max : b.min + 100, this.natural( b )
            .toString()
    }, j.prototype.cc = function ( b ) {
        b = a( b );
        var c, d, e;
        c = this.cc_type( b.type ? {
            name: b.type,
            raw: !0
        } : {
            raw: !0
        } ), d = c.prefix.split( "" ), e = c.length - c.prefix.length - 1;
        for ( var f = 0; e > f; f++ ) d.push( this.integer( {
            min: 0,
            max: 9
        } ) );
        return d.push( this.luhn_calculate( d.join( "" ) ) ), d.join( "" )
    }, j.prototype.cc_types = function () {
        return [ {
            name: "American Express",
            short_name: "amex",
            prefix: "34",
            length: 15
        }, {
            name: "Bankcard",
            short_name: "bankcard",
            prefix: "5610",
            length: 16
        }, {
            name: "China UnionPay",
            short_name: "chinaunion",
            prefix: "62",
            length: 16
        }, {
            name: "Diners Club Carte Blanche",
            short_name: "dccarte",
            prefix: "300",
            length: 14
        }, {
            name: "Diners Club enRoute",
            short_name: "dcenroute",
            prefix: "2014",
            length: 15
        }, {
            name: "Diners Club International",
            short_name: "dcintl",
            prefix: "36",
            length: 14
        }, {
            name: "Diners Club United States & Canada",
            short_name: "dcusc",
            prefix: "54",
            length: 16
        }, {
            name: "Discover Card",
            short_name: "discover",
            prefix: "6011",
            length: 16
        }, {
            name: "InstaPayment",
            short_name: "instapay",
            prefix: "637",
            length: 16
        }, {
            name: "JCB",
            short_name: "jcb",
            prefix: "3528",
            length: 16
        }, {
            name: "Laser",
            short_name: "laser",
            prefix: "6304",
            length: 16
        }, {
            name: "Maestro",
            short_name: "maestro",
            prefix: "5018",
            length: 16
        }, {
            name: "Mastercard",
            short_name: "mc",
            prefix: "51",
            length: 16
        }, {
            name: "Solo",
            short_name: "solo",
            prefix: "6334",
            length: 16
        }, {
            name: "Switch",
            short_name: "switch",
            prefix: "4903",
            length: 16
        }, {
            name: "Visa",
            short_name: "visa",
            prefix: "4",
            length: 16
        }, {
            name: "Visa Electron",
            short_name: "electron",
            prefix: "4026",
            length: 16
        } ]
    }, j.prototype.cc_type = function ( b ) {
        b = a( b );
        var c = this.cc_types(),
            d = null;
        if ( b.name ) {
            for ( var e = 0; e < c.length; e++ )
                if ( c[ e ].name === b.name || c[ e ].short_name === b.name ) {
                    d = c[ e ];
                    break
                }
            if ( null === d ) throw new Error( "Credit card type '" + b.name + "'' is not supported" )
        } else d = this.pick( c );
        return b.raw ? d : d.name
    }, j.prototype.dollar = function ( b ) {
        b = a( b, {
            max: 1e4,
            min: 0
        } );
        var c = this.floating( {
            min: b.min,
            max: b.max,
            fixed: 2
        } )
            .toString(),
            d = c.split( "." )[ 1 ];
        return void 0 === d ? c += ".00" : d.length < 2 && ( c += "0" ), 0 > c ? "-$" + c.replace( "-", "" ) : "$" + c
    }, j.prototype.exp = function ( b ) {
        b = a( b );
        var c = {};
        return c.year = this.exp_year(), c.month = c.year === ( new Date )
            .getFullYear() ? this.exp_month( {
                future: !0
            } ) : this.exp_month(), b.raw ? c : c.month + "/" + c.year
    }, j.prototype.exp_month = function ( b ) {
        b = a( b );
        var c, d;
        if ( b.future ) {
            do c = this.month( {
                raw: !0
            } )
                .numeric, d = parseInt( c, 10 ); while ( d < ( new Date )
                .getMonth() )
        } else c = this.month( {
            raw: !0
        } )
            .numeric;
        return c
    }, j.prototype.exp_year = function () {
        return this.year( {
            max: ( new Date )
                .getFullYear() + 10
        } )
    }, j.prototype.currency_types = function () {
        return [ {
            code: "AED",
            name: "United Arab Emirates Dirham"
        }, {
            code: "AFN",
            name: "Afghanistan Afghani"
        }, {
            code: "ALL",
            name: "Albania Lek"
        }, {
            code: "AMD",
            name: "Armenia Dram"
        }, {
            code: "ANG",
            name: "Netherlands Antilles Guilder"
        }, {
            code: "AOA",
            name: "Angola Kwanza"
        }, {
            code: "ARS",
            name: "Argentina Peso"
        }, {
            code: "AUD",
            name: "Australia Dollar"
        }, {
            code: "AWG",
            name: "Aruba Guilder"
        }, {
            code: "AZN",
            name: "Azerbaijan New Manat"
        }, {
            code: "BAM",
            name: "Bosnia and Herzegovina Convertible Marka"
        }, {
            code: "BBD",
            name: "Barbados Dollar"
        }, {
            code: "BDT",
            name: "Bangladesh Taka"
        }, {
            code: "BGN",
            name: "Bulgaria Lev"
        }, {
            code: "BHD",
            name: "Bahrain Dinar"
        }, {
            code: "BIF",
            name: "Burundi Franc"
        }, {
            code: "BMD",
            name: "Bermuda Dollar"
        }, {
            code: "BND",
            name: "Brunei Darussalam Dollar"
        }, {
            code: "BOB",
            name: "Bolivia Boliviano"
        }, {
            code: "BRL",
            name: "Brazil Real"
        }, {
            code: "BSD",
            name: "Bahamas Dollar"
        }, {
            code: "BTN",
            name: "Bhutan Ngultrum"
        }, {
            code: "BWP",
            name: "Botswana Pula"
        }, {
            code: "BYR",
            name: "Belarus Ruble"
        }, {
            code: "BZD",
            name: "Belize Dollar"
        }, {
            code: "CAD",
            name: "Canada Dollar"
        }, {
            code: "CDF",
            name: "Congo/Kinshasa Franc"
        }, {
            code: "CHF",
            name: "Switzerland Franc"
        }, {
            code: "CLP",
            name: "Chile Peso"
        }, {
            code: "CNY",
            name: "China Yuan Renminbi"
        }, {
            code: "COP",
            name: "Colombia Peso"
        }, {
            code: "CRC",
            name: "Costa Rica Colon"
        }, {
            code: "CUC",
            name: "Cuba Convertible Peso"
        }, {
            code: "CUP",
            name: "Cuba Peso"
        }, {
            code: "CVE",
            name: "Cape Verde Escudo"
        }, {
            code: "CZK",
            name: "Czech Republic Koruna"
        }, {
            code: "DJF",
            name: "Djibouti Franc"
        }, {
            code: "DKK",
            name: "Denmark Krone"
        }, {
            code: "DOP",
            name: "Dominican Republic Peso"
        }, {
            code: "DZD",
            name: "Algeria Dinar"
        }, {
            code: "EGP",
            name: "Egypt Pound"
        }, {
            code: "ERN",
            name: "Eritrea Nakfa"
        }, {
            code: "ETB",
            name: "Ethiopia Birr"
        }, {
            code: "EUR",
            name: "Euro Member Countries"
        }, {
            code: "FJD",
            name: "Fiji Dollar"
        }, {
            code: "FKP",
            name: "Falkland Islands (Malvinas) Pound"
        }, {
            code: "GBP",
            name: "United Kingdom Pound"
        }, {
            code: "GEL",
            name: "Georgia Lari"
        }, {
            code: "GGP",
            name: "Guernsey Pound"
        }, {
            code: "GHS",
            name: "Ghana Cedi"
        }, {
            code: "GIP",
            name: "Gibraltar Pound"
        }, {
            code: "GMD",
            name: "Gambia Dalasi"
        }, {
            code: "GNF",
            name: "Guinea Franc"
        }, {
            code: "GTQ",
            name: "Guatemala Quetzal"
        }, {
            code: "GYD",
            name: "Guyana Dollar"
        }, {
            code: "HKD",
            name: "Hong Kong Dollar"
        }, {
            code: "HNL",
            name: "Honduras Lempira"
        }, {
            code: "HRK",
            name: "Croatia Kuna"
        }, {
            code: "HTG",
            name: "Haiti Gourde"
        }, {
            code: "HUF",
            name: "Hungary Forint"
        }, {
            code: "IDR",
            name: "Indonesia Rupiah"
        }, {
            code: "ILS",
            name: "Israel Shekel"
        }, {
            code: "IMP",
            name: "Isle of Man Pound"
        }, {
            code: "INR",
            name: "India Rupee"
        }, {
            code: "IQD",
            name: "Iraq Dinar"
        }, {
            code: "IRR",
            name: "Iran Rial"
        }, {
            code: "ISK",
            name: "Iceland Krona"
        }, {
            code: "JEP",
            name: "Jersey Pound"
        }, {
            code: "JMD",
            name: "Jamaica Dollar"
        }, {
            code: "JOD",
            name: "Jordan Dinar"
        }, {
            code: "JPY",
            name: "Japan Yen"
        }, {
            code: "KES",
            name: "Kenya Shilling"
        }, {
            code: "KGS",
            name: "Kyrgyzstan Som"
        }, {
            code: "KHR",
            name: "Cambodia Riel"
        }, {
            code: "KMF",
            name: "Comoros Franc"
        }, {
            code: "KPW",
            name: "Korea (North) Won"
        }, {
            code: "KRW",
            name: "Korea (South) Won"
        }, {
            code: "KWD",
            name: "Kuwait Dinar"
        }, {
            code: "KYD",
            name: "Cayman Islands Dollar"
        }, {
            code: "KZT",
            name: "Kazakhstan Tenge"
        }, {
            code: "LAK",
            name: "Laos Kip"
        }, {
            code: "LBP",
            name: "Lebanon Pound"
        }, {
            code: "LKR",
            name: "Sri Lanka Rupee"
        }, {
            code: "LRD",
            name: "Liberia Dollar"
        }, {
            code: "LSL",
            name: "Lesotho Loti"
        }, {
            code: "LTL",
            name: "Lithuania Litas"
        }, {
            code: "LYD",
            name: "Libya Dinar"
        }, {
            code: "MAD",
            name: "Morocco Dirham"
        }, {
            code: "MDL",
            name: "Moldova Leu"
        }, {
            code: "MGA",
            name: "Madagascar Ariary"
        }, {
            code: "MKD",
            name: "Macedonia Denar"
        }, {
            code: "MMK",
            name: "Myanmar (Burma) Kyat"
        }, {
            code: "MNT",
            name: "Mongolia Tughrik"
        }, {
            code: "MOP",
            name: "Macau Pataca"
        }, {
            code: "MRO",
            name: "Mauritania Ouguiya"
        }, {
            code: "MUR",
            name: "Mauritius Rupee"
        }, {
            code: "MVR",
            name: "Maldives (Maldive Islands) Rufiyaa"
        }, {
            code: "MWK",
            name: "Malawi Kwacha"
        }, {
            code: "MXN",
            name: "Mexico Peso"
        }, {
            code: "MYR",
            name: "Malaysia Ringgit"
        }, {
            code: "MZN",
            name: "Mozambique Metical"
        }, {
            code: "NAD",
            name: "Namibia Dollar"
        }, {
            code: "NGN",
            name: "Nigeria Naira"
        }, {
            code: "NIO",
            name: "Nicaragua Cordoba"
        }, {
            code: "NOK",
            name: "Norway Krone"
        }, {
            code: "NPR",
            name: "Nepal Rupee"
        }, {
            code: "NZD",
            name: "New Zealand Dollar"
        }, {
            code: "OMR",
            name: "Oman Rial"
        }, {
            code: "PAB",
            name: "Panama Balboa"
        }, {
            code: "PEN",
            name: "Peru Nuevo Sol"
        }, {
            code: "PGK",
            name: "Papua New Guinea Kina"
        }, {
            code: "PHP",
            name: "Philippines Peso"
        }, {
            code: "PKR",
            name: "Pakistan Rupee"
        }, {
            code: "PLN",
            name: "Poland Zloty"
        }, {
            code: "PYG",
            name: "Paraguay Guarani"
        }, {
            code: "QAR",
            name: "Qatar Riyal"
        }, {
            code: "RON",
            name: "Romania New Leu"
        }, {
            code: "RSD",
            name: "Serbia Dinar"
        }, {
            code: "RUB",
            name: "Russia Ruble"
        }, {
            code: "RWF",
            name: "Rwanda Franc"
        }, {
            code: "SAR",
            name: "Saudi Arabia Riyal"
        }, {
            code: "SBD",
            name: "Solomon Islands Dollar"
        }, {
            code: "SCR",
            name: "Seychelles Rupee"
        }, {
            code: "SDG",
            name: "Sudan Pound"
        }, {
            code: "SEK",
            name: "Sweden Krona"
        }, {
            code: "SGD",
            name: "Singapore Dollar"
        }, {
            code: "SHP",
            name: "Saint Helena Pound"
        }, {
            code: "SLL",
            name: "Sierra Leone Leone"
        }, {
            code: "SOS",
            name: "Somalia Shilling"
        }, {
            code: "SPL",
            name: "Seborga Luigino"
        }, {
            code: "SRD",
            name: "Suriname Dollar"
        }, {
            code: "STD",
            name: "São Tomé and Príncipe Dobra"
        }, {
            code: "SVC",
            name: "El Salvador Colon"
        }, {
            code: "SYP",
            name: "Syria Pound"
        }, {
            code: "SZL",
            name: "Swaziland Lilangeni"
        }, {
            code: "THB",
            name: "Thailand Baht"
        }, {
            code: "TJS",
            name: "Tajikistan Somoni"
        }, {
            code: "TMT",
            name: "Turkmenistan Manat"
        }, {
            code: "TND",
            name: "Tunisia Dinar"
        }, {
            code: "TOP",
            name: "Tonga Pa'anga"
        }, {
            code: "TRY",
            name: "Turkey Lira"
        }, {
            code: "TTD",
            name: "Trinidad and Tobago Dollar"
        }, {
            code: "TVD",
            name: "Tuvalu Dollar"
        }, {
            code: "TWD",
            name: "Taiwan New Dollar"
        }, {
            code: "TZS",
            name: "Tanzania Shilling"
        }, {
            code: "UAH",
            name: "Ukraine Hryvnia"
        }, {
            code: "UGX",
            name: "Uganda Shilling"
        }, {
            code: "USD",
            name: "United States Dollar"
        }, {
            code: "UYU",
            name: "Uruguay Peso"
        }, {
            code: "UZS",
            name: "Uzbekistan Som"
        }, {
            code: "VEF",
            name: "Venezuela Bolivar"
        }, {
            code: "VND",
            name: "Viet Nam Dong"
        }, {
            code: "VUV",
            name: "Vanuatu Vatu"
        }, {
            code: "WST",
            name: "Samoa Tala"
        }, {
            code: "XAF",
            name: "Communauté Financière Africaine (BEAC) CFA Franc BEAC"
        }, {
            code: "XCD",
            name: "East Caribbean Dollar"
        }, {
            code: "XDR",
            name: "International Monetary Fund (IMF) Special Drawing Rights"
        }, {
            code: "XOF",
            name: "Communauté Financière Africaine (BCEAO) Franc"
        }, {
            code: "XPF",
            name: "Comptoirs Français du Pacifique (CFP) Franc"
        }, {
            code: "YER",
            name: "Yemen Rial"
        }, {
            code: "ZAR",
            name: "South Africa Rand"
        }, {
            code: "ZMW",
            name: "Zambia Kwacha"
        }, {
            code: "ZWD",
            name: "Zimbabwe Dollar"
        } ]
    }, j.prototype.currency = function () {
        return this.pick( this.currency_types() )
    }, j.prototype.currency_pair = function ( a ) {
        var b = this.unique( this.currency, 2, {
            comparator: function ( a, b ) {
                return 0 === a.length ? !1 : a.reduce( function ( a, c ) {
                    return a ? a : c.code === b.code
                }, !1 )
            }
        } );
        return a ? b[ 0 ] + "/" + b[ 1 ] : b
    }, j.prototype.d4 = function () {
        return this.natural( {
            min: 1,
            max: 4
        } )
    }, j.prototype.d6 = function () {
        return this.natural( {
            min: 1,
            max: 6
        } )
    }, j.prototype.d8 = function () {
        return this.natural( {
            min: 1,
            max: 8
        } )
    }, j.prototype.d10 = function () {
        return this.natural( {
            min: 1,
            max: 10
        } )
    }, j.prototype.d12 = function () {
        return this.natural( {
            min: 1,
            max: 12
        } )
    }, j.prototype.d20 = function () {
        return this.natural( {
            min: 1,
            max: 20
        } )
    }, j.prototype.d30 = function () {
        return this.natural( {
            min: 1,
            max: 30
        } )
    }, j.prototype.d100 = function () {
        return this.natural( {
            min: 1,
            max: 100
        } )
    }, j.prototype.rpg = function ( b, c ) {
        if ( c = a( c ), null === b ) throw new Error( "A type of die roll must be included" );
        var d = b.toLowerCase()
            .split( "d" ),
            e = [];
        if ( 2 !== d.length || !parseInt( d[ 0 ], 10 ) || !parseInt( d[ 1 ], 10 ) ) throw new Error(
            "Invalid format provided. Please provide #d# where the first # is the number of dice to roll, the second # is the max of each die"
        );
        for ( var f = d[ 0 ]; f > 0; f-- ) e[ f - 1 ] = this.natural( {
            min: 1,
            max: d[ 1 ]
        } );
        return "undefined" != typeof c.sum && c.sum ? e.reduce( function ( a, b ) {
            return a + b
        } ) : e
    }, j.prototype.guid = function ( a ) {
        a = a || {
            version: 5
        };
        var b = "ABCDEF1234567890",
            c = "AB89",
            d = this.string( {
                pool: b,
                length: 8
            } ) + "-" + this.string( {
                pool: b,
                length: 4
            } ) + "-" + a.version + this.string( {
                pool: b,
                length: 3
            } ) + "-" + this.string( {
                pool: c,
                length: 1
            } ) + this.string( {
                pool: b,
                length: 3
            } ) + "-" + this.string( {
                pool: b,
                length: 12
            } );
        return d
    }, j.prototype.hash = function ( b ) {
        b = a( b, {
            length: 40,
            casing: "lower"
        } );
        var c = "upper" === b.casing ? h.toUpperCase() : h;
        return this.string( {
            pool: c,
            length: b.length
        } )
    }, j.prototype.luhn_check = function ( a ) {
        var b = a.toString(),
            c = +b.substring( b.length - 1 );
        return c === this.luhn_calculate( +b.substring( 0, b.length - 1 ) )
    }, j.prototype.luhn_calculate = function ( a ) {
        for ( var b = a.toString()
            .split( "" )
            .reverse(), c = 0, d = 0, e = b.length; e > d; ++d ) {
            var f = +b[ d ];
            d % 2 === 0 && ( f *= 2, f > 9 && ( f -= 9 ) ), c += f
        }
        return 9 * c % 10
    }, j.prototype.mersenne_twister = function ( a ) {
        return new m( a )
    }, j.prototype.VERSION = "0.5.8";
    var m = function ( a ) {
        void 0 === a && ( a = ( new Date )
            .getTime() ), this.N = 624, this.M = 397, this.MATRIX_A = 2567483615, this.UPPER_MASK = 2147483648, this.LOWER_MASK =
            2147483647, this.mt = new Array( this.N ), this.mti = this.N + 1, this.init_genrand( a )
    };
    m.prototype.init_genrand = function ( a ) {
        for ( this.mt[ 0 ] = a >>> 0, this.mti = 1; this.mti < this.N; this.mti++ ) a = this.mt[ this.mti - 1 ] ^ this.mt[
            this.mti - 1 ] >>> 30, this.mt[ this.mti ] = ( 1812433253 * ( ( 4294901760 & a ) >>> 16 ) << 16 ) +
            1812433253 * ( 65535 & a ) + this.mti, this.mt[ this.mti ] >>>= 0
    }, m.prototype.init_by_array = function ( a, b ) {
        var c, d, e = 1,
            f = 0;
        for ( this.init_genrand( 19650218 ), c = this.N > b ? this.N : b; c; c-- ) d = this.mt[ e - 1 ] ^ this.mt[ e -
            1 ] >>> 30, this.mt[ e ] = ( this.mt[ e ] ^ ( 1664525 * ( ( 4294901760 & d ) >>> 16 ) << 16 ) + 1664525 * (
            65535 & d ) ) + a[ f ] + f, this.mt[ e ] >>>= 0, e++, f++, e >= this.N && ( this.mt[ 0 ] = this.mt[ this.N -
            1 ], e = 1 ), f >= b && ( f = 0 );
        for ( c = this.N - 1; c; c-- ) d = this.mt[ e - 1 ] ^ this.mt[ e - 1 ] >>> 30, this.mt[ e ] = ( this.mt[ e ] ^
            ( 1566083941 * ( ( 4294901760 & d ) >>> 16 ) << 16 ) + 1566083941 * ( 65535 & d ) ) - e, this.mt[ e ] >>>=
            0, e++, e >= this.N && ( this.mt[ 0 ] = this.mt[ this.N - 1 ], e = 1 );
        this.mt[ 0 ] = 2147483648
    }, m.prototype.genrand_int32 = function () {
        var a, b = new Array( 0, this.MATRIX_A );
        if ( this.mti >= this.N ) {
            var c;
            for ( this.mti === this.N + 1 && this.init_genrand( 5489 ), c = 0; c < this.N - this.M; c++ ) a = this.mt[
                c ] & this.UPPER_MASK | this.mt[ c + 1 ] & this.LOWER_MASK, this.mt[ c ] = this.mt[ c + this.M ] ^ a >>>
                1 ^ b[ 1 & a ];
            for ( ; c < this.N - 1; c++ ) a = this.mt[ c ] & this.UPPER_MASK | this.mt[ c + 1 ] & this.LOWER_MASK, this
                .mt[ c ] = this.mt[ c + ( this.M - this.N ) ] ^ a >>> 1 ^ b[ 1 & a ];
            a = this.mt[ this.N - 1 ] & this.UPPER_MASK | this.mt[ 0 ] & this.LOWER_MASK, this.mt[ this.N - 1 ] = this.mt[
                this.M - 1 ] ^ a >>> 1 ^ b[ 1 & a ], this.mti = 0
        }
        return a = this.mt[ this.mti++ ], a ^= a >>> 11, a ^= a << 7 & 2636928640, a ^= a << 15 & 4022730752, a ^= a >>>
            18, a >>> 0
    }, m.prototype.genrand_int31 = function () {
        return this.genrand_int32() >>> 1
    }, m.prototype.genrand_real1 = function () {
        return this.genrand_int32() * ( 1 / 4294967295 )
    }, m.prototype.random = function () {
        return this.genrand_int32() * ( 1 / 4294967296 )
    }, m.prototype.genrand_real3 = function () {
        return ( this.genrand_int32() + .5 ) * ( 1 / 4294967296 )
    }, m.prototype.genrand_res53 = function () {
        var a = this.genrand_int32() >>> 5,
            b = this.genrand_int32() >>> 6;
        return ( 67108864 * a + b ) * ( 1 / 9007199254740992 )
    }, "undefined" != typeof exports && ( "undefined" != typeof module && module.exports && ( exports = module.exports =
        j ), exports.Chance = j ), "function" == typeof define && define.amd && define( [], function () {
        return j
    } ), "object" == typeof window && "object" == typeof window.document && ( window.Chance = j, window.chance = new j )
}();