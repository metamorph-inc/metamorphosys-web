{"version":3,"sources":["src/app/default/node_modules/browserify/node_modules/browser-pack/_prelude.js","src/app/default/src/app/default/app.js","src/app/default/views/DesignSpace/DesignSpaceController.js","src/app/default/views/TestBench/TestBenchController.js","src/app/default/views/WorkspaceDetails/WorkspaceDetailsController.js","src/app/default/views/Workspaces/WorkspacesController.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzfile":"default-app.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*globals angular, console, window, require*/\n\nangular.module( 'CyPhyApp', [\n    'ui.router',\n\n    'gme.services',\n\n    'isis.ui.components',\n\n    'cyphy.components',\n\n    // app specific templates\n    'cyphy.default.templates'\n] )\n    .config( function ( $stateProvider, $urlRouterProvider ) {\n        'use strict';\n        // For any unmatched url, redirect to /workspaces\n        $urlRouterProvider.otherwise( '/workspaces' );\n        //\n        // Now set up the states\n        $stateProvider\n            .state( 'index', {\n                url: '/index'\n            } )\n            .state( 'workspaces', {\n                url: '/workspaces',\n                templateUrl: '/default/templates/Workspaces.html',\n                controller: 'WorkspacesController'\n            } )\n            .state( 'workspaceDetails', {\n                url: '/workspaceDetails/:workspaceId',\n                templateUrl: '/default/templates/WorkspaceDetails.html',\n                controller: 'WorkspaceDetailsController'\n            } )\n            .state( 'designSpace', {\n                url: '/designSpace/:workspaceId/:designId',\n                templateUrl: '/default/templates/DesignSpace.html',\n                controller: 'DesignSpaceController'\n            } )\n            .state( 'testBench', {\n                url: '/testBench/:workspaceId/:testBenchId',\n                templateUrl: '/default/templates/TestBench.html',\n                controller: 'TestBenchController'\n            } );\n    } )\n    .controller( 'MainNavigatorController', function ( $rootScope, $scope ) {\n        'use strict';\n        $scope.navigator = {};\n        $scope.navigator.items = [ {\n            id: 'root',\n            label: 'ADMEditor',\n            itemClass: 'cyphy-root'\n        } ];\n        $rootScope.mainNavigator = $scope.navigator;\n    } )\n    .run( function ( $state, growl, dataStoreService, projectService, branchService ) {\n        'use strict';\n        var connectionId = 'my-db-connection-id';\n\n        dataStoreService.connectToDatabase( connectionId, {\n            host: window.location.basename\n        } )\n            .then( function () {\n                // select default project and branch (master)\n                return projectService.selectProject( connectionId, 'ADMEditor' );\n            } )\n            .then( function () {\n                dataStoreService.watchConnectionState( connectionId, function ( eventType ) {\n                    console.log( 'watchConnectionState: ' + eventType );\n                } );\n                return branchService.selectBranch( connectionId, 'master' );\n            } )\n            .then( function () {\n                branchService.watchBranchState( 'my-db-connection-id', function ( eventType ) {\n                    console.log( 'watchBranchState: ' + eventType );\n                } );\n            } )\n            .\n        catch ( function ( reason ) {\n            growl.error( 'ADMEditor does not exist. Create and import it using the <a href=\"' +\n                window.location.origin + '\"> webgme interface</a>.' );\n            console.error( reason );\n        } );\n    } );\n\n\nrequire( './views/Workspaces/WorkspacesController' );\nrequire( './views/WorkspaceDetails/WorkspaceDetailsController' );\nrequire( './views/DesignSpace/DesignSpaceController' );\nrequire( './views/TestBench/TestBenchController' );","/*globals angular, console */\n\nangular.module( 'CyPhyApp' )\n    .controller( 'DesignSpaceController', function ( $scope, $state, $timeout, $modal, $location, $q, growl,\n        desertService, designService ) {\n        'use strict';\n        var context,\n            workspaceId = $state.params.workspaceId.replace( /-/g, '/' ),\n            designId = $state.params.designId.replace( /-/g, '/' ),\n            saveConfigurations,\n            generateDashboard,\n            cleanUpConfigurations = function () {\n                var i,\n                    config;\n                for ( i = 0; i < $scope.dataModels.configurations.length; i += 1 ) {\n                    config = $scope.dataModels.configurations[ i ];\n                    if ( config.hasOwnProperty( 'regionId' ) ) {\n                        designService.cleanUpRegion( context, config.regionId );\n                    }\n                }\n                $scope.state.resultsAvaliable = false;\n                $scope.dataModels.configurations = [];\n            };\n\n        console.log( 'DesignSpaceController' );\n        $scope.connectionId = 'my-db-connection-id';\n        $scope.workspaceId = workspaceId;\n        $scope.designId = designId;\n\n        // Check for valid connectionId and register clean-up on destroy event.\n        if ( $scope.connectionId && angular.isString( $scope.connectionId ) ) {\n            context = {\n                db: $scope.connectionId,\n                regionId: 'DesignSpaceController' + ( new Date() )\n                    .toISOString()\n            };\n            $scope.$on( '$destroy', function () {\n                designService.cleanUpAllRegions( context );\n            } );\n        } else {\n            throw new Error( 'connectionId must be defined and it must be a string' );\n        }\n\n        $scope.state = {\n            designTreeLoaded: false,\n            desertInputAvaliable: false,\n            configurationStatus: 'Select an action above...',\n            hasComponents: true,\n            savingConfigurations: false,\n            resultsAvaliable: false\n        };\n\n        $scope.dataModels = {\n            avmIds: {},\n            desertInput: {},\n            configurations: [],\n            setName: null,\n            design: {\n                name: 'Loading design...'\n            }\n        };\n\n        $scope.$on( 'designTreeLoaded', function ( event, data ) {\n            $scope.dataModels.avmIds = data;\n            $scope.state.hasComponents = Object.keys( data )\n                .length > 0;\n            $scope.state.designTreeLoaded = true;\n        } );\n\n        $scope.$on( 'selectedInstances', function ( event, data ) {\n            growl.info( data.name + ' has ' + data.ids.length + ' instance(s).' );\n            $scope.$broadcast( 'setSelectedNodes', data.ids );\n        } );\n\n        $scope.$on( 'configurationClicked', function ( event, data ) {\n            var i,\n                ids = [];\n            for ( i = 0; i < data.alternativeAssignments.length; i += 1 ) {\n                ids.push( data.alternativeAssignments[ i ].selectedAlternative );\n            }\n            $scope.$broadcast( 'setSelectedNodes', ids );\n        } );\n\n        $scope.$on( 'desertInputReady', function ( event, data ) {\n            $scope.dataModels.desertInput = data;\n            $scope.state.desertInputAvaliable = true;\n            console.log( data );\n        } );\n\n        $scope.$on( 'configurationsLoaded', function ( event, data ) {\n            cleanUpConfigurations();\n            $timeout( function () {\n                var i,\n                    queueList = [];\n                $scope.dataModels.setName = data.setName;\n                $scope.dataModels.configurations = data.configurations;\n                if ( data.configurations.length === 0 ) {\n                    growl.warning( 'There were no configurations in ' + data.setName );\n                    $scope.state.configurationStatus = 'Select an action above...';\n                }\n                for ( i = 0; i < $scope.dataModels.configurations.length; i += 1 ) {\n                    queueList.push( designService.appendWatchResults( context, $scope.dataModels.configurations[\n                        i ] ) );\n                }\n                $q.all( queueList )\n                    .then( function ( hasResults ) {\n                        hasResults.map( function ( res ) {\n                            if ( res === true ) {\n                                $scope.state.resultsAvaliable = true;\n                            }\n                        } );\n                    } );\n            } );\n        } );\n\n        $scope.calculateConfigurations = function () {\n            growl.info( 'Calculating configurations. Please wait..' );\n            $scope.state.configurationStatus = 'Calculating..';\n            cleanUpConfigurations();\n            desertService.calculateConfigurations( $scope.dataModels.desertInput )\n                .then( function ( configurations ) {\n                    $scope.dataModels.configurations = configurations;\n                    $scope.dataModels.setName = 'calculated';\n                    $scope.state.configurationStatus = 'Calculated';\n                } )\n                .\n            catch ( function ( reason ) {\n                console.error( reason );\n                growl.error( 'Failed to calculate configurations, see console for more info.' );\n                $scope.dataModels.configurations = [];\n                $scope.dataModels.setName = '';\n                $scope.state.configurationStatus = 'Failed to calculate.';\n            } );\n        };\n\n        $scope.saveConfigurations = function () {\n            $scope.$broadcast( 'exposeSelection', 'save' );\n        };\n\n        saveConfigurations = function ( configurations ) {\n            var modalInstance;\n            if ( configurations.length < 1 ) {\n                growl.warning( 'No selected configurations!' );\n                return;\n            }\n            $scope.state.savingConfigurations = true;\n            modalInstance = $modal.open( {\n                templateUrl: '/default/templates/SaveConfigurationSet.html',\n                controller: 'SaveConfigurationSetController',\n                //size: size,\n                resolve: {\n                    data: function () {\n                        return {\n                            configurations: configurations,\n                            context: context,\n                            designNode: $scope.dataModels.design.node\n                        };\n                    }\n                }\n            } );\n            modalInstance.result.then( function ( /*result*/) {\n                $scope.state.savingConfigurations = false;\n            }, function () {\n                console.log( 'Modal dismissed at: ' + new Date() );\n            } );\n        };\n\n        $scope.generateDashboard = function () {\n            $scope.$broadcast( 'exposeSelection', 'dashboard' );\n        };\n\n        generateDashboard = function ( configurations ) {\n            var i,\n                key,\n                resultIds = [];\n            for ( i = 0; i < configurations.length; i += 1 ) {\n                for ( key in configurations[ i ].results ) {\n                    if ( configurations[ i ].results.hasOwnProperty( key ) ) {\n                        resultIds.push( key );\n                    }\n                }\n            }\n            if ( resultIds.length > 0 ) {\n                growl.info( 'Generating dashboard for ' + resultIds.length + ' results.' );\n                designService.generateDashboard( context, $scope.designId, resultIds )\n                    .then( function ( resultLight ) {\n                        var k;\n                        if ( resultLight.success ) {\n                            growl.success( 'Dashboard generated ' + resultLight.artifactsHtml, {\n                                ttl: -1\n                            } );\n                        } else {\n                            growl.error( 'Dashboard generation failed.' );\n                            for ( k = 0; k < resultLight.messages.length; k += 1 ) {\n                                if ( growl.hasOwnProperty( resultLight.messages[ k ].severity ) ) {\n                                    growl[ resultLight.messages[ k ].severity ]( resultLight.messages[ k ].message );\n                                } else {\n                                    growl.warning( resultLight.messages[ k ].message );\n                                }\n                            }\n                        }\n                    } )\n                    .\n                catch ( function ( reason ) {\n                    console.error( reason );\n                    growl.error( 'Dashboard generation failed.' );\n                } );\n            } else {\n                growl.warning( 'No results in selected configurations!' );\n            }\n        };\n\n        $scope.$on( 'selectionExposed', function ( event, data, eType ) {\n            if ( eType === 'save' ) {\n                saveConfigurations( data );\n            } else if ( eType === 'dashboard' ) {\n                generateDashboard( data );\n            }\n        } );\n\n        designService.registerWatcher( context, function ( destroyed ) {\n\n            if ( destroyed ) {\n                console.warn( 'destroy event raised' );\n                // Data not (yet) avaliable.\n                // TODO: display this to the user.\n                return;\n            }\n            console.info( 'initialize event raised' );\n\n            designService.watchDesignNode( context, $scope.designId, function ( updateObject ) {\n                console.warn( updateObject );\n                if ( updateObject.type === 'load' ) {\n                    console.warn( 'Load shouldnt happen' );\n                } else if ( updateObject.type === 'update' ) {\n                    $scope.dataModels.design = updateObject.data;\n                } else if ( updateObject.type === 'unload' ) {\n                    growl.warning( 'Design Node was removed!' );\n                    $location.path( '/workspaceDetails/' + workspaceId.replace( /\\//g, '-' ) );\n                } else {\n                    throw new Error( updateObject );\n                }\n            } )\n                .then( function ( data ) {\n                    $scope.dataModels.design = data.design;\n                } );\n        } );\n    } )\n    .controller( 'SaveConfigurationSetController', function ( $scope, $modalInstance, $timeout, growl, data,\n        designService ) {\n        'use strict';\n        var configurations = data.configurations,\n            designNode = data.designNode,\n            context = data.context;\n        $scope.data = {\n            description: null,\n            name: null,\n            nbrOfConfigurations: configurations.length\n        };\n\n        $scope.ok = function () {\n            if ( !$scope.data.name ) {\n                growl.warning( 'You must provide a name!' );\n                return;\n            }\n            growl.info( 'Saving configuration set ' + $scope.data.name + 'this may take a while...' );\n            designService.callSaveDesertConfigurations( context, $scope.data.name, $scope.data.description,\n                configurations,\n                designNode.getId() )\n                .then( function () {\n                    growl.success( 'Configurations saved to ' + $scope.data.name );\n                    $modalInstance.close( $scope.data );\n                } );\n            //            designService.saveConfigurationSet($scope.data.name, $scope.data.description, configurations,\n            //                designNode, meta)\n            //                .then(function () {\n            //                    growl.success('Configurations saved to ' + $scope.data.name);\n            //                    $modalInstance.close($scope.data);\n            //                });\n        };\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss( 'cancel' );\n        };\n    } );","/*globals angular, console */\n\nangular.module( 'CyPhyApp' )\n    .controller( 'TestBenchController', function ( $scope, $state, $timeout, $location, growl, testBenchService ) {\n        'use strict';\n        var context = {\n            db: 'my-db-connection-id'\n        },\n            workspaceId = $state.params.workspaceId.replace( /-/g, '/' ),\n            testBenchId = $state.params.testBenchId.replace( /-/g, '/' );\n\n        console.log( 'TestBenchController' );\n        $scope.connectionId = context.db;\n\n        $scope.workspaceId = workspaceId;\n        $scope.testBenchId = testBenchId;\n\n        // Check for valid connectionId and register clean-up on destroy event.\n        if ( $scope.connectionId && angular.isString( $scope.connectionId ) ) {\n            context = {\n                db: $scope.connectionId,\n                regionId: 'TestBenchController' + ( new Date() )\n                    .toISOString()\n            };\n            $scope.$on( '$destroy', function () {\n                testBenchService.cleanUpAllRegions( context );\n            } );\n        } else {\n            throw new Error( 'connectionId must be defined and it must be a string' );\n        }\n\n        $scope.state = {\n            configurationStatus: 'Select a Top Level System Under Test...',\n            designId: null\n        };\n\n        $scope.dataModels = {\n            testBench: {\n                name: 'Loading test-bench..'\n            },\n            configurations: [],\n            setName: null\n        };\n\n        $scope.$on( 'configurationsLoaded', function ( event, data ) {\n            $scope.dataModels.configurations = [];\n            $timeout( function () {\n                $scope.dataModels.configurations = data.configurations;\n                $scope.dataModels.setName = data.setName;\n                if ( data.configurations.length === 0 ) {\n                    growl.warning( 'There were no configurations in ' + data.setName );\n                    $scope.state.configurationStatus = 'Select an action above...';\n                }\n            } );\n        } );\n\n        $scope.$on( 'topLevelSystemUnderTestSet', function ( event, newListItem, oldListItem ) {\n            if ( $scope.dataModels.testBench.node ) {\n                if ( $scope.dataModels.testBench.tlsutId === newListItem.id ) {\n                    growl.info( 'Design space is already set as Top Level System Under Test.' );\n                } else {\n                    $scope.dataModels.testBench.tlsutId = null;\n                    $timeout( function () {\n                        $scope.dataModels.testBench.tlsutId = newListItem.id;\n                        newListItem.cssClass = 'top-level-system-under-test';\n                        if ( oldListItem ) {\n                            oldListItem.cssClass = '';\n                        }\n                        $scope.dataModels.testBench.node.makePointer( 'TopLevelSystemUnderTest',\n                            newListItem.id );\n                    } );\n                }\n                //$scope.state.designId = newListItem.id;\n                console.log( 'topLevelSystemUnderTestSet', newListItem, oldListItem );\n            } else {\n                growl.warning( 'Can not set TLSUT while test-bench has not been loaded.' );\n            }\n        } );\n\n        $scope.$on( 'selectionExposed', function ( event, configurations ) {\n            var i,\n                configuration,\n                numCfgs = configurations.length,\n                invokeTestBenchRunner = function ( configuration ) {\n                    testBenchService.runTestBench( context, testBenchId, configuration.id )\n                        .then( function ( result ) {\n                            var j,\n                                key,\n                                artifactsHtml = '';\n                            // Build up artifacts html for growling.\n                            for ( key in result.artifacts ) {\n                                if ( result.artifacts.hasOwnProperty( key ) ) {\n                                    artifactsHtml += '<br> <a href=\"' + result.artifacts[ key ].downloadUrl +\n                                        '\">' + key + '</a>';\n                                }\n                            }\n                            if ( result.success ) {\n                                growl.success( 'TestBench run successfully on ' + configuration.name + '.' +\n                                    artifactsHtml, {\n                                        ttl: -1\n                                    } );\n                            } else {\n                                growl.error( 'TestBench run failed on ' + configuration.name + '.' +\n                                    artifactsHtml, {\n                                        ttl: -1\n                                    } );\n                                for ( j = 0; j < result.messages.length; j += 1 ) {\n                                    if ( growl.hasOwnProperty( result.messages[ j ].severity ) ) {\n                                        growl[ result.messages[ j ].severity ]( result.messages[\n                                            j ].message );\n                                    } else {\n                                        growl.warning( result.messages[ j ].message );\n                                    }\n                                }\n                            }\n                        } )\n                        .\n                    catch ( function ( reason ) {\n                        console.error( reason );\n                        growl.error( 'Running test-bench failed.' );\n                    } );\n                };\n            if ( numCfgs < 1 ) {\n                growl.warning( 'No selected configurations!' );\n                return;\n            }\n\n            for ( i = 0; i < numCfgs; i += 1 ) {\n                configuration = configurations[ i ];\n                growl.info( 'Test-bench started on ' + configuration.name + ' [' + ( i + 1 )\n                    .toString() + '/' + numCfgs + ']' );\n                invokeTestBenchRunner( configuration );\n            }\n        } );\n\n        $scope.runTestBench = function () {\n            $scope.$broadcast( 'exposeSelection' );\n        };\n\n        testBenchService.registerWatcher( context, function ( destroyed ) {\n\n            if ( destroyed ) {\n                console.warn( 'destroy event raised' );\n                // Data not (yet) avaliable.\n                // TODO: display this to the user.\n                return;\n            }\n            console.info( 'initialize event raised' );\n\n            testBenchService.watchTestBenchNode( context, $scope.testBenchId, function ( updateObject ) {\n                console.warn( updateObject );\n                if ( updateObject.type === 'load' ) {\n                    console.warn( 'Load should not happen' );\n                } else if ( updateObject.type === 'update' ) {\n                    $scope.dataModels.testBench = updateObject.data;\n                    if ( updateObject.tlsutChanged ) {\n                        $scope.$broadcast( 'topLevelSystemUnderTestChanged', $scope.dataModels.testBench.tlsutId );\n                    }\n                } else if ( updateObject.type === 'unload' ) {\n                    growl.warning( 'Test Bench was removed!' );\n                    $location.path( '/workspaceDetails/' + workspaceId.replace( /\\//g, '-' ) );\n                } else {\n                    throw new Error( updateObject );\n                }\n            } )\n                .then( function ( data ) {\n                    $scope.dataModels.testBench = data.testBench;\n                    if ( data.testBench.tlsutId ) {\n                        $scope.$broadcast( 'topLevelSystemUnderTestChanged', data.testBench.tlsutId );\n                    }\n                } );\n        } );\n    } );\n","/*globals angular, console */\n\nangular.module( 'CyPhyApp' )\n    .controller( 'WorkspaceDetailsController', function ( $rootScope, $scope, $window, $state ) {\n        'use strict';\n        var workspaceId = $state.params.workspaceId.replace( /-/g, '/' );\n        console.log( 'WorkspaceDetailsController', workspaceId );\n        $scope.dataModel = {\n            workspaceId: workspaceId\n        };\n        $rootScope.mainNavigator.items = [ {\n            id: 'root',\n            label: 'ADMEditor',\n            itemClass: 'cyphy-root',\n            menu: [ {\n                id: 'editor',\n                items: [ {\n                    id: 'open',\n                    label: 'Open in editor',\n                    disabled: false,\n                    iconClass: 'glyphicon glyphicon-edit',\n                    action: function () {\n                        $window.open( '/?project=ADMEditor', '_blank' );\n                    },\n                    actionData: {}\n                } ]\n            } ]\n        } ];\n        $rootScope.mainNavigator.separator = false;\n        //debugger;\n    } );","/*globals angular, console */\n\nangular.module( 'CyPhyApp' )\n    .controller( 'WorkspacesController', function ( $rootScope, $window ) {\n        'use strict';\n        console.log( 'WorkspacesController' );\n        $rootScope.mainNavigator.items = [ {\n            id: 'root',\n            label: 'ADMEditor',\n            itemClass: 'cyphy-root',\n            menu: [ {\n                id: 'editor',\n                items: [ {\n                    id: 'open',\n                    label: 'Open in editor',\n                    disabled: false,\n                    iconClass: 'glyphicon glyphicon-edit',\n                    action: function () {\n                        $window.open( '/?project=ADMEditor', '_blank' );\n                    },\n                    actionData: {}\n                } ]\n            } ]\n        } ];\n        $rootScope.mainNavigator.separator = false;\n    } );"]}