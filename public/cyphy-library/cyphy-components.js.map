{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/library/cyphy-components.js","bower_components/adapt-strap/dist/adapt-strap.js","bower_components/adapt-strap/dist/adapt-strap.tpl.js","bower_components/angular-growl/build/angular-growl.min.js","bower_components/angular-sanitize/angular-sanitize.js","bower_components/ng-file-upload/angular-file-upload-shim.js","bower_components/ng-file-upload/angular-file-upload.js","src/library/ComponentList/ComponentDetails.js","src/library/ComponentList/ComponentList.js","src/library/ConfigurationSetSelector/ConfigurationSetSelector.js","src/library/ConfigurationTable/ConfigurationTable.js","src/library/DesignList/DesignDetails.js","src/library/DesignList/DesignList.js","src/library/DesignTree/DesignTree.js","src/library/SimpleModal/SimpleModal.js","src/library/TestBenchList/TestBenchDetails.js","src/library/TestBenchList/TestBenchList.js","src/library/WorkersList/WorkersList.js","src/library/WorkspaceList/WorkspaceList.js","src/library/componentBrowser/classes/ClassNamesToSymbolTypes.js","src/library/componentBrowser/classes/ComponentBrowserService.js","src/library/componentBrowser/componentBrowser.js","src/library/propertyList/propertyList.js","src/library/services/BaseCyPhyService.js","src/library/services/ComponentService.js","src/library/services/DesertService.js","src/library/services/DesignLayoutService.js","src/library/services/DesignService.js","src/library/services/ExecutorService.js","src/library/services/FileService.js","src/library/services/PluginService.js","src/library/services/TestBenchService.js","src/library/services/WorkspaceService.js","src/library/services/cyphy-services.js"],"names":[],"mappingshvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpDA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtqvrvKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrnlankpNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdrzVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3VA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACppkCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjlPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChcyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"cyphy-components.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*globals require, angular */\n/**\n * @author lattmann / https://github.com/lattmann\n * @author pmeijer / https://github.com/pmeijer\n */\n// External dependencies\nrequire( '../../bower_components/ng-file-upload/angular-file-upload-shim' );\nrequire( '../../bower_components/ng-file-upload/angular-file-upload' );\nrequire( '../../bower_components/angular-growl/build/angular-growl.min' );\nrequire( '../../bower_components/angular-sanitize/angular-sanitize' );\nrequire( '../../bower_components/adapt-strap/dist/adapt-strap' );\nrequire( '../../bower_components/adapt-strap/dist/adapt-strap.tpl' );\n\n// Internal dependencies\nrequire( './services/cyphy-services' );\n\nangular.module( 'cyphy.components', [\n    'cyphy.services',\n    'cyphy.components.templates',\n    'angularFileUpload',\n    'angular-growl',\n    'ngSanitize',\n    'adaptv.adaptStrap',\n    'gme.services'\n\n] )\n    .config( [ 'growlProvider',\n        function ( growlProvider ) {\n            growlProvider.globalTimeToLive( {\n                success: 5000,\n                error: -1,\n                warning: 20000,\n                info: 5000\n            } );\n        }\n    ] );\n\nrequire( './SimpleModal/SimpleModal' );\n\nrequire( './WorkspaceList/WorkspaceList' );\n\nrequire( './ComponentList/ComponentDetails' );\nrequire( './ComponentList/ComponentList' );\n\nrequire( './DesignList/DesignDetails' );\nrequire( './DesignList/DesignList' );\nrequire( './DesignTree/DesignTree' );\n\nrequire( './TestBenchList/TestBenchDetails' );\nrequire( './TestBenchList/TestBenchList' );\n\nrequire( './ConfigurationTable/ConfigurationTable' );\nrequire( './ConfigurationSetSelector/ConfigurationSetSelector' );\n\nrequire( './WorkersList/WorkersList' );\n\nrequire( './componentBrowser/componentBrowser' );\nrequire( './propertyList/propertyList' );\n","/**\n * adapt-strap\n * @version v2.0.6 - 2014-10-26\n * @link https://github.com/Adaptv/adapt-strap\n * @author Kashyap Patel (kashyap@adap.tv)\n * @license MIT License, http://www.opensource.org/licenses/MIT\n */\n(function(window, document, undefined) {\n'use strict';\n// Source: module.js\nangular.module('adaptv.adaptStrap', [\n  'adaptv.adaptStrap.utils',\n  'adaptv.adaptStrap.treebrowser',\n  'adaptv.adaptStrap.tablelite',\n  'adaptv.adaptStrap.tableajax',\n  'adaptv.adaptStrap.loadingindicator',\n  'adaptv.adaptStrap.draggable',\n  'adaptv.adaptStrap.infinitedropdown'\n]).provider('$adConfig', function () {\n  var iconClasses = this.iconClasses = {\n      expand: 'glyphicon glyphicon-plus-sign',\n      collapse: 'glyphicon glyphicon-minus-sign',\n      loadingSpinner: 'glyphicon glyphicon-refresh ad-spin',\n      firstPage: 'glyphicon glyphicon-fast-backward',\n      previousPage: 'glyphicon glyphicon-backward',\n      nextPage: 'glyphicon glyphicon-forward',\n      lastPage: 'glyphicon glyphicon-fast-forward',\n      sortAscending: 'glyphicon glyphicon-chevron-up',\n      sortDescending: 'glyphicon glyphicon-chevron-down',\n      sortable: 'glyphicon glyphicon-resize-vertical',\n      draggable: 'glyphicon glyphicon-align-justify',\n      selectedItem: 'glyphicon glyphicon-ok'\n    }, paging = this.paging = {\n      request: {\n        start: 'skip',\n        pageSize: 'limit',\n        page: 'page',\n        sortField: 'sort',\n        sortDirection: 'sort_dir',\n        sortAscValue: 'asc',\n        sortDescValue: 'desc'\n      },\n      response: {\n        itemsLocation: 'data',\n        totalItems: 'pagination.totalCount'\n      }\n    };\n  this.$get = function () {\n    return {\n      iconClasses: iconClasses,\n      paging: paging\n    };\n  };\n});\n\n// Source: draggable.js\nangular.module('adaptv.adaptStrap.draggable', []).directive('adDrag', [\n  '$rootScope',\n  '$parse',\n  '$timeout',\n  function ($rootScope, $parse, $timeout) {\n    function linkFunction(scope, element, attrs) {\n      scope.draggable = attrs.adDrag;\n      scope.hasHandle = attrs.adDragHandle === 'false' || typeof attrs.adDragHandle === 'undefined' ? false : true;\n      scope.onDragStartCallback = $parse(attrs.adDragBegin) || null;\n      scope.onDragEndCallback = $parse(attrs.adDragEnd) || null;\n      scope.data = null;\n      var offset, mx, my, tx, ty;\n      var hasTouch = 'ontouchstart' in document.documentElement;\n      /* -- Events -- */\n      var startEvents = 'touchstart mousedown';\n      var moveEvents = 'touchmove mousemove';\n      var endEvents = 'touchend mouseup';\n      var $document = $(document);\n      var $window = $(window);\n      var dragEnabled = false;\n      var pressTimer = null;\n      function init() {\n        element.attr('draggable', 'false');\n        // prevent native drag\n        toggleListeners(true);\n      }\n      function toggleListeners(enable) {\n        if (!enable) {\n          return;\n        }\n        // add listeners.\n        scope.$on('$destroy', onDestroy);\n        attrs.$observe('adDrag', onEnableChange);\n        scope.$watch(attrs.adDragData, onDragDataChange);\n        scope.$on('draggable:start', onDragStart);\n        scope.$on('draggable:end', onDragEnd);\n        if (scope.hasHandle) {\n          element.on(startEvents, '.ad-drag-handle', onPress);\n        } else {\n          element.on(startEvents, onPress);\n          element.addClass('ad-draggable');\n        }\n        if (!hasTouch) {\n          element.on('mousedown', '.ad-drag-handle', function () {\n            return false;\n          });\n          element.on('mousedown', function () {\n            return false;\n          });  // prevent native drag\n        }\n      }\n      //--- Event Handlers ---\n      function onDragStart(evt, o) {\n        if (o.el === element && o.callback) {\n          o.callback(evt);\n        }\n      }\n      function onDragEnd(evt, o) {\n        if (o.el === element && o.callback) {\n          o.callback(evt);\n        }\n      }\n      function onDestroy() {\n        toggleListeners(false);\n      }\n      function onDragDataChange(newVal) {\n        scope.data = newVal;\n      }\n      function onEnableChange(newVal) {\n        dragEnabled = scope.$eval(newVal);\n      }\n      /*\n      * When the element is clicked start the drag behaviour\n      * On touch devices as a small delay so as not to prevent native window scrolling\n      */\n      function onPress(evt) {\n        if (!dragEnabled) {\n          return;\n        }\n        if (hasTouch) {\n          cancelPress();\n          pressTimer = setTimeout(function () {\n            cancelPress();\n            onLongPress(evt);\n          }, 100);\n          $document.on(moveEvents, cancelPress);\n          $document.on(endEvents, cancelPress);\n        } else {\n          onLongPress(evt);\n        }\n      }\n      /*\n       * Returns the inline property of an element\n       */\n      function getInlineProperty(prop, element) {\n        var styles = $(element).attr('style'), value;\n        if (styles) {\n          styles.split(';').forEach(function (e) {\n            var style = e.split(':');\n            if ($.trim(style[0]) === prop) {\n              value = style[1];\n            }\n          });\n        }\n        return value;\n      }\n      /*\n       * Preserve the width of the element during drag\n       */\n      function persistElementWidth() {\n        if (getInlineProperty('width', element)) {\n          element.data('ad-draggable-temp-width', getInlineProperty('width', element));\n        }\n        element.width(element.width());\n        element.children().each(function () {\n          if (getInlineProperty('width', this)) {\n            $(this).data('ad-draggable-temp-width', getInlineProperty('width', this));\n          }\n          $(this).width($(this).width());\n        });\n      }\n      function cancelPress() {\n        clearTimeout(pressTimer);\n        $document.off(moveEvents, cancelPress);\n        $document.off(endEvents, cancelPress);\n      }\n      function onLongPress(evt) {\n        if (!dragEnabled) {\n          return;\n        }\n        evt.preventDefault();\n        offset = element.offset();\n        if (scope.hasHandle) {\n          offset = element.find('.ad-drag-handle').offset();\n        } else {\n          offset = element.offset();\n        }\n        element.addClass('ad-dragging');\n        mx = evt.pageX || evt.originalEvent.touches[0].pageX;\n        my = evt.pageY || evt.originalEvent.touches[0].pageY;\n        tx = mx - offset.left - $window.scrollLeft();\n        ty = my - offset.top - $window.scrollTop();\n        persistElementWidth();\n        moveElement(tx, ty);\n        $document.on(moveEvents, onMove);\n        $document.on(endEvents, onRelease);\n        $rootScope.$broadcast('draggable:start', {\n          x: mx,\n          y: my,\n          tx: tx,\n          ty: ty,\n          el: element,\n          data: scope.data,\n          callback: onDragBegin\n        });\n      }\n      function onMove(evt) {\n        var cx, cy;\n        if (!dragEnabled) {\n          return;\n        }\n        evt.preventDefault();\n        cx = evt.pageX || evt.originalEvent.touches[0].pageX;\n        cy = evt.pageY || evt.originalEvent.touches[0].pageY;\n        tx = cx - mx + offset.left - $window.scrollLeft();\n        ty = cy - my + offset.top - $window.scrollTop();\n        moveElement(tx, ty);\n        $rootScope.$broadcast('draggable:move', {\n          x: mx,\n          y: my,\n          tx: tx,\n          ty: ty,\n          el: element,\n          data: scope.data\n        });\n      }\n      function onRelease(evt) {\n        if (!dragEnabled) {\n          return;\n        }\n        evt.preventDefault();\n        $rootScope.$broadcast('draggable:end', {\n          x: mx,\n          y: my,\n          tx: tx,\n          ty: ty,\n          el: element,\n          data: scope.data,\n          callback: onDragComplete\n        });\n        element.removeClass('ad-dragging');\n        reset();\n        $document.off(moveEvents, onMove);\n        $document.off(endEvents, onRelease);\n      }\n      // Callbacks\n      function onDragBegin(evt) {\n        if (!scope.onDragStartCallback) {\n          return;\n        }\n        scope.$apply(function () {\n          scope.onDragStartCallback(scope, {\n            $data: scope.data,\n            $dragElement: element,\n            $event: evt\n          });\n        });\n      }\n      function onDragComplete(evt) {\n        if (!scope.onDragEndCallback) {\n          return;\n        }\n        // To fix a bug issue where onDragEnd happens before\n        // onDropEnd. Currently the only way around this\n        // Ideally onDropEnd should fire before onDragEnd\n        $timeout(function () {\n          scope.$apply(function () {\n            scope.onDragEndCallback(scope, {\n              $data: scope.data,\n              $dragElement: element,\n              $event: evt\n            });\n          });\n        }, 100);\n      }\n      // utils functions\n      function reset() {\n        element.css({\n          left: '',\n          top: '',\n          position: '',\n          'z-index': ''\n        });\n        var width = element.data('ad-draggable-temp-width');\n        if (width) {\n          element.css({ width: width });\n        } else {\n          element.css({ width: '' });\n        }\n        element.children().each(function () {\n          var width = $(this).data('ad-draggable-temp-width');\n          if (width) {\n            $(this).css({ width: width });\n          } else {\n            $(this).css({ width: '' });\n          }\n        });\n      }\n      function moveElement(x, y) {\n        element.css({\n          left: x,\n          top: y,\n          position: 'fixed',\n          'z-index': 99999\n        });\n      }\n      init();\n    }\n    return {\n      restrict: 'A',\n      link: linkFunction\n    };\n  }\n]).directive('adDrop', [\n  '$rootScope',\n  '$parse',\n  function ($rootScope, $parse) {\n    function linkFunction(scope, element, attrs) {\n      scope.droppable = attrs.adDrop;\n      scope.onDropCallback = $parse(attrs.adDropEnd) || null;\n      scope.onDropOverCallback = $parse(attrs.adDropOver) || null;\n      scope.onDropLeaveCallback = $parse(attrs.adDropLeave) || null;\n      var dropEnabled = false;\n      var elem = null;\n      var $window = $(window);\n      function init() {\n        toggleListeners(true);\n      }\n      function toggleListeners(enable) {\n        if (!enable) {\n          return;\n        }\n        // add listeners.\n        attrs.$observe('adDrop', onEnableChange);\n        scope.$on('$destroy', onDestroy);\n        scope.$on('draggable:move', onDragMove);\n        scope.$on('draggable:end', onDragEnd);\n        scope.$on('draggable:change', onDropChange);\n      }\n      function onDestroy() {\n        toggleListeners(false);\n      }\n      function onEnableChange(newVal) {\n        dropEnabled = scope.$eval(newVal);\n      }\n      function onDropChange(evt, obj) {\n        if (elem !== obj.el) {\n          elem = null;\n        }\n      }\n      function onDragMove(evt, obj) {\n        if (!dropEnabled) {\n          return;\n        }\n        // If the dropElement and the drag element are the same\n        if (element === obj.el) {\n          return;\n        }\n        var el = getCurrentDropElement(obj.tx, obj.ty, obj.el);\n        if (el !== null) {\n          elem = el;\n          obj.el.lastDropElement = elem;\n          scope.$apply(function () {\n            scope.onDropOverCallback(scope, {\n              $data: obj.data,\n              $dragElement: obj.el,\n              $dropElement: elem,\n              $event: evt\n            });\n          });\n          element.addClass('ad-drop-over');\n          $rootScope.$broadcast('draggable:change', { el: elem });\n        } else {\n          if (obj.el.lastDropElement === element) {\n            scope.$apply(function () {\n              scope.onDropLeaveCallback(scope, {\n                $data: obj.data,\n                $dragElement: obj.el,\n                $dropElement: obj.el.lastDropElement,\n                $event: evt\n              });\n            });\n            obj.el.lastDropElement.removeClass('ad-drop-over');\n            delete obj.el.lastDropElement;\n          }\n        }\n      }\n      function onDragEnd(evt, obj) {\n        if (!dropEnabled) {\n          return;\n        }\n        if (elem) {\n          // call the adDrop element callback\n          scope.$apply(function () {\n            scope.onDropCallback(scope, {\n              $data: obj.data,\n              $dragElement: obj.el,\n              $dropElement: elem,\n              $event: evt\n            });\n          });\n          elem = null;\n        }\n      }\n      function getCurrentDropElement(x, y) {\n        var bounds = element.offset();\n        // set drag sensitivity\n        var vthold = Math.floor(element.outerHeight() / 6);\n        x = x + $window.scrollLeft();\n        y = y + $window.scrollTop();\n        return y >= bounds.top + vthold && y <= bounds.top + element.outerHeight() - vthold && (x >= bounds.left && x <= bounds.left + element.outerWidth()) && (x >= bounds.left && x <= bounds.left + element.outerWidth()) ? element : null;\n      }\n      init();\n    }\n    return {\n      restrict: 'A',\n      link: linkFunction\n    };\n  }\n]);\n\n// Source: infinitedropdown.js\nangular.module('adaptv.adaptStrap.infinitedropdown', [\n  'adaptv.adaptStrap.utils',\n  'adaptv.adaptStrap.loadingindicator'\n]).directive('adInfiniteDropdown', [\n  '$parse',\n  '$compile',\n  '$templateCache',\n  '$adConfig',\n  'adLoadPage',\n  'adDebounce',\n  'adStrapUtils',\n  'adLoadLocalPage',\n  function ($parse, $compile, $templateCache, $adConfig, adLoadPage, adDebounce, adStrapUtils, adLoadLocalPage) {\nfunction linkFunction(scope, element, attrs) {\n      // scope initialization\n      scope.attrs = attrs;\n      scope.adStrapUtils = adStrapUtils;\n      scope.items = {\n        list: [],\n        paging: {\n          currentPage: 1,\n          totalPages: undefined,\n          pageSize: Number(attrs.pageSize) || 10\n        }\n      };\n      scope.localConfig = {\n        loadingData: false,\n        singleSelectionMode: $parse(attrs.singleSelectionMode)() ? true : false,\n        dimensions: {\n          'max-height': attrs.maxHeight || '200px',\n          'max-width': attrs.maxWidth || 'auto'\n        }\n      };\n      scope.selectedItems = scope.$eval(attrs.selectedItems) || [];\n      scope.ajaxConfig = scope.$eval(attrs.ajaxConfig) || {};\n      // ---------- Local data ---------- //\n      var lastRequestToken, watchers = [];\n      // ---------- ui handlers ---------- //\n      scope.addRemoveItem = function (event, item, items) {\n        event.stopPropagation();\n        if (scope.localConfig.singleSelectionMode) {\n          scope.selectedItems[0] = item;\n        } else {\n          adStrapUtils.addRemoveItemFromList(item, items);\n        }\n        var callback = scope.$eval(attrs.onItemClick);\n        if (callback) {\n          callback(item);\n        }\n      };\n      scope.loadPage = adDebounce(function (page) {\n        lastRequestToken = Math.random();\n        scope.localConfig.loadingData = true;\n        var pageLoader = scope.$eval(attrs.pageLoader) || adLoadPage, params = {\n            pageNumber: page,\n            pageSize: scope.items.paging.pageSize,\n            sortKey: scope.localConfig.predicate,\n            sortDirection: scope.localConfig.reverse,\n            ajaxConfig: scope.ajaxConfig,\n            token: lastRequestToken\n          }, successHandler = function (response) {\n            if (response.token === lastRequestToken) {\n              if (page === 1) {\n                scope.items.list = response.items;\n              } else {\n                scope.items.list = scope.items.list.concat(response.items);\n              }\n              scope.items.paging.totalPages = response.totalPages;\n              scope.items.paging.currentPage = response.currentPage;\n              scope.localConfig.loadingData = false;\n            }\n          }, errorHandler = function () {\n            scope.localConfig.loadingData = false;\n          };\n        if (attrs.localDataSource) {\n          params.localData = scope.$eval(attrs.localDataSource);\n          successHandler(adLoadLocalPage(params));\n        } else {\n          pageLoader(params).then(successHandler, errorHandler);\n        }\n      }, 10);\n      scope.loadNextPage = function () {\n        if (!scope.localConfig.loadingData) {\n          if (scope.items.paging.currentPage + 1 <= scope.items.paging.totalPages) {\n            scope.loadPage(scope.items.paging.currentPage + 1);\n          }\n        }\n      };\n      // ---------- initialization and event listeners ---------- //\n      //We do the compile after injecting the name spacing into the template.\n      scope.loadPage(1);\n      // ---------- set watchers ---------- //\n      // reset on parameter change\n      if (attrs.ajaxConfig) {\n        scope.$watch(attrs.ajaxConfig, function (value) {\n          if (value) {\n            scope.loadPage(1);\n          }\n        }, true);\n      }\n      if (attrs.localDataSource) {\n        watchers.push(scope.$watch(attrs.localDataSource, function (value) {\n          if (value) {\n            scope.loadPage(1);\n          }\n        }));\n        watchers.push(scope.$watch(attrs.localDataSource + '.length', function (value) {\n          if (value) {\n            scope.loadPage(1);\n          }\n        }));\n      }\n      // ---------- disable watchers ---------- //\n      scope.$on('$destroy', function () {\n        watchers.forEach(function (watcher) {\n          watcher();\n        });\n      });\n      var listContainer = angular.element(element).find('ul')[0];\n      // infinite scroll handler\n      var loadFunction = adDebounce(function () {\n          // This is for infinite scrolling.\n          // When the scroll gets closer to the bottom, load more items.\n          if (listContainer.scrollTop + listContainer.offsetHeight >= listContainer.scrollHeight - 300) {\n            scope.loadNextPage();\n          }\n        }, 50);\n      angular.element(listContainer).bind('mousewheel', function (event) {\n        if (event.originalEvent && event.originalEvent.deltaY) {\n          listContainer.scrollTop += event.originalEvent.deltaY;\n          event.preventDefault();\n          event.stopPropagation();\n        }\n        loadFunction();\n      });\n    }\n    return {\n      restrict: 'E',\n      scope: true,\n      link: linkFunction,\n      templateUrl: 'infinitedropdown/infinitedropdown.tpl.html'\n    };\n  }\n]);\n\n// Source: loadingindicator.js\nangular.module('adaptv.adaptStrap.loadingindicator', []).directive('adLoadingIcon', [\n  '$adConfig',\n  '$compile',\n  function ($adConfig, $compile) {\n    return {\n      restrict: 'E',\n      compile: function compile() {\n        return {\n          pre: function preLink(scope, element, attrs) {\n            var loadingIconClass = attrs.loadingIconClass || $adConfig.iconClasses.loadingSpinner, ngStyleTemplate = attrs.loadingIconSize ? 'ng-style=\"{\\'font-size\\': \\'' + attrs.loadingIconSize + '\\'}\"' : '', template = '<i class=\"' + loadingIconClass + '\" ' + ngStyleTemplate + '></i>';\n            element.empty();\n            element.append($compile(template)(scope));\n          }\n        };\n      }\n    };\n  }\n]).directive('adLoadingOverlay', [\n  '$adConfig',\n  function ($adConfig) {\n    return {\n      restrict: 'E',\n      templateUrl: 'loadingindicator/loadingindicator.tpl.html',\n      scope: {\n        loading: '=',\n        zIndex: '@',\n        position: '@',\n        containerClasses: '@',\n        loadingIconClass: '@',\n        loadingIconSize: '@'\n      },\n      compile: function compile() {\n        return {\n          pre: function preLink(scope) {\n            scope.loadingIconClass = scope.loadingIconClass || $adConfig.iconClasses.loading;\n            scope.loadingIconSize = scope.loadingIconSize || '3em';\n          }\n        };\n      }\n    };\n  }\n]);\n\n// Source: tableajax.js\nangular.module('adaptv.adaptStrap.tableajax', [\n  'adaptv.adaptStrap.utils',\n  'adaptv.adaptStrap.loadingindicator'\n]).directive('adTableAjax', [\n  '$parse',\n  '$adConfig',\n  'adLoadPage',\n  'adDebounce',\n  'adStrapUtils',\n  function ($parse, $adConfig, adLoadPage, adDebounce, adStrapUtils) {\nfunction controllerFunction($scope, $attrs) {\n      // ---------- $scope initialization ---------- //\n      $scope.attrs = $attrs;\n      $scope.iconClasses = $adConfig.iconClasses;\n      $scope.adStrapUtils = adStrapUtils;\n      $scope.items = {\n        list: undefined,\n        paging: {\n          currentPage: 1,\n          totalPages: undefined,\n          pageSize: Number($attrs.pageSize) || 10,\n          pageSizes: $parse($attrs.pageSizes)() || [\n            10,\n            25,\n            50\n          ]\n        }\n      };\n      $scope.localConfig = {\n        pagingArray: [],\n        loadingData: false,\n        tableMaxHeight: $attrs.tableMaxHeight\n      };\n      $scope.ajaxConfig = $scope.$eval($attrs.ajaxConfig);\n      $scope.columnDefinition = $scope.$eval($attrs.columnDefinition);\n      // ---------- Local data ---------- //\n      var lastRequestToken, watchers = [];\n      if ($scope.items.paging.pageSizes.indexOf($scope.items.paging.pageSize) < 0) {\n        $scope.items.paging.pageSize = $scope.items.paging.pageSizes[0];\n      }\n      // ---------- ui handlers ---------- //\n      $scope.loadPage = adDebounce(function (page) {\n        lastRequestToken = Math.random();\n        $scope.localConfig.loadingData = true;\n        var pageLoader = $scope.$eval($attrs.pageLoader) || adLoadPage, params = {\n            pageNumber: page,\n            pageSize: $scope.items.paging.pageSize,\n            sortKey: $scope.localConfig.predicate,\n            sortDirection: $scope.localConfig.reverse,\n            ajaxConfig: $scope.ajaxConfig,\n            token: lastRequestToken\n          }, successHandler = function (response) {\n            if (response.token === lastRequestToken) {\n              $scope.items.list = response.items;\n              $scope.items.paging.totalPages = response.totalPages;\n              $scope.items.paging.currentPage = response.currentPage;\n              $scope.localConfig.pagingArray = response.pagingArray;\n              $scope.localConfig.loadingData = false;\n            }\n          }, errorHandler = function () {\n            $scope.localConfig.loadingData = false;\n          };\n        pageLoader(params).then(successHandler, errorHandler);\n      });\n      $scope.loadNextPage = function () {\n        if (!$scope.localConfig.loadingData) {\n          if ($scope.items.paging.currentPage + 1 <= $scope.items.paging.totalPages) {\n            $scope.loadPage($scope.items.paging.currentPage + 1);\n          }\n        }\n      };\n      $scope.loadPreviousPage = function () {\n        if (!$scope.localConfig.loadingData) {\n          if ($scope.items.paging.currentPage - 1 > 0) {\n            $scope.loadPage($scope.items.paging.currentPage - 1);\n          }\n        }\n      };\n      $scope.loadLastPage = function () {\n        if (!$scope.localConfig.loadingData) {\n          if ($scope.items.paging.currentPage !== $scope.items.paging.totalPages) {\n            $scope.loadPage($scope.items.paging.totalPages);\n          }\n        }\n      };\n      $scope.pageSizeChanged = function (size) {\n        if (Number(size) !== $scope.items.paging.pageSize) {\n          $scope.items.paging.pageSize = Number(size);\n          $scope.loadPage(1);\n        }\n      };\n      $scope.sortByColumn = function (column) {\n        if (column.sortKey) {\n          if (column.sortKey !== $scope.localConfig.predicate) {\n            $scope.localConfig.predicate = column.sortKey;\n            $scope.localConfig.reverse = true;\n          } else {\n            if ($scope.localConfig.reverse === true) {\n              $scope.localConfig.reverse = false;\n            } else {\n              $scope.localConfig.reverse = undefined;\n              $scope.localConfig.predicate = undefined;\n            }\n          }\n          $scope.loadPage($scope.items.paging.currentPage);\n        }\n      };\n      // ---------- initialization and event listeners ---------- //\n      $scope.loadPage(1);\n      // reset on parameter change\n      watchers.push($scope.$watch($attrs.ajaxConfig, function () {\n        $scope.loadPage(1);\n      }, true));\n      watchers.push($scope.$watchCollection($attrs.columnDefinition, function () {\n        $scope.columnDefinition = $scope.$eval($attrs.columnDefinition);\n      }));\n      // ---------- disable watchers ---------- //\n      $scope.$on('$destroy', function () {\n        watchers.forEach(function (watcher) {\n          watcher();\n        });\n      });\n    }\n    return {\n      restrict: 'E',\n      scope: true,\n      templateUrl: 'tableajax/tableajax.tpl.html',\n      controller: [\n        '$scope',\n        '$attrs',\n        controllerFunction\n      ]\n    };\n  }\n]);\n\n// Source: tablelite.js\nangular.module('adaptv.adaptStrap.tablelite', ['adaptv.adaptStrap.utils']).directive('adTableLite', [\n  '$parse',\n  '$http',\n  '$compile',\n  '$filter',\n  '$templateCache',\n  '$adConfig',\n  'adStrapUtils',\n  'adDebounce',\n  'adLoadLocalPage',\n  function ($parse, $http, $compile, $filter, $templateCache, $adConfig, adStrapUtils, adDebounce, adLoadLocalPage) {\nfunction controllerFunction($scope, $attrs) {\n      // ---------- $$scope initialization ---------- //\n      $scope.attrs = $attrs;\n      $scope.iconClasses = $adConfig.iconClasses;\n      $scope.adStrapUtils = adStrapUtils;\n      $scope.columnDefinition = $scope.$eval($attrs.columnDefinition);\n      $scope.items = {\n        list: undefined,\n        allItems: undefined,\n        paging: {\n          currentPage: 1,\n          totalPages: undefined,\n          pageSize: Number($attrs.pageSize) || 10,\n          pageSizes: $parse($attrs.pageSizes)() || [\n            10,\n            25,\n            50\n          ]\n        }\n      };\n      $scope.localConfig = {\n        localData: adStrapUtils.parse($scope.$eval($attrs.localDataSource)),\n        pagingArray: [],\n        dragChange: $scope.$eval($attrs.onDragChange)\n      };\n      $scope.selectedItems = $scope.$eval($attrs.selectedItems);\n      // ---------- Local data ---------- //\n      var placeHolder = null, pageButtonElement = null, validDrop = false, initialPos, watchers = [];\n      function moveElementNode(nodeToMove, relativeNode, dragNode) {\n        if (relativeNode.next()[0] === nodeToMove[0]) {\n          relativeNode.before(nodeToMove);\n        } else if (relativeNode.prev()[0] === nodeToMove[0]) {\n          relativeNode.after(nodeToMove);\n        } else {\n          if (relativeNode.next()[0] === dragNode[0]) {\n            relativeNode.before(nodeToMove);\n          } else if (relativeNode.prev()[0] === dragNode[0]) {\n            relativeNode.after(nodeToMove);\n          }\n        }\n      }\n      if ($scope.items.paging.pageSizes.indexOf($scope.items.paging.pageSize) < 0) {\n        $scope.items.paging.pageSize = $scope.items.paging.pageSizes[0];\n      }\n      // ---------- ui handlers ---------- //\n      $scope.loadPage = adDebounce(function (page) {\n        var itemsObject = $scope.localConfig.localData = adStrapUtils.parse($scope.$eval($attrs.localDataSource)), params;\n        params = {\n          pageNumber: page,\n          pageSize: !$attrs.disablePaging ? $scope.items.paging.pageSize : itemsObject.length,\n          sortKey: $scope.localConfig.predicate,\n          sortDirection: $scope.localConfig.reverse,\n          localData: itemsObject\n        };\n        var response = adLoadLocalPage(params);\n        $scope.items.list = response.items;\n        $scope.items.allItems = response.allItems;\n        $scope.items.paging.currentPage = response.currentPage;\n        $scope.items.paging.totalPages = response.totalPages;\n        $scope.localConfig.pagingArray = response.pagingArray;\n      }, 100);\n      $scope.loadNextPage = function () {\n        if ($scope.items.paging.currentPage + 1 <= $scope.items.paging.totalPages) {\n          $scope.loadPage($scope.items.paging.currentPage + 1);\n        }\n      };\n      $scope.loadPreviousPage = function () {\n        if ($scope.items.paging.currentPage - 1 > 0) {\n          $scope.loadPage($scope.items.paging.currentPage - 1);\n        }\n      };\n      $scope.loadLastPage = function () {\n        if (!$scope.localConfig.disablePaging) {\n          $scope.loadPage($scope.items.paging.totalPages);\n        }\n      };\n      $scope.pageSizeChanged = function (size) {\n        $scope.items.paging.pageSize = size;\n        $scope.loadPage(1);\n      };\n      $scope.sortByColumn = function (column) {\n        if (column.sortKey) {\n          if (column.sortKey !== $scope.localConfig.predicate) {\n            $scope.localConfig.predicate = column.sortKey;\n            $scope.localConfig.reverse = true;\n          } else {\n            if ($scope.localConfig.reverse === true) {\n              $scope.localConfig.reverse = false;\n            } else {\n              $scope.localConfig.reverse = undefined;\n              $scope.localConfig.predicate = undefined;\n            }\n          }\n          $scope.loadPage($scope.items.paging.currentPage);\n        }\n      };\n      $scope.unSortTable = function () {\n        $scope.localConfig.reverse = undefined;\n        $scope.localConfig.predicate = undefined;\n      };\n      $scope.onDragStart = function (data, dragElement) {\n        var parent = dragElement.parent();\n        placeHolder = $('<tr><td colspan=' + dragElement.find('td').length + '>&nbsp;</td></tr>');\n        initialPos = dragElement.index() + ($scope.items.paging.currentPage - 1) * $scope.items.paging.pageSize - 1;\n        if (dragElement[0] !== parent.children().last()[0]) {\n          dragElement.next().before(placeHolder);\n        } else {\n          parent.append(placeHolder);\n        }\n      };\n      $scope.onDragEnd = function () {\n        placeHolder.remove();\n      };\n      $scope.onDragOver = function (data, dragElement, dropElement) {\n        if (placeHolder) {\n          // Restricts valid drag to current table instance\n          moveElementNode(placeHolder, dropElement, dragElement);\n        }\n      };\n      $scope.onDropEnd = function (data, dragElement) {\n        var endPos;\n        if (placeHolder) {\n          // Restricts drop to current table instance\n          if (placeHolder.next()[0]) {\n            placeHolder.next().before(dragElement);\n          } else if (placeHolder.prev()[0]) {\n            placeHolder.prev().after(dragElement);\n          }\n          placeHolder.remove();\n          validDrop = true;\n          endPos = dragElement.index() + ($scope.items.paging.currentPage - 1) * $scope.items.paging.pageSize - 1;\n          adStrapUtils.moveItemInList(initialPos, endPos, $scope.localConfig.localData);\n          $scope.unSortTable();\n          if ($scope.localConfig.dragChange) {\n            $scope.localConfig.dragChange(initialPos, endPos, data);\n          }\n        }\n        if (pageButtonElement) {\n          pageButtonElement.removeClass('btn-primary');\n          pageButtonElement = null;\n        }\n      };\n      $scope.onNextPageButtonOver = function (data, dragElement, dropElement) {\n        if (pageButtonElement) {\n          pageButtonElement.removeClass('btn-primary');\n          pageButtonElement = null;\n        }\n        if (dropElement.attr('disabled') !== 'disabled') {\n          pageButtonElement = dropElement;\n          pageButtonElement.addClass('btn-primary');\n        }\n      };\n      $scope.onNextPageButtonDrop = function (data, dragElement) {\n        var endPos;\n        if (pageButtonElement) {\n          validDrop = true;\n          if (pageButtonElement.attr('id') === 'btnPrev') {\n            endPos = $scope.items.paging.pageSize * ($scope.items.paging.currentPage - 1) - 1;\n          }\n          if (pageButtonElement.attr('id') === 'btnNext') {\n            endPos = $scope.items.paging.pageSize * $scope.items.paging.currentPage;\n          }\n          adStrapUtils.moveItemInList(initialPos, endPos, $scope.localConfig.localData);\n          placeHolder.remove();\n          dragElement.remove();\n          if ($scope.localConfig.dragChange) {\n            $scope.localConfig.dragChange(initialPos, endPos, data);\n          }\n          pageButtonElement.removeClass('btn-primary');\n          pageButtonElement = null;\n        }\n      };\n      // ---------- initialization and event listeners ---------- //\n      $scope.loadPage(1);\n      // ---------- set watchers ---------- //\n      watchers.push($scope.$watch($attrs.localDataSource, function () {\n        $scope.loadPage($scope.items.paging.currentPage);\n      }));\n      watchers.push($scope.$watch($attrs.localDataSource + '.length', function () {\n        $scope.loadPage($scope.items.paging.currentPage);\n      }));\n      watchers.push($scope.$watchCollection($attrs.columnDefinition, function () {\n        $scope.columnDefinition = $scope.$eval($attrs.columnDefinition);\n      }));\n      // ---------- disable watchers ---------- //\n      $scope.$on('$destroy', function () {\n        watchers.forEach(function (watcher) {\n          watcher();\n        });\n      });\n    }\n    return {\n      restrict: 'E',\n      controller: [\n        '$scope',\n        '$attrs',\n        controllerFunction\n      ],\n      templateUrl: 'tablelite/tablelite.tpl.html',\n      scope: true\n    };\n  }\n]);\n\n// Source: treebrowser.js\nangular.module('adaptv.adaptStrap.treebrowser', []).directive('adTreeBrowser', [\n  '$adConfig',\n  function ($adConfig) {\n    function controllerFunction($scope, $attrs) {\n      var templateToken = Math.random();\n      // scope initialization\n      $scope.attrs = $attrs;\n      $scope.iconClasses = $adConfig.iconClasses;\n      $scope.treeRoot = $scope.$eval($attrs.treeRoot) || {};\n      $scope.toggle = function (event, item) {\n        var toggleCallback;\n        event.stopPropagation();\n        toggleCallback = $scope.$eval($attrs.toggleCallback);\n        if (toggleCallback) {\n          toggleCallback(item);\n        } else {\n          item._ad_expanded = !item._ad_expanded;\n        }\n      };\n      var hasChildren = $scope.$eval($attrs.hasChildren);\n      $scope.hasChildren = function (item) {\n        var found = item[$attrs.childNode] && item[$attrs.childNode].length > 0;\n        if (hasChildren) {\n          found = hasChildren(item);\n        }\n        return found;\n      };\n      // for unique template\n      $scope.localConfig = { rendererTemplateId: 'tree-renderer-' + templateToken + '.html' };\n    }\n    return {\n      restrict: 'E',\n      scope: true,\n      controller: [\n        '$scope',\n        '$attrs',\n        controllerFunction\n      ],\n      templateUrl: 'treebrowser/treebrowser.tpl.html'\n    };\n  }\n]);\n\n// Source: utils.js\nangular.module('adaptv.adaptStrap.utils', []).factory('adStrapUtils', [\n  '$filter',\n  function ($filter) {\n    var evalObjectProperty = function (obj, property) {\n        var arr = property.split('.');\n        if (obj) {\n          while (arr.length) {\n            var key = arr.shift();\n            if (obj) {\n              obj = obj[key];\n            }\n          }\n        }\n        return obj;\n      }, applyFilter = function (value, filter, item) {\n        var parts, filterOptions;\n        if (value && 'function' === typeof value) {\n          return value(item);\n        }\n        if (filter) {\n          parts = filter.split(':');\n          filterOptions = parts[1];\n          if (filterOptions) {\n            value = $filter(parts[0])(value, filterOptions);\n          } else {\n            value = $filter(parts[0])(value);\n          }\n        }\n        return value;\n      }, itemExistsInList = function (compareItem, list) {\n        var exist = false;\n        list.forEach(function (item) {\n          if (angular.equals(compareItem, item)) {\n            exist = true;\n          }\n        });\n        return exist;\n      }, itemsExistInList = function (items, list) {\n        var exist = true, i;\n        for (i = 0; i < items.length; i++) {\n          if (itemExistsInList(items[i], list) === false) {\n            exist = false;\n            break;\n          }\n        }\n        return exist;\n      }, addItemToList = function (item, list) {\n        list.push(item);\n      }, removeItemFromList = function (item, list) {\n        var i;\n        for (i = list.length - 1; i > -1; i--) {\n          if (angular.equals(item, list[i])) {\n            list.splice(i, 1);\n          }\n        }\n      }, addRemoveItemFromList = function (item, list) {\n        var i, found = false;\n        for (i = list.length - 1; i > -1; i--) {\n          if (angular.equals(item, list[i])) {\n            list.splice(i, 1);\n            found = true;\n          }\n        }\n        if (found === false) {\n          list.push(item);\n        }\n      }, addItemsToList = function (items, list) {\n        items.forEach(function (item) {\n          if (!itemExistsInList(item, list)) {\n            addRemoveItemFromList(item, list);\n          }\n        });\n      }, addRemoveItemsFromList = function (items, list) {\n        if (itemsExistInList(items, list)) {\n          list.length = 0;\n        } else {\n          addItemsToList(items, list);\n        }\n      }, moveItemInList = function (startPos, endPos, list) {\n        if (endPos < list.length) {\n          list.splice(endPos, 0, list.splice(startPos, 1)[0]);\n        }\n      }, parse = function (items) {\n        var itemsObject = [];\n        if (angular.isArray(items)) {\n          itemsObject = items;\n        } else {\n          angular.forEach(items, function (item) {\n            itemsObject.push(item);\n          });\n        }\n        return itemsObject;\n      }, getObjectProperty = function (item, property) {\n        if (property && 'function' === typeof property) {\n          return property(item);\n        }\n        var arr = property.split('.');\n        while (arr.length) {\n          item = item[arr.shift()];\n        }\n        return item;\n      };\n    return {\n      evalObjectProperty: evalObjectProperty,\n      applyFilter: applyFilter,\n      itemExistsInList: itemExistsInList,\n      itemsExistInList: itemsExistInList,\n      addItemToList: addItemToList,\n      removeItemFromList: removeItemFromList,\n      addRemoveItemFromList: addRemoveItemFromList,\n      addItemsToList: addItemsToList,\n      addRemoveItemsFromList: addRemoveItemsFromList,\n      moveItemInList: moveItemInList,\n      parse: parse,\n      getObjectProperty: getObjectProperty\n    };\n  }\n]).factory('adDebounce', [\n  '$timeout',\n  '$q',\n  function ($timeout, $q) {\nvar deb = function (func, delay, immediate, ctx) {\n      var timer = null, deferred = $q.defer(), wait = delay || 300;\n      return function () {\n        var context = ctx || this, args = arguments, callNow = immediate && !timer, later = function () {\n            if (!immediate) {\n              deferred.resolve(func.apply(context, args));\n              deferred = $q.defer();\n            }\n          };\n        if (timer) {\n          $timeout.cancel(timer);\n        }\n        timer = $timeout(later, wait);\n        if (callNow) {\n          deferred.resolve(func.apply(context, args));\n          deferred = $q.defer();\n        }\n        return deferred.promise;\n      };\n    };\n    return deb;\n  }\n]).directive('adCompileTemplate', [\n  '$compile',\n  function ($compile) {\n    return function (scope, element, attrs) {\n      scope.$watch(function (scope) {\n        return scope.$eval(attrs.adCompileTemplate);\n      }, function (value) {\n        element.html(value);\n        $compile(element.contents())(scope);\n      });\n    };\n  }\n]).factory('adLoadPage', [\n  '$adConfig',\n  '$http',\n  'adStrapUtils',\n  function ($adConfig, $http, adStrapUtils) {\n    return function (options) {\n      var start = (options.pageNumber - 1) * options.pageSize, pagingConfig = angular.copy($adConfig.paging), ajaxConfig = angular.copy(options.ajaxConfig);\n      if (ajaxConfig.paginationConfig && ajaxConfig.paginationConfig.request) {\n        angular.extend(pagingConfig.request, ajaxConfig.paginationConfig.request);\n      }\n      if (ajaxConfig.paginationConfig && ajaxConfig.paginationConfig.response) {\n        angular.extend(pagingConfig.response, ajaxConfig.paginationConfig.response);\n      }\n      ajaxConfig.params = ajaxConfig.params ? ajaxConfig.params : {};\n      ajaxConfig.params[pagingConfig.request.start] = start;\n      ajaxConfig.params[pagingConfig.request.pageSize] = options.pageSize;\n      ajaxConfig.params[pagingConfig.request.page] = options.pageNumber;\n      if (options.sortKey) {\n        ajaxConfig.params[pagingConfig.request.sortField] = options.sortKey;\n      }\n      if (options.sortDirection === false) {\n        ajaxConfig.params[pagingConfig.request.sortDirection] = pagingConfig.request.sortAscValue;\n      } else if (options.sortDirection === true) {\n        ajaxConfig.params[pagingConfig.request.sortDirection] = pagingConfig.request.sortDescValue;\n      }\n      var promise;\n      if (ajaxConfig.method === 'JSONP') {\n        promise = $http.jsonp(ajaxConfig.url + '?callback=JSON_CALLBACK', ajaxConfig);\n      } else {\n        promise = $http(ajaxConfig);\n      }\n      return promise.then(function (result) {\n        var response = {\n            items: adStrapUtils.evalObjectProperty(result.data, pagingConfig.response.itemsLocation),\n            currentPage: options.pageNumber,\n            totalPages: Math.ceil(adStrapUtils.evalObjectProperty(result.data, pagingConfig.response.totalItems) / options.pageSize),\n            pagingArray: [],\n            token: options.token\n          };\n        var TOTAL_PAGINATION_ITEMS = 5;\n        var minimumBound = options.pageNumber - Math.floor(TOTAL_PAGINATION_ITEMS / 2);\n        for (var i = minimumBound; i <= options.pageNumber; i++) {\n          if (i > 0) {\n            response.pagingArray.push(i);\n          }\n        }\n        while (response.pagingArray.length < TOTAL_PAGINATION_ITEMS) {\n          if (i > response.totalPages) {\n            break;\n          }\n          response.pagingArray.push(i);\n          i++;\n        }\n        return response;\n      });\n    };\n  }\n]).factory('adLoadLocalPage', [\n  '$filter',\n  function ($filter) {\n    return function (options) {\n      var response = {\n          items: undefined,\n          currentPage: options.pageNumber,\n          totalPages: undefined,\n          pagingArray: [],\n          token: options.token\n        };\n      var start = (options.pageNumber - 1) * options.pageSize, end = start + options.pageSize, i, itemsObject = options.localData, localItems;\n      localItems = $filter('orderBy')(itemsObject, options.sortKey, options.sortDirection);\n      response.items = localItems.slice(start, end);\n      response.allItems = itemsObject;\n      response.currentPage = options.pageNumber;\n      response.totalPages = Math.ceil(itemsObject.length / options.pageSize);\n      var TOTAL_PAGINATION_ITEMS = 5;\n      var minimumBound = options.pageNumber - Math.floor(TOTAL_PAGINATION_ITEMS / 2);\n      for (i = minimumBound; i <= options.pageNumber; i++) {\n        if (i > 0) {\n          response.pagingArray.push(i);\n        }\n      }\n      while (response.pagingArray.length < TOTAL_PAGINATION_ITEMS) {\n        if (i > response.totalPages) {\n          break;\n        }\n        response.pagingArray.push(i);\n        i++;\n      }\n      return response;\n    };\n  }\n]);\n\n})(window, document);\n","/**\n * adapt-strap\n * @version v2.0.6 - 2014-10-26\n * @link https://github.com/Adaptv/adapt-strap\n * @author Kashyap Patel (kashyap@adap.tv)\n * @license MIT License, http://www.opensource.org/licenses/MIT\n */\n(function(window, document, undefined) {\n'use strict';\n\n// Source: infinitedropdown.tpl.js\nangular.module('adaptv.adaptStrap.infinitedropdown').run([\n  '$templateCache',\n  function ($templateCache) {\n    $templateCache.put('infinitedropdown/infinitedropdown.tpl.html', '<div class=\"ad-infinite-list-container\"><div class=\"dropdown\"><button type=\"button\" class=\"dropdown-toggle\" ng-class=\"attrs.btnClasses || \\'btn btn-default\\'\" data-toggle=\"dropdown\"><span ng-if=\"!attrs.labelDisplayProperty || !selectedItems.length\">{{ attrs.initialLabel || \\'Select\\' }}</span> <span ng-if=\"attrs.labelDisplayProperty && selectedItems.length\">{{ readProperty(selectedItems[selectedItems.length - 1], attrs.labelDisplayProperty) }}</span> <span class=\"caret\"></span></button><ul class=\"dropdown-menu\" role=\"menu\" ng-style=\"localConfig.dimensions\"><li class=\"text-overflow\" data-ng-repeat=\"item in items.list\" ng-class=\"{\\'active\\': adStrapUtils.itemExistsInList(item, selectedItems)}\" ng-click=\"addRemoveItem($event, item, selectedItems)\"><a role=\"menuitem\" tabindex=\"-1\" href=\"\"><span ng-if=\"attrs.displayProperty\">{{ adStrapUtils.getObjectProperty(item, attrs.displayProperty) }}</span> <span ng-if=\"attrs.template\" ad-compile-template=\"{{ attrs.template }}\"></span> <span ng-if=\"attrs.templateUrl\" ng-include=\"attrs.templateUrl\"></span></a></li><li class=\"text-overflow text-center\" ng-style=\"{\\'opacity\\': localConfig.loadingData ? 1 : 0}\"><a role=\"menuitem\" tabindex=\"-1\" href=\"\"><ad-loading-icon></ad-loading-icon></a></li></ul></div></div>');\n  }\n]);\n\n// Source: loadingindicator.tpl.js\nangular.module('adaptv.adaptStrap.loadingindicator').run([\n  '$templateCache',\n  function ($templateCache) {\n    $templateCache.put('loadingindicator/loadingindicator.tpl.html', '<div class=\"ad-loading-overlay-container\" ng-class=\"containerClasses\" ng-style=\"{\\'z-index\\': zIndex || \\'1000\\',\\'position\\': position || \\'absolute\\'}\" ng-show=\"loading\"><div class=\"wrapper\"><div class=\"loading-indicator\"><ad-loading-icon loading-icon-size=\"{{ loadingIconSize }}\" loading-icon-class=\"{{ loadingIconClass }}\"></ad-loading-icon></div></div></div>');\n  }\n]);\n\n// Source: tableajax.tpl.js\nangular.module('adaptv.adaptStrap.tableajax').run([\n  '$templateCache',\n  function ($templateCache) {\n    $templateCache.put('tableajax/tableajax.tpl.html', '<div class=\"ad-table-ajax-container\" ng-if=\"items.paging.totalPages || localConfig.loadingData || !attrs.itemsNotFoundMessage\"><table class=\"ad-sticky-table\" ng-class=\"attrs.tableClasses || \\'table\\'\" ng-if=\"localConfig.tableMaxHeight\"><tr class=\"ad-user-select-none\"><th data-ng-repeat=\"definition in columnDefinition\" ng-click=\"sortByColumn(definition)\" ng-class=\"{\\'ad-cursor-pointer\\': definition.sortKey}\" ng-style=\"{\\'width\\': definition.width}\"><div class=\"pull-right\" ng-if=\"definition.sortKey && localConfig.predicate == definition.sortKey\"><i ng-class=\"iconClasses.sortAscending\" ng-hide=\"localConfig.reverse\"></i> <i ng-class=\"iconClasses.sortDescending\" ng-show=\"localConfig.reverse\"></i></div><div class=\"pull-right\" ng-if=\"definition.sortKey && localConfig.predicate != definition.sortKey\"><i ng-class=\"iconClasses.sortable\"></i></div><div ng-if=\"definition.columnHeaderTemplate\" ng-bind-html=\"definition.columnHeaderTemplate\"></div><div ng-if=\"definition.columnHeaderDisplayName\" ng-bind=\"definition.columnHeaderDisplayName\"></div></th></tr></table><div class=\"ad-table-container\" ng-style=\"{\\'max-height\\': localConfig.tableMaxHeight}\"><table ng-class=\"attrs.tableClasses || \\'table\\'\"><tr class=\"ad-user-select-none\" ng-if=\"!localConfig.tableMaxHeight\"><th data-ng-repeat=\"definition in columnDefinition\" ng-click=\"sortByColumn(definition)\" ng-class=\"{\\'ad-cursor-pointer\\': definition.sortKey}\" ng-style=\"{\\'width\\': definition.width}\"><div class=\"pull-right\" ng-if=\"definition.sortKey && localConfig.predicate == definition.sortKey\"><i ng-class=\"iconClasses.sortAscending\" ng-hide=\"localConfig.reverse\"></i> <i ng-class=\"iconClasses.sortDescending\" ng-show=\"localConfig.reverse\"></i></div><div class=\"pull-right\" ng-if=\"definition.sortKey && localConfig.predicate != definition.sortKey\"><i ng-class=\"iconClasses.sortable\"></i></div><div ng-if=\"definition.columnHeaderTemplate\" ng-bind-html=\"definition.columnHeaderTemplate\"></div><div ng-if=\"definition.columnHeaderDisplayName\" ng-bind=\"definition.columnHeaderDisplayName\"></div></th></tr><tr data-ng-repeat=\"item in items.list\"><td data-ng-repeat=\"definition in columnDefinition\" ng-style=\"{\\'width\\': definition.width}\"><div ng-if=\"definition.templateUrl\"><ng-include src=\"definition.templateUrl\"></ng-include></div><div ng-if=\"definition.template\"><span ad-compile-template=\"definition.template\"></span></div><div ng-if=\"!definition.templateUrl && !definition.template\">{{ adStrapUtils.applyFilter(adStrapUtils.getObjectProperty(item, definition.displayProperty, item), definition.cellFilter) }}</div></td></tr></table><ad-loading-overlay loading=\"localConfig.loadingData\"></ad-loading-overlay></div><div class=\"row\"><div class=\"col-md-8 col-sm-8\"><div class=\"pull-left\" ng-class=\"attrs.paginationBtnGroupClasses || \\'btn-group btn-group-sm\\'\" ng-show=\"items.paging.totalPages > 1\"><button type=\"button\" class=\"btn btn-default\" ng-click=\"loadPage(1)\" ng-disabled=\"items.paging.currentPage == 1\"><i ng-class=\"iconClasses.firstPage\"></i></button> <button type=\"button\" class=\"btn btn-default\" ng-click=\"loadPreviousPage()\" ng-disabled=\"items.paging.currentPage == 1\"><i ng-class=\"iconClasses.previousPage\"></i></button> <button type=\"button\" class=\"btn btn-default\" ng-repeat=\"page in localConfig.pagingArray\" ng-class=\"{active: items.paging.currentPage == page}\" ng-click=\"loadPage(page)\">{{ page }}</button> <button type=\"button\" class=\"btn btn-default\" ng-click=\"loadNextPage()\" ng-disabled=\"items.paging.currentPage == items.paging.totalPages\"><i ng-class=\"iconClasses.nextPage\"></i></button> <button type=\"button\" class=\"btn btn-default\" ng-click=\"loadLastPage()\" ng-disabled=\"items.paging.currentPage == items.paging.totalPages\"><i ng-class=\"iconClasses.lastPage\"></i></button></div></div><div class=\"col-md-4 col-sm-4\"><div class=\"pull-right\" ng-class=\"attrs.paginationBtnGroupClasses || \\'btn-group btn-group-sm\\'\"><button type=\"button\" class=\"btn btn-default\" ng-repeat=\"size in items.paging.pageSizes\" ng-class=\"{active: items.paging.pageSize == size}\" ng-click=\"pageSizeChanged(size)\">{{ size }}</button></div></div></div></div><div ng-if=\"!items.paging.totalPages && !localConfig.loadingData && attrs.itemsNotFoundMessage\"><div class=\"alert alert-info\" role=\"alert\">{{ attrs.itemsNotFoundMessage }}</div></div>');\n  }\n]);\n\n// Source: tablelite.tpl.js\nangular.module('adaptv.adaptStrap.tablelite').run([\n  '$templateCache',\n  function ($templateCache) {\n    $templateCache.put('tablelite/tablelite.tpl.html', '<div class=\"ad-table-lite-container\" ng-if=\"items.allItems.length || !attrs.itemsNotFoundMessage\"><table class=\"ad-sticky-table\" ng-class=\"attrs.tableClasses || \\'table\\'\" ng-if=\"attrs.tableMaxHeight\"><tr class=\"ad-user-select-none\"><th class=\"ad-select-cell\" ng-if=\"attrs.draggable\"><i></i></th><th class=\"ad-select-cell\" ng-if=\"attrs.selectedItems && items.allItems\"><input type=\"checkbox\" class=\"ad-cursor-pointer\" ng-click=\"adStrapUtils.addRemoveItemsFromList(items.allItems, selectedItems)\" ng-checked=\"adStrapUtils.itemsExistInList(items.allItems, selectedItems)\"></th><th data-ng-repeat=\"definition in columnDefinition\" ng-click=\"sortByColumn(definition)\" ng-class=\"{\\'ad-cursor-pointer\\': definition.sortKey}\" ng-style=\"{\\'width\\': definition.width}\"><div class=\"pull-right\" ng-if=\"definition.sortKey && localConfig.predicate == definition.sortKey\"><i ng-class=\"iconClasses.sortAscending\" ng-hide=\"localConfig.reverse\"></i> <i ng-class=\"iconClasses.sortDescending\" ng-show=\"localConfig.reverse\"></i></div><div class=\"pull-right\" ng-if=\"definition.sortKey && localConfig.predicate != definition.sortKey\"><i ng-class=\"iconClasses.sortable\"></i></div><div ng-if=\"definition.columnHeaderTemplate\" ng-bind-html=\"definition.columnHeaderTemplate\"></div><div ng-if=\"definition.columnHeaderDisplayName\" ng-bind=\"definition.columnHeaderDisplayName\"></div></th></tr></table><div class=\"ad-table-container\" ng-style=\"{\\'max-height\\': attrs.tableMaxHeight}\"><table ng-class=\"attrs.tableClasses || \\'table\\'\"><tr class=\"ad-user-select-none\" ng-if=\"!attrs.tableMaxHeight\"><th class=\"ad-select-cell\" ng-if=\"attrs.draggable\"><i></i></th><th class=\"ad-select-cell\" ng-if=\"attrs.selectedItems && items.allItems\"><input type=\"checkbox\" class=\"ad-cursor-pointer\" ng-click=\"adStrapUtils.addRemoveItemsFromList(items.allItems, selectedItems)\" ng-checked=\"adStrapUtils.itemsExistInList(items.allItems, selectedItems)\"></th><th data-ng-repeat=\"definition in columnDefinition\" ng-click=\"sortByColumn(definition)\" ng-class=\"{\\'ad-cursor-pointer\\': definition.sortKey}\" ng-style=\"{\\'width\\': definition.width}\"><div class=\"pull-right\" ng-if=\"definition.sortKey && localConfig.predicate == definition.sortKey\"><i ng-class=\"iconClasses.sortAscending\" ng-hide=\"localConfig.reverse\"></i> <i ng-class=\"iconClasses.sortDescending\" ng-show=\"localConfig.reverse\"></i></div><div class=\"pull-right\" ng-if=\"definition.sortKey && localConfig.predicate != definition.sortKey\"><i ng-class=\"iconClasses.sortable\"></i></div><div ng-if=\"definition.columnHeaderTemplate\" ng-bind-html=\"definition.columnHeaderTemplate\"></div><div ng-if=\"definition.columnHeaderDisplayName\" ng-bind=\"definition.columnHeaderDisplayName\"></div></th></tr><tr ng-if=\"!attrs.draggable\" data-ng-repeat=\"item in items.list\" ng-class=\"{\\'ad-selected\\': attrs.selectedItems && adStrapUtils.itemExistsInList(item, selectedItems)}\"><td class=\"ad-select-cell\" ng-if=\"attrs.selectedItems\"><input type=\"checkbox\" class=\"ad-cursor-pointer\" ng-checked=\"adStrapUtils.itemExistsInList(item, selectedItems)\" ng-click=\"adStrapUtils.addRemoveItemFromList(item, selectedItems)\"></td><td data-ng-repeat=\"definition in columnDefinition\" ng-style=\"{\\'width\\': definition.width}\"><div ng-if=\"definition.templateUrl\"><ng-include src=\"definition.templateUrl\"></ng-include></div><div ng-if=\"definition.template\"><span ad-compile-template=\"definition.template\"></span></div><div ng-if=\"!definition.templateUrl && !definition.template\">{{ adStrapUtils.applyFilter(adStrapUtils.getObjectProperty(item, definition.displayProperty), definition.cellFilter) }}</div></td></tr><tr ng-if=\"attrs.draggable\" ad-drag=\"true\" ad-drag-handle=\"true\" ad-drop=\"true\" ad-drag-data=\"item\" ad-drop-over=\"onDragOver($data, $dragElement, $dropElement, $event)\" ad-drop-end=\"onDropEnd($data, $dragElement, $dropElement, $event)\" ad-drag-begin=\"onDragStart($data, $dragElement, $event)\" ad-drag-end=\"onDragEnd($data, $dragElement, $event)\" data-ng-repeat=\"item in items.list\" ng-class=\"{\\'ad-selected\\': attrs.selectedItems && adStrapUtils.itemExistsInList(item, selectedItems)}\"><td class=\"ad-select-cell ad-drag-handle\" ng-if=\"attrs.draggable\"><i ng-class=\"iconClasses.draggable\"></i></td><td class=\"ad-select-cell\" ng-if=\"attrs.selectedItems\"><input type=\"checkbox\" class=\"ad-cursor-pointer\" ng-checked=\"adStrapUtils.itemExistsInList(item, selectedItems)\" ng-click=\"adStrapUtils.addRemoveItemFromList(item, selectedItems)\"></td><td data-ng-repeat=\"definition in columnDefinition\" ng-style=\"{\\'width\\': definition.width}\"><div ng-if=\"definition.templateUrl\"><ng-include src=\"definition.templateUrl\"></ng-include></div><div ng-if=\"definition.template\"><span ad-compile-template=\"definition.template\"></span></div><div ng-if=\"!definition.templateUrl && !definition.template\">{{ adStrapUtils.applyFilter(adStrapUtils.getObjectProperty(item, definition.displayProperty), definition.cellFilter) }}</div></td></tr></table></div><div class=\"row\" ng-if=\"items.allItems.length > items.paging.pageSizes[0] && !attrs.disablePaging\"><div class=\"col-md-8 col-sm-8\"><div class=\"pull-left\" ng-class=\"attrs.paginationBtnGroupClasses || \\'btn-group btn-group-sm\\'\"><button type=\"button\" class=\"btn btn-default\" ng-click=\"loadPage(1)\" ng-disabled=\"items.paging.currentPage == 1\"><i ng-class=\"iconClasses.firstPage\"></i></button> <button type=\"button\" class=\"btn btn-default\" ng-if=\"!attrs.draggable\" ng-click=\"loadPreviousPage()\" ng-disabled=\"items.paging.currentPage == 1\"><i ng-class=\"iconClasses.previousPage\"></i></button> <button type=\"button\" id=\"btnPrev\" class=\"btn btn-default\" ng-if=\"attrs.draggable\" ad-drop=\"true\" ad-drop-over=\"onNextPageButtonOver($data, $dragElement, $dropElement, $event)\" ad-drop-end=\"onNextPageButtonDrop($data, $dragElement, $dropElement, $event)\" ng-click=\"loadPreviousPage()\" ng-disabled=\"items.paging.currentPage == 1\"><i ng-class=\"iconClasses.previousPage\"></i></button> <button type=\"button\" class=\"btn btn-default\" ng-repeat=\"page in localConfig.pagingArray\" ng-class=\"{active: items.paging.currentPage == page}\" ng-click=\"loadPage(page)\">{{ page }}</button> <button type=\"button\" class=\"btn btn-default\" ng-if=\"!attrs.draggable\" ng-click=\"loadNextPage()\" ng-disabled=\"items.paging.currentPage == items.paging.totalPages\"><i ng-class=\"iconClasses.nextPage\"></i></button> <button type=\"button\" class=\"btn btn-default\" id=\"btnNext\" ng-if=\"attrs.draggable\" ad-drop=\"true\" ad-drop-over=\"onNextPageButtonOver($data, $dragElement, $dropElement, $event)\" ad-drop-end=\"onNextPageButtonDrop($data, $dragElement, $dropElement, $event)\" ng-click=\"loadNextPage()\" ng-disabled=\"items.paging.currentPage == items.paging.totalPages\"><i ng-class=\"iconClasses.nextPage\"></i></button> <button type=\"button\" class=\"btn btn-default\" ng-click=\"loadLastPage()\" ng-disabled=\"items.paging.currentPage == items.paging.totalPages\"><i ng-class=\"iconClasses.lastPage\"></i></button></div></div><div class=\"col-md-4 col-sm-4\"><div class=\"pull-right\" ng-class=\"attrs.paginationBtnGroupClasses || \\'btn-group btn-group-sm\\'\"><button type=\"button\" class=\"btn btn-default\" ng-repeat=\"size in items.paging.pageSizes\" ng-class=\"{active: items.paging.pageSize == size}\" ng-click=\"pageSizeChanged(size)\">{{ size }}</button></div></div></div></div><div ng-if=\"!items.allItems.length && attrs.itemsNotFoundMessage\"><div class=\"alert alert-info\" role=\"alert\">{{ attrs.itemsNotFoundMessage }}</div></div>');\n  }\n]);\n\n// Source: treebrowser.tpl.js\nangular.module('adaptv.adaptStrap.treebrowser').run([\n  '$templateCache',\n  function ($templateCache) {\n    $templateCache.put('treebrowser/treebrowser.tpl.html', '<div class=\"ad-tree-browser-container\" ng-class=\"{\\'tree-bordered\\': attrs.bordered}\"><div data-level=\"0\" class=\"tree-view\"><div class=\"tree\"><script type=\"text/ng-template\" id=\"{{ localConfig.rendererTemplateId }}\"><div class=\"content\"\\n' + '                     ng-style=\"{\\'padding-left\\': level * (attrs.childrenPadding || 15) + \\'px\\'}\"\\n' + '                     ng-class=\"{{ attrs.rowNgClass }}\">\\n' + '                    <div class=\"content-holder\">\\n' + '                        <div class=\"toggle\">\\n' + '                            <i ng-if=\"!item._ad_expanded && hasChildren(item) && !item._ad_loading\"\\n' + '                               ng-class=\"iconClasses.expand\"\\n' + '                               ng-click=\"toggle($event,item)\"></i>\\n' + '                            <i ng-if=\"item._ad_expanded && !item._ad_loading\"\\n' + '                               ng-class=\"iconClasses.collapse\"\\n' + '                               ng-click=\"toggle($event,item)\"></i>\\n' + '                            <span ng-if=\"item._ad_loading\">\\n' + '                                <i ng-class=\"iconClasses.loadingSpinner\"></i>\\n' + '                            </span>\\n' + '                        </div>\\n' + '                        <div class=\"node-content\">\\n' + '                          <ng-include ng-if=\"attrs.nodeTemplateUrl\" src=\"attrs.nodeTemplateUrl\"></ng-include>\\n' + '                          <span ng-if=\"!attrs.nodeTemplateUrl\">{{ item.name || \"\" }}</span>\\n' + '                        </div>\\n' + '                    </div>\\n' + '                </div>\\n' + '                <div ng-show=\"item._ad_expanded\">\\n' + '                    <div class=\"tree-level tree-sub-level\"\\n' + '                         onLoad=\"level=level+1\"\\n' + '                         ng-repeat=\"item in item[attrs.childNode]\"\\n' + '                         ng-include=\"\\'{{ localConfig.rendererTemplateId }}\\'\">\\n' + '                    </div>\\n' + '                </div></script><div><div class=\"tree-level tree-header-level border\" ng-if=\"attrs.nodeHeaderUrl\"><div class=\"content\" ng-style=\"{\\'padding-left\\': (attrs.childrenPadding || 15) + \\'px\\'}\"><div class=\"content-holder\"><div class=\"toggle\"></div><div class=\"node-content ad-user-select-none\" ng-include=\"attrs.nodeHeaderUrl\"></div></div></div></div><div class=\"tree-level tree-top-level border\" onload=\"level = 1\" ng-repeat=\"item in treeRoot[attrs.childNode]\" ng-include=\"\\'{{ localConfig.rendererTemplateId }}\\'\"></div></div></div></div></div>');\n  }\n]);\n\n\n})(window, document);\n","/**\n * angular-growl-v2 - v0.7.0 - 2014-08-10\n * http://janstevens.github.io/angular-growl-2\n * Copyright (c) 2014 Marco Rinck,Jan Stevens; Licensed MIT\n */\nangular.module(\"angular-growl\",[]),angular.module(\"angular-growl\").directive(\"growl\",[\"$rootScope\",\"$sce\",function(a,b){\"use strict\";return{restrict:\"A\",templateUrl:\"templates/growl/growl.html\",replace:!1,scope:{reference:\"@\",inline:\"@\",limitMessages:\"=\"},controller:[\"$scope\",\"$timeout\",\"growl\",function(c,d,e){function f(a){d(function(){var f,h;if(!g||(angular.forEach(c.messages,function(c){h=b.getTrustedHtml(c.text),a.text===h&&a.severity===c.severity&&c.title===c.title&&(f=!0)}),!f)){if(a.text=b.trustAsHtml(String(a.text)),a.ttl&&-1!==a.ttl&&(a.countdown=a.ttl/1e3,a.promises=[],a.close=!1,a.countdownFunction=function(){a.countdown>1?(a.countdown--,a.promises.push(d(a.countdownFunction,1e3))):a.countdown--}),angular.isDefined(c.limitMessages)){var i=c.messages.length-(c.limitMessages-1);i>0&&c.messages.splice(c.limitMessages-1,i)}e.reverseOrder()?c.messages.unshift(a):c.messages.push(a),a.ttl&&-1!==a.ttl&&(a.promises.push(d(function(){c.deleteMessage(a)},a.ttl)),a.promises.push(d(a.countdownFunction,1e3)))}},!0)}var g=e.onlyUnique();c.messages=[];var h=c.reference||0;c.inlineMessage=c.inline||e.inlineMessages(),a.$on(\"growlMessage\",function(a,b){parseInt(h,10)===parseInt(b.referenceId,10)&&f(b)}),c.deleteMessage=function(a){var b=c.messages.indexOf(a);b>-1&&c.messages.splice(b,1)},c.stopTimeoutClose=function(a){angular.forEach(a.promises,function(a){d.cancel(a)}),a.close?c.deleteMessage(a):a.close=!0},c.alertClasses=function(a){return{\"alert-success\":\"success\"===a.severity,\"alert-error\":\"error\"===a.severity,\"alert-danger\":\"error\"===a.severity,\"alert-info\":\"info\"===a.severity,\"alert-warning\":\"warning\"===a.severity,icon:a.disableIcons===!1,\"alert-dismissable\":!a.disableCloseButton}},c.showCountDown=function(a){return!a.disableCountDown&&a.ttl>0},c.wrapperClasses=function(){var a={};return a[\"growl-fixed\"]=!c.inlineMessage,a[e.position()]=!0,a},c.computeTitle=function(a){var b={success:\"Success\",error:\"Error\",info:\"Information\",warn:\"Warning\"};return b[a.severity]}}]}}]),angular.module(\"angular-growl\").run([\"$templateCache\",function(a){\"use strict\";void 0===a.get(\"templates/growl/growl.html\")&&a.put(\"templates/growl/growl.html\",'<div class=\"growl-container\" ng-class=\"wrapperClasses()\"><div class=\"growl-item alert\" ng-repeat=\"message in messages\" ng-class=\"alertClasses(message)\" ng-click=\"stopTimeoutClose(message)\"><button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-hidden=\"true\" ng-click=\"deleteMessage(message)\" ng-show=\"!message.disableCloseButton\">&times;</button><button type=\"button\" class=\"close\" aria-hidden=\"true\" ng-show=\"showCountDown(message)\">{{message.countdown}}</button><h4 class=\"growl-title\" ng-show=\"message.title\" ng-bind=\"message.title\"></h4><div class=\"growl-message\" ng-bind-html=\"message.text\"></div></div></div>')}]),angular.module(\"angular-growl\").provider(\"growl\",function(){\"use strict\";var a={success:null,error:null,warning:null,info:null},b=\"messages\",c=\"text\",d=\"title\",e=\"severity\",f=!0,g=\"variables\",h=0,i=!1,j=\"top-right\",k=!1,l=!1,m=!1,n=!1;this.globalTimeToLive=function(b){if(\"object\"==typeof b)for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c]);else for(var d in a)a.hasOwnProperty(d)&&(a[d]=b)},this.globalDisableCloseButton=function(a){k=a},this.globalDisableIcons=function(a){l=a},this.globalReversedOrder=function(a){m=a},this.globalDisableCountDown=function(a){n=a},this.messageVariableKey=function(a){g=a},this.globalInlineMessages=function(a){i=a},this.globalPosition=function(a){j=a},this.messagesKey=function(a){b=a},this.messageTextKey=function(a){c=a},this.messageTitleKey=function(a){d=a},this.messageSeverityKey=function(a){e=a},this.onlyUniqueMessages=function(a){f=a},this.serverMessagesInterceptor=[\"$q\",\"growl\",function(a,c){function d(a){a.data[b]&&a.data[b].length>0&&c.addServerMessages(a.data[b])}return{response:function(a){return d(a),a},responseError:function(b){return d(b),a.reject(b)}}}],this.$get=[\"$rootScope\",\"$interpolate\",\"$filter\",function(b,o,p){function q(a){if(B)a.text=B(a.text,a.variables);else{var c=o(a.text);a.text=c(a.variables)}b.$broadcast(\"growlMessage\",a)}function r(b,c,d){var e,f=c||{};e={text:b,title:f.title,severity:d,ttl:f.ttl||a[d],variables:f.variables||{},disableCloseButton:void 0===f.disableCloseButton?k:f.disableCloseButton,disableIcons:void 0===f.disableIcons?l:f.disableIcons,disableCountDown:void 0===f.disableCountDown?n:f.disableCountDown,position:f.position||j,referenceId:f.referenceId||h},q(e)}function s(a,b){r(a,b,\"warning\")}function t(a,b){r(a,b,\"error\")}function u(a,b){r(a,b,\"info\")}function v(a,b){r(a,b,\"success\")}function w(a){var b,f,h,i;for(i=a.length,b=0;i>b;b++)if(f=a[b],f[c]){h=f[e]||\"error\";var j={};j.variables=f[g]||{},j.title=f[d],r(f[c],j,h)}}function x(){return f}function y(){return m}function z(){return i}function A(){return j}var B;try{B=p(\"translate\")}catch(C){}return{warning:s,error:t,info:u,success:v,addServerMessages:w,onlyUnique:x,reverseOrder:y,inlineMessages:z,position:A}}]});","/**\n * @license AngularJS v1.3.1\n * (c) 2010-2014 Google, Inc. http://angularjs.org\n * License: MIT\n */\n(function(window, angular, undefined) {'use strict';\n\nvar $sanitizeMinErr = angular.$$minErr('$sanitize');\n\n/**\n * @ngdoc module\n * @name ngSanitize\n * @description\n *\n * # ngSanitize\n *\n * The `ngSanitize` module provides functionality to sanitize HTML.\n *\n *\n * <div doc-module-components=\"ngSanitize\"></div>\n *\n * See {@link ngSanitize.$sanitize `$sanitize`} for usage.\n */\n\n/*\n * HTML Parser By Misko Hevery (misko@hevery.com)\n * based on:  HTML Parser By John Resig (ejohn.org)\n * Original code by Erik Arvidsson, Mozilla Public License\n * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js\n *\n * // Use like so:\n * htmlParser(htmlString, {\n *     start: function(tag, attrs, unary) {},\n *     end: function(tag) {},\n *     chars: function(text) {},\n *     comment: function(text) {}\n * });\n *\n */\n\n\n/**\n * @ngdoc service\n * @name $sanitize\n * @kind function\n *\n * @description\n *   The input is sanitized by parsing the HTML into tokens. All safe tokens (from a whitelist) are\n *   then serialized back to properly escaped html string. This means that no unsafe input can make\n *   it into the returned string, however, since our parser is more strict than a typical browser\n *   parser, it's possible that some obscure input, which would be recognized as valid HTML by a\n *   browser, won't make it through the sanitizer. The input may also contain SVG markup.\n *   The whitelist is configured using the functions `aHrefSanitizationWhitelist` and\n *   `imgSrcSanitizationWhitelist` of {@link ng.$compileProvider `$compileProvider`}.\n *\n * @param {string} html HTML input.\n * @returns {string} Sanitized HTML.\n *\n * @example\n   <example module=\"sanitizeExample\" deps=\"angular-sanitize.js\">\n   <file name=\"index.html\">\n     <script>\n         angular.module('sanitizeExample', ['ngSanitize'])\n           .controller('ExampleController', ['$scope', '$sce', function($scope, $sce) {\n             $scope.snippet =\n               '<p style=\"color:blue\">an html\\n' +\n               '<em onmouseover=\"this.textContent=\\'PWN3D!\\'\">click here</em>\\n' +\n               'snippet</p>';\n             $scope.deliberatelyTrustDangerousSnippet = function() {\n               return $sce.trustAsHtml($scope.snippet);\n             };\n           }]);\n     </script>\n     <div ng-controller=\"ExampleController\">\n        Snippet: <textarea ng-model=\"snippet\" cols=\"60\" rows=\"3\"></textarea>\n       <table>\n         <tr>\n           <td>Directive</td>\n           <td>How</td>\n           <td>Source</td>\n           <td>Rendered</td>\n         </tr>\n         <tr id=\"bind-html-with-sanitize\">\n           <td>ng-bind-html</td>\n           <td>Automatically uses $sanitize</td>\n           <td><pre>&lt;div ng-bind-html=\"snippet\"&gt;<br/>&lt;/div&gt;</pre></td>\n           <td><div ng-bind-html=\"snippet\"></div></td>\n         </tr>\n         <tr id=\"bind-html-with-trust\">\n           <td>ng-bind-html</td>\n           <td>Bypass $sanitize by explicitly trusting the dangerous value</td>\n           <td>\n           <pre>&lt;div ng-bind-html=\"deliberatelyTrustDangerousSnippet()\"&gt;\n&lt;/div&gt;</pre>\n           </td>\n           <td><div ng-bind-html=\"deliberatelyTrustDangerousSnippet()\"></div></td>\n         </tr>\n         <tr id=\"bind-default\">\n           <td>ng-bind</td>\n           <td>Automatically escapes</td>\n           <td><pre>&lt;div ng-bind=\"snippet\"&gt;<br/>&lt;/div&gt;</pre></td>\n           <td><div ng-bind=\"snippet\"></div></td>\n         </tr>\n       </table>\n       </div>\n   </file>\n   <file name=\"protractor.js\" type=\"protractor\">\n     it('should sanitize the html snippet by default', function() {\n       expect(element(by.css('#bind-html-with-sanitize div')).getInnerHtml()).\n         toBe('<p>an html\\n<em>click here</em>\\nsnippet</p>');\n     });\n\n     it('should inline raw snippet if bound to a trusted value', function() {\n       expect(element(by.css('#bind-html-with-trust div')).getInnerHtml()).\n         toBe(\"<p style=\\\"color:blue\\\">an html\\n\" +\n              \"<em onmouseover=\\\"this.textContent='PWN3D!'\\\">click here</em>\\n\" +\n              \"snippet</p>\");\n     });\n\n     it('should escape snippet without any filter', function() {\n       expect(element(by.css('#bind-default div')).getInnerHtml()).\n         toBe(\"&lt;p style=\\\"color:blue\\\"&gt;an html\\n\" +\n              \"&lt;em onmouseover=\\\"this.textContent='PWN3D!'\\\"&gt;click here&lt;/em&gt;\\n\" +\n              \"snippet&lt;/p&gt;\");\n     });\n\n     it('should update', function() {\n       element(by.model('snippet')).clear();\n       element(by.model('snippet')).sendKeys('new <b onclick=\"alert(1)\">text</b>');\n       expect(element(by.css('#bind-html-with-sanitize div')).getInnerHtml()).\n         toBe('new <b>text</b>');\n       expect(element(by.css('#bind-html-with-trust div')).getInnerHtml()).toBe(\n         'new <b onclick=\"alert(1)\">text</b>');\n       expect(element(by.css('#bind-default div')).getInnerHtml()).toBe(\n         \"new &lt;b onclick=\\\"alert(1)\\\"&gt;text&lt;/b&gt;\");\n     });\n   </file>\n   </example>\n */\nfunction $SanitizeProvider() {\n  this.$get = ['$$sanitizeUri', function($$sanitizeUri) {\n    return function(html) {\n      var buf = [];\n      htmlParser(html, htmlSanitizeWriter(buf, function(uri, isImage) {\n        return !/^unsafe/.test($$sanitizeUri(uri, isImage));\n      }));\n      return buf.join('');\n    };\n  }];\n}\n\nfunction sanitizeText(chars) {\n  var buf = [];\n  var writer = htmlSanitizeWriter(buf, angular.noop);\n  writer.chars(chars);\n  return buf.join('');\n}\n\n\n// Regular Expressions for parsing tags and attributes\nvar START_TAG_REGEXP =\n       /^<((?:[a-zA-Z])[\\w:-]*)((?:\\s+[\\w:-]+(?:\\s*=\\s*(?:(?:\"[^\"]*\")|(?:'[^']*')|[^>\\s]+))?)*)\\s*(\\/?)\\s*(>?)/,\n  END_TAG_REGEXP = /^<\\/\\s*([\\w:-]+)[^>]*>/,\n  ATTR_REGEXP = /([\\w:-]+)(?:\\s*=\\s*(?:(?:\"((?:[^\"])*)\")|(?:'((?:[^'])*)')|([^>\\s]+)))?/g,\n  BEGIN_TAG_REGEXP = /^</,\n  BEGING_END_TAGE_REGEXP = /^<\\//,\n  COMMENT_REGEXP = /<!--(.*?)-->/g,\n  DOCTYPE_REGEXP = /<!DOCTYPE([^>]*?)>/i,\n  CDATA_REGEXP = /<!\\[CDATA\\[(.*?)]]>/g,\n  SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g,\n  // Match everything outside of normal chars and \" (quote character)\n  NON_ALPHANUMERIC_REGEXP = /([^\\#-~| |!])/g;\n\n\n// Good source of info about elements and attributes\n// http://dev.w3.org/html5/spec/Overview.html#semantics\n// http://simon.html5.org/html-elements\n\n// Safe Void Elements - HTML5\n// http://dev.w3.org/html5/spec/Overview.html#void-elements\nvar voidElements = makeMap(\"area,br,col,hr,img,wbr\");\n\n// Elements that you can, intentionally, leave open (and which close themselves)\n// http://dev.w3.org/html5/spec/Overview.html#optional-tags\nvar optionalEndTagBlockElements = makeMap(\"colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr\"),\n    optionalEndTagInlineElements = makeMap(\"rp,rt\"),\n    optionalEndTagElements = angular.extend({},\n                                            optionalEndTagInlineElements,\n                                            optionalEndTagBlockElements);\n\n// Safe Block Elements - HTML5\nvar blockElements = angular.extend({}, optionalEndTagBlockElements, makeMap(\"address,article,\" +\n        \"aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,\" +\n        \"h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,script,section,table,ul\"));\n\n// Inline Elements - HTML5\nvar inlineElements = angular.extend({}, optionalEndTagInlineElements, makeMap(\"a,abbr,acronym,b,\" +\n        \"bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s,\" +\n        \"samp,small,span,strike,strong,sub,sup,time,tt,u,var\"));\n\n// SVG Elements\n// https://wiki.whatwg.org/wiki/Sanitization_rules#svg_Elements\nvar svgElements = makeMap(\"animate,animateColor,animateMotion,animateTransform,circle,defs,\" +\n        \"desc,ellipse,font-face,font-face-name,font-face-src,g,glyph,hkern,image,linearGradient,\" +\n        \"line,marker,metadata,missing-glyph,mpath,path,polygon,polyline,radialGradient,rect,set,\" +\n        \"stop,svg,switch,text,title,tspan,use\");\n\n// Special Elements (can contain anything)\nvar specialElements = makeMap(\"script,style\");\n\nvar validElements = angular.extend({},\n                                   voidElements,\n                                   blockElements,\n                                   inlineElements,\n                                   optionalEndTagElements,\n                                   svgElements);\n\n//Attributes that have href and hence need to be sanitized\nvar uriAttrs = makeMap(\"background,cite,href,longdesc,src,usemap,xlink:href\");\n\nvar htmlAttrs = makeMap('abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,'+\n    'color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,'+\n    'ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,'+\n    'scope,scrolling,shape,size,span,start,summary,target,title,type,'+\n    'valign,value,vspace,width');\n\n// SVG attributes (without \"id\" and \"name\" attributes)\n// https://wiki.whatwg.org/wiki/Sanitization_rules#svg_Attributes\nvar svgAttrs = makeMap('accent-height,accumulate,additive,alphabetic,arabic-form,ascent,'+\n    'attributeName,attributeType,baseProfile,bbox,begin,by,calcMode,cap-height,class,color,'+\n    'color-rendering,content,cx,cy,d,dx,dy,descent,display,dur,end,fill,fill-rule,font-family,'+\n    'font-size,font-stretch,font-style,font-variant,font-weight,from,fx,fy,g1,g2,glyph-name,'+\n    'gradientUnits,hanging,height,horiz-adv-x,horiz-origin-x,ideographic,k,keyPoints,'+\n    'keySplines,keyTimes,lang,marker-end,marker-mid,marker-start,markerHeight,markerUnits,'+\n    'markerWidth,mathematical,max,min,offset,opacity,orient,origin,overline-position,'+\n    'overline-thickness,panose-1,path,pathLength,points,preserveAspectRatio,r,refX,refY,'+\n    'repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,rotate,rx,ry,slope,stemh,'+\n    'stemv,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,stroke,'+\n    'stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,'+\n    'stroke-opacity,stroke-width,systemLanguage,target,text-anchor,to,transform,type,u1,u2,'+\n    'underline-position,underline-thickness,unicode,unicode-range,units-per-em,values,version,'+\n    'viewBox,visibility,width,widths,x,x-height,x1,x2,xlink:actuate,xlink:arcrole,xlink:role,'+\n    'xlink:show,xlink:title,xlink:type,xml:base,xml:lang,xml:space,xmlns,xmlns:xlink,y,y1,y2,'+\n    'zoomAndPan');\n\nvar validAttrs = angular.extend({},\n                                uriAttrs,\n                                svgAttrs,\n                                htmlAttrs);\n\nfunction makeMap(str) {\n  var obj = {}, items = str.split(','), i;\n  for (i = 0; i < items.length; i++) obj[items[i]] = true;\n  return obj;\n}\n\n\n/**\n * @example\n * htmlParser(htmlString, {\n *     start: function(tag, attrs, unary) {},\n *     end: function(tag) {},\n *     chars: function(text) {},\n *     comment: function(text) {}\n * });\n *\n * @param {string} html string\n * @param {object} handler\n */\nfunction htmlParser(html, handler) {\n  if (typeof html !== 'string') {\n    if (html === null || typeof html === 'undefined') {\n      html = '';\n    } else {\n      html = '' + html;\n    }\n  }\n  var index, chars, match, stack = [], last = html, text;\n  stack.last = function() { return stack[ stack.length - 1 ]; };\n\n  while (html) {\n    text = '';\n    chars = true;\n\n    // Make sure we're not in a script or style element\n    if (!stack.last() || !specialElements[ stack.last() ]) {\n\n      // Comment\n      if (html.indexOf(\"<!--\") === 0) {\n        // comments containing -- are not allowed unless they terminate the comment\n        index = html.indexOf(\"--\", 4);\n\n        if (index >= 0 && html.lastIndexOf(\"-->\", index) === index) {\n          if (handler.comment) handler.comment(html.substring(4, index));\n          html = html.substring(index + 3);\n          chars = false;\n        }\n      // DOCTYPE\n      } else if (DOCTYPE_REGEXP.test(html)) {\n        match = html.match(DOCTYPE_REGEXP);\n\n        if (match) {\n          html = html.replace(match[0], '');\n          chars = false;\n        }\n      // end tag\n      } else if (BEGING_END_TAGE_REGEXP.test(html)) {\n        match = html.match(END_TAG_REGEXP);\n\n        if (match) {\n          html = html.substring(match[0].length);\n          match[0].replace(END_TAG_REGEXP, parseEndTag);\n          chars = false;\n        }\n\n      // start tag\n      } else if (BEGIN_TAG_REGEXP.test(html)) {\n        match = html.match(START_TAG_REGEXP);\n\n        if (match) {\n          // We only have a valid start-tag if there is a '>'.\n          if (match[4]) {\n            html = html.substring(match[0].length);\n            match[0].replace(START_TAG_REGEXP, parseStartTag);\n          }\n          chars = false;\n        } else {\n          // no ending tag found --- this piece should be encoded as an entity.\n          text += '<';\n          html = html.substring(1);\n        }\n      }\n\n      if (chars) {\n        index = html.indexOf(\"<\");\n\n        text += index < 0 ? html : html.substring(0, index);\n        html = index < 0 ? \"\" : html.substring(index);\n\n        if (handler.chars) handler.chars(decodeEntities(text));\n      }\n\n    } else {\n      html = html.replace(new RegExp(\"(.*)<\\\\s*\\\\/\\\\s*\" + stack.last() + \"[^>]*>\", 'i'),\n        function(all, text) {\n          text = text.replace(COMMENT_REGEXP, \"$1\").replace(CDATA_REGEXP, \"$1\");\n\n          if (handler.chars) handler.chars(decodeEntities(text));\n\n          return \"\";\n      });\n\n      parseEndTag(\"\", stack.last());\n    }\n\n    if (html == last) {\n      throw $sanitizeMinErr('badparse', \"The sanitizer was unable to parse the following block \" +\n                                        \"of html: {0}\", html);\n    }\n    last = html;\n  }\n\n  // Clean up any remaining tags\n  parseEndTag();\n\n  function parseStartTag(tag, tagName, rest, unary) {\n    tagName = angular.lowercase(tagName);\n    if (blockElements[ tagName ]) {\n      while (stack.last() && inlineElements[ stack.last() ]) {\n        parseEndTag(\"\", stack.last());\n      }\n    }\n\n    if (optionalEndTagElements[ tagName ] && stack.last() == tagName) {\n      parseEndTag(\"\", tagName);\n    }\n\n    unary = voidElements[ tagName ] || !!unary;\n\n    if (!unary)\n      stack.push(tagName);\n\n    var attrs = {};\n\n    rest.replace(ATTR_REGEXP,\n      function(match, name, doubleQuotedValue, singleQuotedValue, unquotedValue) {\n        var value = doubleQuotedValue\n          || singleQuotedValue\n          || unquotedValue\n          || '';\n\n        attrs[name] = decodeEntities(value);\n    });\n    if (handler.start) handler.start(tagName, attrs, unary);\n  }\n\n  function parseEndTag(tag, tagName) {\n    var pos = 0, i;\n    tagName = angular.lowercase(tagName);\n    if (tagName)\n      // Find the closest opened tag of the same type\n      for (pos = stack.length - 1; pos >= 0; pos--)\n        if (stack[ pos ] == tagName)\n          break;\n\n    if (pos >= 0) {\n      // Close all the open elements, up the stack\n      for (i = stack.length - 1; i >= pos; i--)\n        if (handler.end) handler.end(stack[ i ]);\n\n      // Remove the open elements from the stack\n      stack.length = pos;\n    }\n  }\n}\n\nvar hiddenPre=document.createElement(\"pre\");\nvar spaceRe = /^(\\s*)([\\s\\S]*?)(\\s*)$/;\n/**\n * decodes all entities into regular string\n * @param value\n * @returns {string} A string with decoded entities.\n */\nfunction decodeEntities(value) {\n  if (!value) { return ''; }\n\n  // Note: IE8 does not preserve spaces at the start/end of innerHTML\n  // so we must capture them and reattach them afterward\n  var parts = spaceRe.exec(value);\n  var spaceBefore = parts[1];\n  var spaceAfter = parts[3];\n  var content = parts[2];\n  if (content) {\n    hiddenPre.innerHTML=content.replace(/</g,\"&lt;\");\n    // innerText depends on styling as it doesn't display hidden elements.\n    // Therefore, it's better to use textContent not to cause unnecessary\n    // reflows. However, IE<9 don't support textContent so the innerText\n    // fallback is necessary.\n    content = 'textContent' in hiddenPre ?\n      hiddenPre.textContent : hiddenPre.innerText;\n  }\n  return spaceBefore + content + spaceAfter;\n}\n\n/**\n * Escapes all potentially dangerous characters, so that the\n * resulting string can be safely inserted into attribute or\n * element text.\n * @param value\n * @returns {string} escaped text\n */\nfunction encodeEntities(value) {\n  return value.\n    replace(/&/g, '&amp;').\n    replace(SURROGATE_PAIR_REGEXP, function(value) {\n      var hi = value.charCodeAt(0);\n      var low = value.charCodeAt(1);\n      return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';\n    }).\n    replace(NON_ALPHANUMERIC_REGEXP, function(value) {\n      return '&#' + value.charCodeAt(0) + ';';\n    }).\n    replace(/</g, '&lt;').\n    replace(/>/g, '&gt;');\n}\n\n/**\n * create an HTML/XML writer which writes to buffer\n * @param {Array} buf use buf.jain('') to get out sanitized html string\n * @returns {object} in the form of {\n *     start: function(tag, attrs, unary) {},\n *     end: function(tag) {},\n *     chars: function(text) {},\n *     comment: function(text) {}\n * }\n */\nfunction htmlSanitizeWriter(buf, uriValidator) {\n  var ignore = false;\n  var out = angular.bind(buf, buf.push);\n  return {\n    start: function(tag, attrs, unary) {\n      tag = angular.lowercase(tag);\n      if (!ignore && specialElements[tag]) {\n        ignore = tag;\n      }\n      if (!ignore && validElements[tag] === true) {\n        out('<');\n        out(tag);\n        angular.forEach(attrs, function(value, key) {\n          var lkey=angular.lowercase(key);\n          var isImage = (tag === 'img' && lkey === 'src') || (lkey === 'background');\n          if (validAttrs[lkey] === true &&\n            (uriAttrs[lkey] !== true || uriValidator(value, isImage))) {\n            out(' ');\n            out(key);\n            out('=\"');\n            out(encodeEntities(value));\n            out('\"');\n          }\n        });\n        out(unary ? '/>' : '>');\n      }\n    },\n    end: function(tag) {\n        tag = angular.lowercase(tag);\n        if (!ignore && validElements[tag] === true) {\n          out('</');\n          out(tag);\n          out('>');\n        }\n        if (tag == ignore) {\n          ignore = false;\n        }\n      },\n    chars: function(chars) {\n        if (!ignore) {\n          out(encodeEntities(chars));\n        }\n      }\n  };\n}\n\n\n// define ngSanitize module and register $sanitize service\nangular.module('ngSanitize', []).provider('$sanitize', $SanitizeProvider);\n\n/* global sanitizeText: false */\n\n/**\n * @ngdoc filter\n * @name linky\n * @kind function\n *\n * @description\n * Finds links in text input and turns them into html links. Supports http/https/ftp/mailto and\n * plain email address links.\n *\n * Requires the {@link ngSanitize `ngSanitize`} module to be installed.\n *\n * @param {string} text Input text.\n * @param {string} target Window (_blank|_self|_parent|_top) or named frame to open links in.\n * @returns {string} Html-linkified text.\n *\n * @usage\n   <span ng-bind-html=\"linky_expression | linky\"></span>\n *\n * @example\n   <example module=\"linkyExample\" deps=\"angular-sanitize.js\">\n     <file name=\"index.html\">\n       <script>\n         angular.module('linkyExample', ['ngSanitize'])\n           .controller('ExampleController', ['$scope', function($scope) {\n             $scope.snippet =\n               'Pretty text with some links:\\n'+\n               'http://angularjs.org/,\\n'+\n               'mailto:us@somewhere.org,\\n'+\n               'another@somewhere.org,\\n'+\n               'and one more: ftp://127.0.0.1/.';\n             $scope.snippetWithTarget = 'http://angularjs.org/';\n           }]);\n       </script>\n       <div ng-controller=\"ExampleController\">\n       Snippet: <textarea ng-model=\"snippet\" cols=\"60\" rows=\"3\"></textarea>\n       <table>\n         <tr>\n           <td>Filter</td>\n           <td>Source</td>\n           <td>Rendered</td>\n         </tr>\n         <tr id=\"linky-filter\">\n           <td>linky filter</td>\n           <td>\n             <pre>&lt;div ng-bind-html=\"snippet | linky\"&gt;<br>&lt;/div&gt;</pre>\n           </td>\n           <td>\n             <div ng-bind-html=\"snippet | linky\"></div>\n           </td>\n         </tr>\n         <tr id=\"linky-target\">\n          <td>linky target</td>\n          <td>\n            <pre>&lt;div ng-bind-html=\"snippetWithTarget | linky:'_blank'\"&gt;<br>&lt;/div&gt;</pre>\n          </td>\n          <td>\n            <div ng-bind-html=\"snippetWithTarget | linky:'_blank'\"></div>\n          </td>\n         </tr>\n         <tr id=\"escaped-html\">\n           <td>no filter</td>\n           <td><pre>&lt;div ng-bind=\"snippet\"&gt;<br>&lt;/div&gt;</pre></td>\n           <td><div ng-bind=\"snippet\"></div></td>\n         </tr>\n       </table>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should linkify the snippet with urls', function() {\n         expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).\n             toBe('Pretty text with some links: http://angularjs.org/, us@somewhere.org, ' +\n                  'another@somewhere.org, and one more: ftp://127.0.0.1/.');\n         expect(element.all(by.css('#linky-filter a')).count()).toEqual(4);\n       });\n\n       it('should not linkify snippet without the linky filter', function() {\n         expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText()).\n             toBe('Pretty text with some links: http://angularjs.org/, mailto:us@somewhere.org, ' +\n                  'another@somewhere.org, and one more: ftp://127.0.0.1/.');\n         expect(element.all(by.css('#escaped-html a')).count()).toEqual(0);\n       });\n\n       it('should update', function() {\n         element(by.model('snippet')).clear();\n         element(by.model('snippet')).sendKeys('new http://link.');\n         expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).\n             toBe('new http://link.');\n         expect(element.all(by.css('#linky-filter a')).count()).toEqual(1);\n         expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText())\n             .toBe('new http://link.');\n       });\n\n       it('should work with the target property', function() {\n        expect(element(by.id('linky-target')).\n            element(by.binding(\"snippetWithTarget | linky:'_blank'\")).getText()).\n            toBe('http://angularjs.org/');\n        expect(element(by.css('#linky-target a')).getAttribute('target')).toEqual('_blank');\n       });\n     </file>\n   </example>\n */\nangular.module('ngSanitize').filter('linky', ['$sanitize', function($sanitize) {\n  var LINKY_URL_REGEXP =\n        /((ftp|https?):\\/\\/|(mailto:)?[A-Za-z0-9._%+-]+@)\\S*[^\\s.;,(){}<>\"]/,\n      MAILTO_REGEXP = /^mailto:/;\n\n  return function(text, target) {\n    if (!text) return text;\n    var match;\n    var raw = text;\n    var html = [];\n    var url;\n    var i;\n    while ((match = raw.match(LINKY_URL_REGEXP))) {\n      // We can not end in these as they are sometimes found at the end of the sentence\n      url = match[0];\n      // if we did not match ftp/http/mailto then assume mailto\n      if (match[2] == match[3]) url = 'mailto:' + url;\n      i = match.index;\n      addText(raw.substr(0, i));\n      addLink(url, match[0].replace(MAILTO_REGEXP, ''));\n      raw = raw.substring(i + match[0].length);\n    }\n    addText(raw);\n    return $sanitize(html.join(''));\n\n    function addText(text) {\n      if (!text) {\n        return;\n      }\n      html.push(sanitizeText(text));\n    }\n\n    function addLink(url, text) {\n      html.push('<a ');\n      if (angular.isDefined(target)) {\n        html.push('target=\"');\n        html.push(target);\n        html.push('\" ');\n      }\n      html.push('href=\"');\n      html.push(url);\n      html.push('\">');\n      addText(text);\n      html.push('</a>');\n    }\n  };\n}]);\n\n\n})(window, window.angular);\n","/**!\n * AngularJS file upload shim for HTML5 FormData\n * @author  Danial  <danial.farid@gmail.com>\n * @version 1.6.12\n */\n(function() {\n\nvar hasFlash = function() {\n\ttry {\n\t  var fo = new ActiveXObject('ShockwaveFlash.ShockwaveFlash');\n\t  if (fo) return true;\n\t} catch(e) {\n\t  if (navigator.mimeTypes['application/x-shockwave-flash'] != undefined) return true;\n\t}\n\treturn false;\n}\n\nvar patchXHR = function(fnName, newFn) {\n\twindow.XMLHttpRequest.prototype[fnName] = newFn(window.XMLHttpRequest.prototype[fnName]);\n};\n\nif (window.XMLHttpRequest) {\n\tif (window.FormData && (!window.FileAPI || !FileAPI.forceLoad)) {\n\t\t// allow access to Angular XHR private field: https://github.com/angular/angular.js/issues/1934\n\t\tpatchXHR('setRequestHeader', function(orig) {\n\t\t\treturn function(header, value) {\n\t\t\t\tif (header === '__setXHR_') {\n\t\t\t\t\tvar val = value(this);\n\t\t\t\t\t// fix for angular < 1.2.0\n\t\t\t\t\tif (val instanceof Function) {\n\t\t\t\t\t\tval(this);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\torig.apply(this, arguments);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t} else {\n\t\tvar initializeUploadListener = function(xhr) {\n\t\t\tif (!xhr.__listeners) {\n\t\t\t\tif (!xhr.upload) xhr.upload = {};\n\t\t\t\txhr.__listeners = [];\n\t\t\t\tvar origAddEventListener = xhr.upload.addEventListener;\n\t\t\t\txhr.upload.addEventListener = function(t, fn, b) {\n\t\t\t\t\txhr.__listeners[t] = fn;\n\t\t\t\t\torigAddEventListener && origAddEventListener.apply(this, arguments);\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\t\n\t\tpatchXHR('open', function(orig) {\n\t\t\treturn function(m, url, b) {\n\t\t\t\tinitializeUploadListener(this);\n\t\t\t\tthis.__url = url;\n\t\t\t\ttry {\n\t\t\t\t\torig.apply(this, [m, url, b]);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (e.message.indexOf('Access is denied') > -1) {\n\t\t\t\t\t\torig.apply(this, [m, '_fix_for_ie_crossdomain__', b]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tpatchXHR('getResponseHeader', function(orig) {\n\t\t\treturn function(h) {\n\t\t\t\treturn this.__fileApiXHR && this.__fileApiXHR.getResponseHeader ? this.__fileApiXHR.getResponseHeader(h) : (orig == null ? null : orig.apply(this, [h]));\n\t\t\t};\n\t\t});\n\n\t\tpatchXHR('getAllResponseHeaders', function(orig) {\n\t\t\treturn function() {\n\t\t\t\treturn this.__fileApiXHR && this.__fileApiXHR.getAllResponseHeaders ? this.__fileApiXHR.getAllResponseHeaders() : (orig == null ? null : orig.apply(this));\n\t\t\t}\n\t\t});\n\n\t\tpatchXHR('abort', function(orig) {\n\t\t\treturn function() {\n\t\t\t\treturn this.__fileApiXHR && this.__fileApiXHR.abort ? this.__fileApiXHR.abort() : (orig == null ? null : orig.apply(this));\n\t\t\t}\n\t\t});\n\n\t\tpatchXHR('setRequestHeader', function(orig) {\n\t\t\treturn function(header, value) {\n\t\t\t\tif (header === '__setXHR_') {\n\t\t\t\t\tinitializeUploadListener(this);\n\t\t\t\t\tvar val = value(this);\n\t\t\t\t\t// fix for angular < 1.2.0\n\t\t\t\t\tif (val instanceof Function) {\n\t\t\t\t\t\tval(this);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.__requestHeaders = this.__requestHeaders || {};\n\t\t\t\t\tthis.__requestHeaders[header] = value;\n\t\t\t\t\torig.apply(this, arguments);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tpatchXHR('send', function(orig) {\n\t\t\treturn function() {\n\t\t\t\tvar xhr = this;\n\t\t\t\tif (arguments[0] && arguments[0].__isShim) {\n\t\t\t\t\tvar formData = arguments[0];\n\t\t\t\t\tvar config = {\n\t\t\t\t\t\turl: xhr.__url,\n\t\t\t\t\t\tjsonp: false, //removes the callback form param\n\t\t\t\t\t\tcache: true, //removes the ?fileapiXXX in the url\n\t\t\t\t\t\tcomplete: function(err, fileApiXHR) {\n\t\t\t\t\t\t\txhr.__completed = true;\n\t\t\t\t\t\t\tif (!err && xhr.__listeners['load']) \n\t\t\t\t\t\t\t\txhr.__listeners['load']({type: 'load', loaded: xhr.__loaded, total: xhr.__total, target: xhr, lengthComputable: true});\n\t\t\t\t\t\t\tif (!err && xhr.__listeners['loadend']) \n\t\t\t\t\t\t\t\txhr.__listeners['loadend']({type: 'loadend', loaded: xhr.__loaded, total: xhr.__total, target: xhr, lengthComputable: true});\n\t\t\t\t\t\t\tif (err === 'abort' && xhr.__listeners['abort']) \n\t\t\t\t\t\t\t\txhr.__listeners['abort']({type: 'abort', loaded: xhr.__loaded, total: xhr.__total, target: xhr, lengthComputable: true});\n\t\t\t\t\t\t\tif (fileApiXHR.status !== undefined) Object.defineProperty(xhr, 'status', {get: function() {return (fileApiXHR.status == 0 && err && err !== 'abort') ? 500 : fileApiXHR.status}});\n\t\t\t\t\t\t\tif (fileApiXHR.statusText !== undefined) Object.defineProperty(xhr, 'statusText', {get: function() {return fileApiXHR.statusText}});\n\t\t\t\t\t\t\tObject.defineProperty(xhr, 'readyState', {get: function() {return 4}});\n\t\t\t\t\t\t\tif (fileApiXHR.response !== undefined) Object.defineProperty(xhr, 'response', {get: function() {return fileApiXHR.response}});\n\t\t\t\t\t\t\tvar resp = fileApiXHR.responseText || (err && fileApiXHR.status == 0 && err !== 'abort' ? err : undefined);\n\t\t\t\t\t\t\tObject.defineProperty(xhr, 'responseText', {get: function() {return resp}});\n\t\t\t\t\t\t\tObject.defineProperty(xhr, 'response', {get: function() {return resp}});\n\t\t\t\t\t\t\tif (err) Object.defineProperty(xhr, 'err', {get: function() {return err}});\n\t\t\t\t\t\t\txhr.__fileApiXHR = fileApiXHR;\n\t\t\t\t\t\t\tif (xhr.onreadystatechange) xhr.onreadystatechange();\n\t\t\t\t\t\t},\n\t\t\t\t\t\tfileprogress: function(e) {\n\t\t\t\t\t\t\te.target = xhr;\n\t\t\t\t\t\t\txhr.__listeners['progress'] && xhr.__listeners['progress'](e);\n\t\t\t\t\t\t\txhr.__total = e.total;\n\t\t\t\t\t\t\txhr.__loaded = e.loaded;\n\t\t\t\t\t\t\tif (e.total === e.loaded) {\n\t\t\t\t\t\t\t\t// fix flash issue that doesn't call complete if there is no response text from the server  \n\t\t\t\t\t\t\t\tvar _this = this\n\t\t\t\t\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t\t\t\t\tif (!xhr.__completed) {\n\t\t\t\t\t\t\t\t\t\txhr.getAllResponseHeaders = function(){};\n\t\t\t\t\t\t\t\t\t\t_this.complete(null, {status: 204, statusText: 'No Content'});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}, 10000);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\theaders: xhr.__requestHeaders\n\t\t\t\t\t}\n\t\t\t\t\tconfig.data = {};\n\t\t\t\t\tconfig.files = {}\n\t\t\t\t\tfor (var i = 0; i < formData.data.length; i++) {\n\t\t\t\t\t\tvar item = formData.data[i];\n\t\t\t\t\t\tif (item.val != null && item.val.name != null && item.val.size != null && item.val.type != null) {\n\t\t\t\t\t\t\tconfig.files[item.key] = item.val;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconfig.data[item.key] = item.val;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t\tif (!hasFlash()) {\n\t\t\t\t\t\t\tthrow 'Adode Flash Player need to be installed. To check ahead use \"FileAPI.hasFlash\"';\n\t\t\t\t\t\t}\n\t\t\t\t\t\txhr.__fileApiXHR = FileAPI.upload(config);\n\t\t\t\t\t}, 1);\n\t\t\t\t} else {\n\t\t\t\t\torig.apply(xhr, arguments);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\twindow.XMLHttpRequest.__isShim = true;\n}\n\nif (!window.FormData || (window.FileAPI && FileAPI.forceLoad)) {\n\tvar addFlash = function(elem) {\n\t\tif (!hasFlash()) {\n\t\t\tthrow 'Adode Flash Player need to be installed. To check ahead use \"FileAPI.hasFlash\"';\n\t\t}\n\t\tvar el = angular.element(elem);\n\t\tif (!el.attr('disabled')) {\n\t\t\tif (!el.hasClass('js-fileapi-wrapper') && (elem.getAttribute('ng-file-select') != null || elem.getAttribute('data-ng-file-select') != null)) {\n\t\t\t\tif (FileAPI.wrapInsideDiv) {\n\t\t\t\t\tvar wrap = document.createElement('div');\n\t\t\t\t\twrap.innerHTML = '<div class=\"js-fileapi-wrapper\" style=\"position:relative; overflow:hidden\"></div>';\n\t\t\t\t\twrap = wrap.firstChild;\n\t\t\t\t\tvar parent = elem.parentNode;\n\t\t\t\t\tparent.insertBefore(wrap, elem);\n\t\t\t\t\tparent.removeChild(elem);\n\t\t\t\t\twrap.appendChild(elem);\n\t\t\t\t} else {\n\t\t\t\t\tel.addClass('js-fileapi-wrapper');\n\t\t\t\t\tif (el.parent()[0].__file_click_fn_delegate_) {\n\t\t\t\t\t\tif (el.parent().css('position') === '' || el.parent().css('position') === 'static') {\n\t\t\t\t\t\t\tel.parent().css('position', 'relative');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tel.css('top', 0).css('bottom', 0).css('left', 0).css('right', 0).css('width', '100%').css('height', '100%').\n\t\t\t\t\t\t\tcss('padding', 0).css('margin', 0);\n\t\t\t\t\t\tel.parent().unbind('click', el.parent()[0].__file_click_fn_delegate_);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\tvar changeFnWrapper = function(fn) {\n\t\treturn function(evt) {\n\t\t\tvar files = FileAPI.getFiles(evt);\n\t\t\t//just a double check for #233\n\t\t\tfor (var i = 0; i < files.length; i++) {\n\t\t\t\tif (files[i].size === undefined) files[i].size = 0;\n\t\t\t\tif (files[i].name === undefined) files[i].name = 'file';\n\t\t\t\tif (files[i].type === undefined) files[i].type = 'undefined';\n\t\t\t}\n\t\t\tif (!evt.target) {\n\t\t\t\tevt.target = {};\n\t\t\t}\n\t\t\tevt.target.files = files;\n\t\t\t// if evt.target.files is not writable use helper field\n\t\t\tif (evt.target.files != files) {\n\t\t\t\tevt.__files_ = files;\n\t\t\t}\n\t\t\t(evt.__files_ || evt.target.files).item = function(i) {\n\t\t\t\treturn (evt.__files_ || evt.target.files)[i] || null;\n\t\t\t}\n\t\t\tif (fn) fn.apply(this, [evt]);\n\t\t};\n\t};\n\tvar isFileChange = function(elem, e) {\n\t\treturn (e.toLowerCase() === 'change' || e.toLowerCase() === 'onchange') && elem.getAttribute('type') == 'file';\n\t}\n\tif (HTMLInputElement.prototype.addEventListener) {\n\t\tHTMLInputElement.prototype.addEventListener = (function(origAddEventListener) {\n\t\t\treturn function(e, fn, b, d) {\n\t\t\t\tif (isFileChange(this, e)) {\n\t\t\t\t\taddFlash(this);\n\t\t\t\t\torigAddEventListener.apply(this, [e, changeFnWrapper(fn), b, d]);\n\t\t\t\t} else {\n\t\t\t\t\torigAddEventListener.apply(this, [e, fn, b, d]);\n\t\t\t\t}\n\t\t\t}\n\t\t})(HTMLInputElement.prototype.addEventListener);\n\t}\n\tif (HTMLInputElement.prototype.attachEvent) {\n\t\tHTMLInputElement.prototype.attachEvent = (function(origAttachEvent) {\n\t\t\treturn function(e, fn) {\n\t\t\t\tif (isFileChange(this, e)) {\n\t\t\t\t\taddFlash(this);\n\t\t\t\t\tif (window.jQuery) {\n\t\t\t\t\t\t// fix for #281 jQuery on IE8\n\t\t\t\t\t\tangular.element(this).bind('change', changeFnWrapper(null));\n\t\t\t\t\t} else {\n\t\t\t\t\t\torigAttachEvent.apply(this, [e, changeFnWrapper(fn)]);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\torigAttachEvent.apply(this, [e, fn]);\n\t\t\t\t}\n\t\t\t}\n\t\t})(HTMLInputElement.prototype.attachEvent);\n\t}\n\n\twindow.FormData = FormData = function() {\n\t\treturn {\n\t\t\tappend: function(key, val, name) {\n\t\t\t\tthis.data.push({\n\t\t\t\t\tkey: key,\n\t\t\t\t\tval: val,\n\t\t\t\t\tname: name\n\t\t\t\t});\n\t\t\t},\n\t\t\tdata: [],\n\t\t\t__isShim: true\n\t\t};\n\t};\n\n\t(function () {\n\t\t//load FileAPI\n\t\tif (!window.FileAPI) {\n\t\t\twindow.FileAPI = {};\n\t\t}\n\t\tif (FileAPI.forceLoad) {\n\t\t\tFileAPI.html5 = false;\n\t\t}\n\t\t\n\t\tif (!FileAPI.upload) {\n\t\t\tvar jsUrl, basePath, script = document.createElement('script'), allScripts = document.getElementsByTagName('script'), i, index, src;\n\t\t\tif (window.FileAPI.jsUrl) {\n\t\t\t\tjsUrl = window.FileAPI.jsUrl;\n\t\t\t} else if (window.FileAPI.jsPath) {\n\t\t\t\tbasePath = window.FileAPI.jsPath;\n\t\t\t} else {\n\t\t\t\tfor (i = 0; i < allScripts.length; i++) {\n\t\t\t\t\tsrc = allScripts[i].src;\n\t\t\t\t\tindex = src.indexOf('angular-file-upload-shim.js')\n\t\t\t\t\tif (index == -1) {\n\t\t\t\t\t\tindex = src.indexOf('angular-file-upload-shim.min.js');\n\t\t\t\t\t}\n\t\t\t\t\tif (index > -1) {\n\t\t\t\t\t\tbasePath = src.substring(0, index);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (FileAPI.staticPath == null) FileAPI.staticPath = basePath;\n\t\t\tscript.setAttribute('src', jsUrl || basePath + 'FileAPI.min.js');\n\t\t\tdocument.getElementsByTagName('head')[0].appendChild(script);\n\t\t\tFileAPI.hasFlash = hasFlash();\n\t\t}\n\t})();\n\tFileAPI.disableFileInput = function(elem, disable) {\n\t\tif (disable) {\n\t\t\telem.removeClass('js-fileapi-wrapper')\n\t\t} else {\n\t\t\telem.addClass('js-fileapi-wrapper');\n\t\t}\n\t}\n}\n\n\nif (!window.FileReader) {\n\twindow.FileReader = function() {\n\t\tvar _this = this, loadStarted = false;\n\t\tthis.listeners = {};\n\t\tthis.addEventListener = function(type, fn) {\n\t\t\t_this.listeners[type] = _this.listeners[type] || [];\n\t\t\t_this.listeners[type].push(fn);\n\t\t};\n\t\tthis.removeEventListener = function(type, fn) {\n\t\t\t_this.listeners[type] && _this.listeners[type].splice(_this.listeners[type].indexOf(fn), 1);\n\t\t};\n\t\tthis.dispatchEvent = function(evt) {\n\t\t\tvar list = _this.listeners[evt.type];\n\t\t\tif (list) {\n\t\t\t\tfor (var i = 0; i < list.length; i++) {\n\t\t\t\t\tlist[i].call(_this, evt);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tthis.onabort = this.onerror = this.onload = this.onloadstart = this.onloadend = this.onprogress = null;\n\n\t\tvar constructEvent = function(type, evt) {\n\t\t\tvar e = {type: type, target: _this, loaded: evt.loaded, total: evt.total, error: evt.error};\n\t\t\tif (evt.result != null) e.target.result = evt.result;\n\t\t\treturn e;\n\t\t};\n\t\tvar listener = function(evt) {\n\t\t\tif (!loadStarted) {\n\t\t\t\tloadStarted = true;\n\t\t\t\t_this.onloadstart && this.onloadstart(constructEvent('loadstart', evt));\n\t\t\t}\n\t\t\tif (evt.type === 'load') {\n\t\t\t\t_this.onloadend && _this.onloadend(constructEvent('loadend', evt));\n\t\t\t\tvar e = constructEvent('load', evt);\n\t\t\t\t_this.onload && _this.onload(e);\n\t\t\t\t_this.dispatchEvent(e);\n\t\t\t} else if (evt.type === 'progress') {\n\t\t\t\tvar e = constructEvent('progress', evt);\n\t\t\t\t_this.onprogress && _this.onprogress(e);\n\t\t\t\t_this.dispatchEvent(e);\n\t\t\t} else {\n\t\t\t\tvar e = constructEvent('error', evt);\n\t\t\t\t_this.onerror && _this.onerror(e);\n\t\t\t\t_this.dispatchEvent(e);\n\t\t\t}\n\t\t};\n\t\tthis.readAsArrayBuffer = function(file) {\n\t\t\tFileAPI.readAsBinaryString(file, listener);\n\t\t}\n\t\tthis.readAsBinaryString = function(file) {\n\t\t\tFileAPI.readAsBinaryString(file, listener);\n\t\t}\n\t\tthis.readAsDataURL = function(file) {\n\t\t\tFileAPI.readAsDataURL(file, listener);\n\t\t}\n\t\tthis.readAsText = function(file) {\n\t\t\tFileAPI.readAsText(file, listener);\n\t\t}\n\t}\n}\n\n})();\n","/**!\n * AngularJS file upload/drop directive with http post and progress\n * @author  Danial  <danial.farid@gmail.com>\n * @version 1.6.12\n */\n(function() {\n\nvar angularFileUpload = angular.module('angularFileUpload', []);\n\nangularFileUpload.service('$upload', ['$http', '$q', '$timeout', function($http, $q, $timeout) {\n\tfunction sendHttp(config) {\n\t\tconfig.method = config.method || 'POST';\n\t\tconfig.headers = config.headers || {};\n\t\tconfig.transformRequest = config.transformRequest || function(data, headersGetter) {\n\t\t\tif (window.ArrayBuffer && data instanceof window.ArrayBuffer) {\n\t\t\t\treturn data;\n\t\t\t}\n\t\t\treturn $http.defaults.transformRequest[0](data, headersGetter);\n\t\t};\n\t\tvar deferred = $q.defer();\n\n\t\tif (window.XMLHttpRequest.__isShim) {\n\t\t\tconfig.headers['__setXHR_'] = function() {\n\t\t\t\treturn function(xhr) {\n\t\t\t\t\tif (!xhr) return;\n\t\t\t\t\tconfig.__XHR = xhr;\n\t\t\t\t\tconfig.xhrFn && config.xhrFn(xhr);\n\t\t\t\t\txhr.upload.addEventListener('progress', function(e) {\n\t\t\t\t\t\tdeferred.notify(e);\n\t\t\t\t\t}, false);\n\t\t\t\t\t//fix for firefox not firing upload progress end, also IE8-9\n\t\t\t\t\txhr.upload.addEventListener('load', function(e) {\n\t\t\t\t\t\tif (e.lengthComputable) {\n\t\t\t\t\t\t\tdeferred.notify(e);\n\t\t\t\t\t\t}\n\t\t\t\t\t}, false);\n\t\t\t\t};\n\t\t\t};\n\t\t}\n\n\t\t$http(config).then(function(r){deferred.resolve(r)}, function(e){deferred.reject(e)}, function(n){deferred.notify(n)});\n\t\t\n\t\tvar promise = deferred.promise;\n\t\tpromise.success = function(fn) {\n\t\t\tpromise.then(function(response) {\n\t\t\t\tfn(response.data, response.status, response.headers, config);\n\t\t\t});\n\t\t\treturn promise;\n\t\t};\n\n\t\tpromise.error = function(fn) {\n\t\t\tpromise.then(null, function(response) {\n\t\t\t\tfn(response.data, response.status, response.headers, config);\n\t\t\t});\n\t\t\treturn promise;\n\t\t};\n\n\t\tpromise.progress = function(fn) {\n\t\t\tpromise.then(null, null, function(update) {\n\t\t\t\tfn(update);\n\t\t\t});\n\t\t\treturn promise;\n\t\t};\n\t\tpromise.abort = function() {\n\t\t\tif (config.__XHR) {\n\t\t\t\t$timeout(function() {\n\t\t\t\t\tconfig.__XHR.abort();\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn promise;\n\t\t};\n\t\tpromise.xhr = function(fn) {\n\t\t\tconfig.xhrFn = (function(origXhrFn) {\n\t\t\t\treturn function() {\n\t\t\t\t\torigXhrFn && origXhrFn.apply(promise, arguments);\n\t\t\t\t\tfn.apply(promise, arguments);\n\t\t\t\t}\n\t\t\t})(config.xhrFn);\n\t\t\treturn promise;\n\t\t};\n\t\t\n\t\treturn promise;\n\t}\n\n\tthis.upload = function(config) {\n\t\tconfig.headers = config.headers || {};\n\t\tconfig.headers['Content-Type'] = undefined;\n\t\tconfig.transformRequest = config.transformRequest || $http.defaults.transformRequest;\n\t\tvar formData = new FormData();\n\t\tvar origTransformRequest = config.transformRequest;\n\t\tvar origData = config.data;\n\t\tconfig.transformRequest = function(formData, headerGetter) {\n\t\t\tif (origData) {\n\t\t\t\tif (config.formDataAppender) {\n\t\t\t\t\tfor (var key in origData) {\n\t\t\t\t\t\tvar val = origData[key];\n\t\t\t\t\t\tconfig.formDataAppender(formData, key, val);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (var key in origData) {\n\t\t\t\t\t\tvar val = origData[key];\n\t\t\t\t\t\tif (typeof origTransformRequest == 'function') {\n\t\t\t\t\t\t\tval = origTransformRequest(val, headerGetter);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfor (var i = 0; i < origTransformRequest.length; i++) {\n\t\t\t\t\t\t\t\tvar transformFn = origTransformRequest[i];\n\t\t\t\t\t\t\t\tif (typeof transformFn == 'function') {\n\t\t\t\t\t\t\t\t\tval = transformFn(val, headerGetter);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tformData.append(key, val);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (config.file != null) {\n\t\t\t\tvar fileFormName = config.fileFormDataName || 'file';\n\n\t\t\t\tif (Object.prototype.toString.call(config.file) === '[object Array]') {\n\t\t\t\t\tvar isFileFormNameString = Object.prototype.toString.call(fileFormName) === '[object String]';\n\t\t\t\t\tfor (var i = 0; i < config.file.length; i++) {\n\t\t\t\t\t\tformData.append(isFileFormNameString ? fileFormName : fileFormName[i], config.file[i], \n\t\t\t\t\t\t\t\t(config.fileName && config.fileName[i]) || config.file[i].name);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tformData.append(fileFormName, config.file, config.fileName || config.file.name);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn formData;\n\t\t};\n\n\t\tconfig.data = formData;\n\n\t\treturn sendHttp(config);\n\t};\n\n\tthis.http = function(config) {\n\t\treturn sendHttp(config);\n\t}\n}]);\n\nangularFileUpload.directive('ngFileSelect', [ '$parse', '$timeout', function($parse, $timeout) {\n\treturn function(scope, elem, attr) {\n\t\tvar fn = $parse(attr['ngFileSelect']);\n\t\tif (elem[0].tagName.toLowerCase() !== 'input' || (elem.attr('type') && elem.attr('type').toLowerCase()) !== 'file') {\n\t\t\tvar fileElem = angular.element('<input type=\"file\">')\n\t\t\tvar attrs = elem[0].attributes;\n\t\t\tfor (var i = 0; i < attrs.length; i++) {\n\t\t\t\tif (attrs[i].name.toLowerCase() !== 'type') {\n\t\t\t\t\tfileElem.attr(attrs[i].name, attrs[i].value);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (attr[\"multiple\"]) fileElem.attr(\"multiple\", \"true\");\n\t\t\tfileElem.css(\"width\", \"1px\").css(\"height\", \"1px\").css(\"opacity\", 0).css(\"position\", \"absolute\").css('filter', 'alpha(opacity=0)')\n\t\t\t\t\t.css(\"padding\", 0).css(\"margin\", 0).css(\"overflow\", \"hidden\");\n\t\t\tfileElem.attr('__wrapper_for_parent_', true);\n\n//\t\t\tfileElem.css(\"top\", 0).css(\"bottom\", 0).css(\"left\", 0).css(\"right\", 0).css(\"width\", \"100%\").\n//\t\t\t\t\tcss(\"opacity\", 0).css(\"position\", \"absolute\").css('filter', 'alpha(opacity=0)').css(\"padding\", 0).css(\"margin\", 0);\n\t\t\telem.append(fileElem);\n\t\t\telem[0].__file_click_fn_delegate_  = function() {\n\t\t\t\tfileElem[0].click();\n\t\t\t}; \n\t\t\telem.bind('click', elem[0].__file_click_fn_delegate_);\n\t\t\telem.css(\"overflow\", \"hidden\");\n//\t\t\tif (fileElem.parent()[0] != elem[0]) {\n//\t\t\t\t//fix #298 button element\n//\t\t\t\telem.wrap('<span>');\n//\t\t\t\telem.css(\"z-index\", \"-1000\")\n//\t\t\t\telem.parent().append(fileElem);\n//\t\t\t\telem = elem.parent();\n//\t\t\t}\n//\t\t\tif (elem.css(\"position\") === '' || elem.css(\"position\") === 'static') {\n//\t\t\t\telem.css(\"position\", \"relative\");\n//\t\t\t}\n\t\t\telem = fileElem;\n\t\t}\n\t\telem.bind('change', function(evt) {\n\t\t\tvar files = [], fileList, i;\n\t\t\tfileList = evt.__files_ || evt.target.files;\n\t\t\tif (fileList != null) {\n\t\t\t\tfor (i = 0; i < fileList.length; i++) {\n\t\t\t\t\tfiles.push(fileList.item(i));\n\t\t\t\t}\n\t\t\t}\n\t\t\t$timeout(function() {\n\t\t\t\tfn(scope, {\n\t\t\t\t\t$files : files,\n\t\t\t\t\t$event : evt\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t\t// removed this since it was confusing if the user click on browse and then cancel #181\n//\t\telem.bind('click', function(){\n//\t\t\tthis.value = null;\n//\t\t});\n\n\t\t// removed because of #253 bug\n\t\t// touch screens\n//\t\tif (('ontouchstart' in window) ||\n//\t\t\t\t(navigator.maxTouchPoints > 0) || (navigator.msMaxTouchPoints > 0)) {\n//\t\t\telem.bind('touchend', function(e) {\n//\t\t\t\te.preventDefault();\n//\t\t\t\te.target.click();\n//\t\t\t});\n//\t\t}\n\t};\n} ]);\n\nangularFileUpload.directive('ngFileDropAvailable', [ '$parse', '$timeout', function($parse, $timeout) {\n\treturn function(scope, elem, attr) {\n\t\tif ('draggable' in document.createElement('span')) {\n\t\t\tvar fn = $parse(attr['ngFileDropAvailable']);\n\t\t\t$timeout(function() {\n\t\t\t\tfn(scope);\n\t\t\t});\n\t\t}\n\t};\n} ]);\n\nangularFileUpload.directive('ngFileDrop', [ '$parse', '$timeout', '$location', function($parse, $timeout, $location) {\n\treturn function(scope, elem, attr) {\n\t\tif ('draggable' in document.createElement('span')) {\n\t\t\tvar leaveTimeout = null;\n\t\t\telem[0].addEventListener(\"dragover\", function(evt) {\n\t\t\t\tevt.preventDefault();\n\t\t\t\t$timeout.cancel(leaveTimeout);\n\t\t\t\tif (!elem[0].__drag_over_class_) {\n\t\t\t\t\tif (attr['ngFileDragOverClass'] && attr['ngFileDragOverClass'].search(/\\) *$/) > -1) {\n\t\t\t\t\t\tvar dragOverClass = $parse(attr['ngFileDragOverClass'])(scope, {\n\t\t\t\t\t\t\t$event : evt\n\t\t\t\t\t\t});\t\t\t\t\t\n\t\t\t\t\t\telem[0].__drag_over_class_ = dragOverClass; \n\t\t\t\t\t} else {\n\t\t\t\t\t\telem[0].__drag_over_class_ = attr['ngFileDragOverClass'] || \"dragover\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telem.addClass(elem[0].__drag_over_class_);\n\t\t\t}, false);\n\t\t\telem[0].addEventListener(\"dragenter\", function(evt) {\n\t\t\t\tevt.preventDefault();\n\t\t\t}, false);\n\t\t\telem[0].addEventListener(\"dragleave\", function(evt) {\n\t\t\t\tleaveTimeout = $timeout(function() {\n\t\t\t\t\telem.removeClass(elem[0].__drag_over_class_);\n\t\t\t\t\telem[0].__drag_over_class_ = null;\n\t\t\t\t}, attr['ngFileDragOverDelay'] || 1);\n\t\t\t}, false);\n\t\t\tvar fn = $parse(attr['ngFileDrop']);\n\t\t\telem[0].addEventListener(\"drop\", function(evt) {\n\t\t\t\tevt.preventDefault();\n\t\t\t\telem.removeClass(elem[0].__drag_over_class_);\n\t\t\t\telem[0].__drag_over_class_ = null;\n\t\t\t\textractFiles(evt, function(files) {\n\t\t\t\t\tfn(scope, {\n\t\t\t\t\t\t$files : files,\n\t\t\t\t\t\t$event : evt\n\t\t\t\t\t});\t\t\t\t\t\n\t\t\t\t});\n\t\t\t}, false);\n\t\t\t\t\t\t\n\t\t\tfunction isASCII(str) {\n\t\t\t\treturn /^[\\000-\\177]*$/.test(str);\n\t\t\t}\n\n\t\t\tfunction extractFiles(evt, callback) {\n\t\t\t\tvar files = [], items = evt.dataTransfer.items;\n\t\t\t\tif (items && items.length > 0 && items[0].webkitGetAsEntry && $location.protocol() != 'file' && \n\t\t\t\t\t\titems[0].webkitGetAsEntry().isDirectory) {\n\t\t\t\t\tfor (var i = 0; i < items.length; i++) {\n\t\t\t\t\t\tvar entry = items[i].webkitGetAsEntry();\n\t\t\t\t\t\tif (entry != null) {\n\t\t\t\t\t\t\t//fix for chrome bug https://code.google.com/p/chromium/issues/detail?id=149735\n\t\t\t\t\t\t\tif (isASCII(entry.name)) {\n\t\t\t\t\t\t\t\ttraverseFileTree(files, entry);\n\t\t\t\t\t\t\t} else if (!items[i].webkitGetAsEntry().isDirectory) {\n\t\t\t\t\t\t\t\tfiles.push(items[i].getAsFile());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tvar fileList = evt.dataTransfer.files;\n\t\t\t\t\tif (fileList != null) {\n\t\t\t\t\t\tfor (var i = 0; i < fileList.length; i++) {\n\t\t\t\t\t\t\tfiles.push(fileList.item(i));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t(function waitForProcess(delay) {\n\t\t\t\t\t$timeout(function() {\n\t\t\t\t\t\tif (!processing) {\n\t\t\t\t\t\t\tcallback(files);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\twaitForProcess(10);\n\t\t\t\t\t\t}\n\t\t\t\t\t}, delay || 0)\n\t\t\t\t})();\n\t\t\t}\n\t\t\t\n\t\t\tvar processing = 0;\n\t\t\tfunction traverseFileTree(files, entry, path) {\n\t\t\t\tif (entry != null) {\n\t\t\t\t\tif (entry.isDirectory) {\n\t\t\t\t\t\tvar dirReader = entry.createReader();\n\t\t\t\t\t\tprocessing++;\n\t\t\t\t\t\tdirReader.readEntries(function(entries) {\n\t\t\t\t\t\t\tfor (var i = 0; i < entries.length; i++) {\n\t\t\t\t\t\t\t\ttraverseFileTree(files, entries[i], (path ? path : \"\") + entry.name + \"/\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tprocessing--;\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprocessing++;\n\t\t\t\t\t\tentry.file(function(file) {\n\t\t\t\t\t\t\tprocessing--;\n\t\t\t\t\t\t\tfile._relativePath = (path ? path : \"\") + file.name;\n\t\t\t\t\t\t\tfiles.push(file);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n} ]);\n\n})();\n","/*globals angular, console*/\n\n/**\n * @author pmeijer / https://github.com/pmeijer\n */\n\nangular.module( 'cyphy.components' )\n    .controller( 'ComponentDetailsController', function ( $scope, componentService ) {\n        'use strict';\n        var context = {},\n            properties = {},\n            connectors = {},\n            ports = {};\n\n        console.log( 'ComponentDetailsController' );\n        $scope.init = function ( connectionId ) {\n            $scope.connectionId = connectionId;\n            if ( $scope.connectionId && angular.isString( $scope.connectionId ) ) {\n                context = {\n                    db: $scope.connectionId,\n                    regionId: 'ComponentDetails_' + ( new Date() )\n                        .toISOString()\n                };\n                $scope.$on( '$destroy', function () {\n                    console.log( 'Destroying :', context.regionId );\n                    componentService.cleanUpAllRegions( context );\n                } );\n            } else {\n                throw new Error( 'connectionId must be defined and it must be a string' );\n            }\n            $scope.details = {\n                properties: properties,\n                connectors: connectors,\n                ports: ports\n            };\n\n            componentService.registerWatcher( context, function ( destroy ) {\n                $scope.details = {\n                    properties: {},\n                    connectors: {},\n                    ports: {}\n                };\n                if ( destroy ) {\n                    //TODO: notify user\n                    return;\n                }\n                console.info( 'ComponentDetailsController - initialize event raised' );\n\n                componentService.watchInterfaces( context, $scope.componentId, function ( updateObject ) {\n                    // Since watchInterfaces keeps the data up-to-date there shouldn't be a need to do any\n                    // updates here..\n                    console.log( 'watchInterfaces', updateObject );\n                } )\n                    .then( function ( componentInterfaces ) {\n                        $scope.details.properties = componentInterfaces.properties;\n                        $scope.details.connectors = componentInterfaces.connectors;\n                        $scope.details.ports = componentInterfaces.ports;\n                    } );\n            } );\n        };\n    } )\n    .directive( 'componentDetails', function () {\n        'use strict';\n        return {\n            restrict: 'E',\n            scope: {\n                componentId: '=componentId'\n            },\n            require: '^componentList',\n            link: function ( scope, elem, attr, componetListController ) {\n                var connectionId = componetListController.getConnectionId();\n                scope.init( connectionId );\n            },\n            replace: true,\n            templateUrl: '/cyphy-components/templates/InterfaceDetails.html',\n            controller: 'ComponentDetailsController'\n        };\n    } );","/*globals angular, console*/\n\n/**\n * @author pmeijer / https://github.com/pmeijer\n * @author lattmann / https://github.com/lattmann\n */\n\nangular.module( 'cyphy.components' )\n    .controller( 'ComponentListController', function ( $scope, $window, $modal, growl, componentService, fileService ) {\n        'use strict';\n        var\n        items = [], // Items that are passed to the item-list ui-component.\n            componentItems = {}, // Same items are stored in a dictionary.\n            serviceData2ListItem,\n            addDomainWatcher,\n            config,\n            context;\n\n        console.log( 'ComponentListController', $scope.avmIds );\n        this.getConnectionId = function () {\n            return $scope.connectionId;\n        };\n        // Check for valid connectionId and register clean-up on destroy event.\n        if ( $scope.connectionId && angular.isString( $scope.connectionId ) ) {\n            context = {\n                db: $scope.connectionId,\n                regionId: 'ComponentListController_' + ( new Date() )\n                    .toISOString()\n            };\n            $scope.$on( '$destroy', function () {\n                componentService.cleanUpAllRegions( context );\n            } );\n        } else {\n            throw new Error( 'connectionId must be defined and it must be a string' );\n        }\n\n        // Configuration for the item list ui component.\n        config = {\n\n            sortable: false,\n            secondaryItemMenu: true,\n            detailsCollapsible: true,\n            showDetailsLabel: 'Show details',\n            hideDetailsLabel: 'Hide details',\n\n            // Event handlers\n\n            itemSort: function ( jQEvent, ui ) {\n                console.log( 'Sort happened', jQEvent, ui );\n            },\n\n            itemClick: function ( event, item ) {\n                $scope.$emit( 'selectedInstances', {\n                    name: item.title,\n                    ids: item.data.instanceIds\n                } );\n            },\n\n            itemContextmenuRenderer: function ( e, item ) {\n                return [ {\n                    items: [ {\n                        id: 'openInEditor',\n                        label: 'Open in Editor',\n                        disabled: false,\n                        iconClass: 'glyphicon glyphicon-edit',\n                        action: function () {\n                            $window.open( '/?project=ADMEditor&activeObject=' + item.id, '_blank' );\n                        }\n                    }, {\n                        id: 'editComponent',\n                        label: 'Edit',\n                        disabled: false,\n                        iconClass: 'glyphicon glyphicon-pencil',\n                        actionData: {\n                            description: item.description,\n                            id: item.id\n                        },\n                        action: function ( data ) {\n                            var editContext = {\n                                db: context.db,\n                                regionId: context.regionId + '_watchComponents'\n                            },\n                                modalInstance = $modal.open( {\n                                    templateUrl: '/cyphy-components/templates/ComponentEdit.html',\n                                    controller: 'ComponentEditController',\n                                    //size: size,\n                                    resolve: {\n                                        data: function () {\n                                            return data;\n                                        }\n                                    }\n                                } );\n\n                            modalInstance.result.then( function ( editedData ) {\n                                var attrs = {\n                                    'INFO': editedData.description\n                                };\n                                componentService.setComponentAttributes( editContext, data.id, attrs )\n                                    .then( function () {\n                                        console.log( 'Attribute updated' );\n                                    } );\n                            }, function () {\n                                console.log( 'Modal dismissed at: ' + new Date() );\n                            } );\n                        }\n                    }, {\n                        id: 'exportAsAcm',\n                        label: 'Export ACM',\n                        disabled: false,\n                        iconClass: 'glyphicon glyphicon-share-alt',\n                        actionData: {\n                            resource: item.data.resource,\n                            name: item.title\n                        },\n                        action: function ( data ) {\n                            var hash = data.resource,\n                                url = fileService.getDownloadUrl( hash );\n                            if ( url ) {\n                                growl.success( 'ACM file for <a href=\"' + url + '\">' + data.name +\n                                    '</a> exported.' );\n                            } else {\n                                growl.warning( data.name + ' does not have a resource.' );\n                            }\n                        }\n                    } ]\n                }, {\n                    items: [ {\n                        id: 'delete',\n                        label: 'Delete',\n                        disabled: false,\n                        iconClass: 'glyphicon glyphicon-remove',\n                        actionData: {\n                            id: item.id,\n                            name: item.title\n                        },\n                        action: function ( data ) {\n                            var modalInstance = $modal.open( {\n                                templateUrl: '/cyphy-components/templates/SimpleModal.html',\n                                controller: 'SimpleModalController',\n                                resolve: {\n                                    data: function () {\n                                        return {\n                                            title: 'Delete Component',\n                                            details: 'This will delete ' + data.name +\n                                                ' from the workspace.'\n                                        };\n                                    }\n                                }\n                            } );\n\n                            modalInstance.result.then( function () {\n                                componentService.deleteComponent( context, data.id );\n                            }, function () {\n                                console.log( 'Modal dismissed at: ' + new Date() );\n                            } );\n                        }\n                    } ]\n                } ];\n            },\n\n            detailsRenderer: function ( /*item*/) {\n                //                item.details = 'My details are here now!';\n            },\n\n            filter: {}\n\n        };\n\n        $scope.config = config;\n        $scope.listData = {\n            items: items\n        };\n\n        // Transform the raw service node data to items for the list.\n        serviceData2ListItem = function ( data ) {\n            var listItem;\n\n            if ( componentItems.hasOwnProperty( data.id ) ) {\n                listItem = componentItems[ data.id ];\n                listItem.title = data.name;\n                listItem.description = data.description;\n                listItem.data.resource = data.resource;\n            } else {\n                listItem = {\n                    id: data.id,\n                    title: data.name,\n                    toolTip: $scope.avmIds ? 'Highlight instances' : '',\n                    description: data.description,\n                    lastUpdated: {\n                        time: 'N/A', // TODO: get this in the future.\n                        user: 'N/A' // TODO: get this in the future.\n                    },\n                    stats: [],\n                    details: 'Content',\n                    detailsTemplateUrl: 'componentDetails.html',\n                    data: {\n                        resource: data.resource\n                    }\n                };\n                if ( $scope.avmIds ) {\n                    listItem.data.instanceIds = $scope.avmIds[ data.avmId ];\n                }\n                // Add the list-item to the items list and the dictionary.\n                items.push( listItem );\n                componentItems[ listItem.id ] = listItem;\n            }\n        };\n\n        addDomainWatcher = function ( componentId ) {\n            var domainModelsToStat = function ( domainModels ) {\n                var stats = [],\n                    labelMap = {\n                        CAD: {\n                            value: 0,\n                            toolTip: 'CAD',\n                            iconClass: 'fa fa-codepen'\n                        },\n                        Cyber: {\n                            value: 0,\n                            toolTip: 'Cyber',\n                            iconClass: 'fa fa-laptop'\n                        },\n                        Manufacturing: {\n                            value: 0,\n                            toolTip: 'Manufacturing',\n                            iconClass: 'fa fa-wrench'\n                        },\n                        Modelica: {\n                            value: 0,\n                            toolTip: 'Modelica',\n                            iconClass: 'fa fa-gears'\n                        },\n                        EDA: {\n                            value: 0,\n                            toolTip: 'EDA',\n                            iconClass: 'fa fa-laptop'\n                        },\n                        SPICE: {\n                            value: 0,\n                            toolTip: 'SPICE',\n                            iconClass: 'fa fa-laptop'\n                        },\n                        SystemC: {\n                            value: 0,\n                            toolTip: 'SystemC',\n                            iconClass: 'fa fa-laptop'\n                        }\n                    },\n                    key;\n                for ( key in domainModels ) {\n                    if ( domainModels.hasOwnProperty( key ) ) {\n                        if ( labelMap[ domainModels[ key ].type ] ) {\n                            labelMap[ domainModels[ key ].type ].value += 1;\n                        } else {\n                            console.error( 'Unexpected domain-model type', domainModels[ key ].type );\n                        }\n                    }\n                }\n                for ( key in labelMap ) {\n                    if ( labelMap.hasOwnProperty( key ) ) {\n                        if ( labelMap[ key ].value > 0 ) {\n                            stats.push( labelMap[ key ] );\n                        }\n                    }\n                }\n                return stats;\n            };\n\n            componentService.watchComponentDomains( context, componentId, function ( updateData ) {\n                var listItem = componentItems[ componentId ];\n                console.log( 'DomainModels updated, event type:', updateData.type );\n                if ( listItem ) {\n                    listItem.stats = domainModelsToStat( updateData.domainModels );\n                } else {\n                    console.warn( 'DomainModel data did not have matching componentData', componentId );\n                }\n            } )\n                .then( function ( data ) {\n                    var listItem = componentItems[ componentId ];\n                    if ( listItem ) {\n                        listItem.stats = domainModelsToStat( data.domainModels );\n                    } else {\n                        console.warn( 'DomainModel data did not have matching componentData', componentId );\n                    }\n                } );\n        };\n\n        componentService.registerWatcher( context, function ( destroyed ) {\n            items = [];\n            $scope.listData.items = items;\n            componentItems = {};\n\n            if ( destroyed ) {\n                console.warn( 'destroy event raised' );\n                // Data not (yet) avaliable.\n                // TODO: display this to the user.\n                return;\n            }\n            console.info( 'initialize event raised' );\n\n            componentService.watchComponents( context, $scope.workspaceId, $scope.avmIds, function (\n                updateObject ) {\n                var index;\n                //console.warn(updateObject);\n                if ( updateObject.type === 'load' ) {\n                    serviceData2ListItem( updateObject.data );\n                    addDomainWatcher( updateObject.id );\n                } else if ( updateObject.type === 'update' ) {\n                    serviceData2ListItem( updateObject.data );\n                    //$scope.$apply();\n                } else if ( updateObject.type === 'unload' ) {\n                    if ( componentItems.hasOwnProperty( updateObject.id ) ) {\n                        index = items.map( function ( e ) {\n                            return e.id;\n                        } )\n                            .indexOf( updateObject.id );\n                        if ( index > -1 ) {\n                            items.splice( index, 1 );\n                        }\n                        componentService.cleanUpRegion( context, context.regionId +\n                            '_watchComponentDomains_' + updateObject.id );\n                        delete componentItems[ updateObject.id ];\n                    }\n                    //$scope.$apply();\n                } else {\n                    throw new Error( updateObject );\n                }\n            } )\n                .then( function ( data ) {\n                    var componentId;\n                    for ( componentId in data.components ) {\n                        if ( data.components.hasOwnProperty( componentId ) ) {\n                            serviceData2ListItem( data.components[ componentId ] );\n                            addDomainWatcher( componentId );\n                        }\n                    }\n                } );\n        } );\n    } )\n    .controller( 'ComponentEditController', function ( $scope, $modalInstance, data ) {\n        'use strict';\n        $scope.data = {\n            description: data.description\n        };\n\n        $scope.ok = function () {\n            $modalInstance.close( $scope.data );\n        };\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss( 'cancel' );\n        };\n    } )\n    .directive( 'componentList', function () {\n        'use strict';\n        return {\n            restrict: 'E',\n            scope: {\n                workspaceId: '=workspaceId',\n                connectionId: '=connectionId',\n                avmIds: '=avmIds'\n            },\n            replace: true,\n            templateUrl: '/cyphy-components/templates/ComponentList.html',\n            controller: 'ComponentListController'\n        };\n    } );\n","/*globals angular, console*/\n\n/**\n * @author pmeijer / https://github.com/pmeijer\n */\n\nangular.module( 'cyphy.components' )\n    .controller( 'ConfigurationSetSelectorController', function ( $scope, growl, designService ) {\n        'use strict';\n        var context,\n            spawnedConfigurationRegions = [];\n        $scope.dataModel = {\n            dataAvaliable: false,\n            configurationSets: {}\n        };\n\n        if ( $scope.connectionId && angular.isString( $scope.connectionId ) ) {\n            context = {\n                db: $scope.connectionId,\n                regionId: 'ConfigurationSetSelectorController_' + ( new Date() )\n                    .toISOString()\n            };\n            $scope.$on( '$destroy', function () {\n                designService.cleanUpAllRegions( context );\n                //console.log('$destroyed ' + context.regionId);\n            } );\n        } else {\n            throw new Error( 'connectionId must be defined and it must be a string' );\n        }\n\n        designService.registerWatcher( context, function ( destroyed ) {\n            $scope.dataModel.dataAvaliable = false;\n            $scope.dataModel.configurationSets = {};\n\n            if ( destroyed ) {\n                console.warn( 'destroy event raised' );\n                // Data not (yet) avaliable.\n                // TODO: display this to the user.\n                return;\n            }\n\n            designService.watchConfigurationSets( context, $scope.designId, function ( updateObject ) {\n                $scope.dataModel.dataAvaliable = Object.keys( updateObject.data.configurationSets )\n                    .length > 0;\n            } )\n                .then( function ( data ) {\n                    $scope.dataModel.configurationSets = data.configurationSets;\n                    $scope.dataModel.dataAvaliable = Object.keys( data.configurationSets )\n                        .length > 0;\n                } );\n        } );\n\n        $scope.loadConfigurations = function ( setId, setName ) {\n            var i;\n\n            for ( i = 0; i < spawnedConfigurationRegions.length; i += 1 ) {\n                designService.cleanUpRegion( context, spawnedConfigurationRegions[ i ] );\n            }\n            spawnedConfigurationRegions = [];\n            designService.watchConfigurations( context, setId, function ( updateObject ) {\n                console.warn( updateObject );\n            } )\n                .then( function ( data ) {\n                    var key,\n                        config,\n                        configurations = [];\n                    spawnedConfigurationRegions.push( data.regionId );\n                    for ( key in data.configurations ) {\n                        if ( data.configurations.hasOwnProperty( key ) ) {\n                            config = data.configurations[ key ];\n                            try {\n                                configurations.push( {\n                                    id: config.id,\n                                    name: config.name,\n                                    alternativeAssignments: JSON.parse( config.alternativeAssignments )\n                                } );\n                            } catch ( error ) {\n                                growl.error( 'Configuration ' + config.name + ' had invalid attribute.' );\n                                console.error( 'Could not parse', config.alternativeAssignments, error );\n                            }\n                        }\n                    }\n                    $scope.$emit( 'configurationsLoaded', {\n                        configurations: configurations,\n                        setName: setName\n                    } );\n                } );\n        };\n    } )\n    .directive( 'configurationSetSelector', function () {\n        'use strict';\n        return {\n            restrict: 'E',\n            scope: {\n                designId: '=designId',\n                connectionId: '=connectionId'\n            },\n            replace: true,\n            templateUrl: '/cyphy-components/templates/ConfigurationSetSelector.html',\n            controller: 'ConfigurationSetSelectorController'\n        };\n    } );","/*globals angular*/\n\n/**\n * @author pmeijer / https://github.com/pmeijer\n */\n\nangular.module( 'cyphy.components' )\n    .controller( 'ConfigurationTableController', function ( $scope ) {\n        'use strict';\n        $scope.dataModel = {\n            changeInfo: [],\n            selected: [],\n            configurations: $scope.configurations,\n            setName: $scope.setName\n        };\n\n        $scope.tableColumnDefinition = [ {\n            columnHeaderDisplayName: 'Name',\n            templateUrl: 'tableCell.html',\n            sortKey: 'name'\n        } ];\n\n        $scope.$on( 'exposeSelection', function ( event, type ) {\n            $scope.$emit( 'selectionExposed', $scope.dataModel.selected, type );\n        } );\n\n        $scope.cfgClicked = function ( cfg ) {\n            $scope.$emit( 'configurationClicked', cfg );\n        };\n    } )\n    .directive( 'configurationTable', function () {\n        'use strict';\n        return {\n            restrict: 'E',\n            scope: {\n                configurations: '=configurations',\n                setName: '=setName'\n            },\n            replace: true,\n            templateUrl: '/cyphy-components/templates/ConfigurationTable.html',\n            controller: 'ConfigurationTableController'\n        };\n    } );","/*globals angular, console*/\n\n/**\n * @author pmeijer / https://github.com/pmeijer\n */\n\nangular.module( 'cyphy.components' )\n    .controller( 'DesignDetailsController', function ( $scope, designService ) {\n        'use strict';\n        var context = {},\n            properties = {},\n            connectors = {},\n            ports = {};\n\n        console.log( 'DesignDetailsController' );\n        $scope.init = function ( connectionId ) {\n            $scope.connectionId = connectionId;\n            if ( $scope.connectionId && angular.isString( $scope.connectionId ) ) {\n                context = {\n                    db: $scope.connectionId,\n                    regionId: 'DesignDetails_' + ( new Date() )\n                        .toISOString()\n                };\n                $scope.$on( '$destroy', function () {\n                    console.log( 'Destroying :', context.regionId );\n                    designService.cleanUpAllRegions( context );\n                } );\n            } else {\n                throw new Error( 'connectionId must be defined and it must be a string' );\n            }\n            $scope.details = {\n                properties: properties,\n                connectors: connectors,\n                ports: ports\n            };\n\n            designService.registerWatcher( context, function ( destroy ) {\n                $scope.details = {\n                    properties: {},\n                    connectors: {},\n                    ports: {}\n                };\n                if ( destroy ) {\n                    //TODO: notify user\n                    return;\n                }\n                console.info( 'DesignDetailsController - initialize event raised' );\n\n                designService.watchInterfaces( context, $scope.designId, function ( updateObject ) {\n                    // Since watchInterfaces keeps the data up-to-date there shouldn't be a need to do any\n                    // updates here..\n                    console.log( 'watchInterfaces', updateObject );\n                } )\n                    .then( function ( designInterfaces ) {\n                        $scope.details.properties = designInterfaces.properties;\n                        $scope.details.connectors = designInterfaces.connectors;\n                        $scope.details.ports = designInterfaces.ports;\n                    } );\n            } );\n        };\n    } )\n    .directive( 'designDetails', function () {\n        'use strict';\n        return {\n            restrict: 'E',\n            scope: {\n                designId: '=designId'\n            },\n            require: '^designList',\n            link: function ( scope, elem, attr, designListController ) {\n                var connectionId = designListController.getConnectionId();\n                scope.init( connectionId );\n            },\n            replace: true,\n            templateUrl: '/cyphy-components/templates/InterfaceDetails.html',\n            controller: 'DesignDetailsController'\n        };\n    } );","/*globals angular, console*/\n\n/**\n * @author pmeijer / https://github.com/pmeijer\n * @author lattmann / https://github.com/lattmann\n */\n\nangular.module( 'cyphy.components' )\n    .controller( 'DesignListController', function ( $scope, $window, $location, $modal, designService ) {\n        'use strict';\n        var\n        items = [], // Items that are passed to the item-list ui-component.\n            designItems = {}, // Same items are stored in a dictionary.\n            serviceData2ListItem,\n            config,\n            addConfigurationWatcher,\n            context;\n\n        console.log( 'DesignListController' );\n        this.getConnectionId = function () {\n            return $scope.connectionId;\n        };\n        // Check for valid connectionId and register clean-up on destroy event.\n        if ( $scope.connectionId && angular.isString( $scope.connectionId ) ) {\n            context = {\n                db: $scope.connectionId,\n                regionId: 'DesignListController_' + ( new Date() )\n                    .toISOString()\n            };\n            $scope.$on( '$destroy', function () {\n                designService.cleanUpAllRegions( context );\n            } );\n        } else {\n            throw new Error( 'connectionId must be defined and it must be a string' );\n        }\n\n\n        // Configuration for the item list ui component.\n        config = {\n\n            sortable: false,\n            secondaryItemMenu: true,\n            detailsCollapsible: true,\n            showDetailsLabel: 'Show details',\n            hideDetailsLabel: 'Hide details',\n\n            // Event handlers\n\n            itemSort: function ( /*jQEvent, ui*/) {\n                //console.log('Sort happened', jQEvent, ui);\n            },\n\n            itemClick: function ( event, item ) {\n                var newUrl = '/designSpace/' + $scope.workspaceId.replace( /\\//g, '-' ) + '/' + item.id.replace(\n                    /\\//g, '-' );\n                $location.path( newUrl );\n            },\n\n            itemContextmenuRenderer: function ( e, item ) {\n                return [ {\n                    items: [ {\n                        id: 'openInEditor',\n                        label: 'Open in Editor',\n                        disabled: false,\n                        iconClass: 'glyphicon glyphicon-edit',\n                        action: function () {\n                            $window.open( '/?project=ADMEditor&activeObject=' + item.id, '_blank' );\n                        }\n                    }, {\n                        id: 'editDesign',\n                        label: 'Edit Attributes',\n                        disabled: false,\n                        iconClass: 'glyphicon glyphicon-pencil',\n                        actionData: {\n                            id: item.id,\n                            description: item.description,\n                            name: item.title,\n                            context: {\n                                db: context.db,\n                                regionId: context.regionId + '_watchDesigns'\n                            }\n                        },\n                        action: designService.editDesignFn\n                    }, {\n                        id: 'setAsTopLevelSystemUnderTest',\n                        label: 'Set as TLSUT',\n                        disabled: !$scope.usedByTestBench,\n                        iconClass: 'fa fa-arrow-circle-right',\n                        actionData: {\n                            id: item.id,\n                            name: item.title\n                        },\n                        action: function ( data ) {\n                            var oldTlsut = designItems[ $scope.state.tlsutId ];\n                            $scope.state.tlsutId = data.id;\n                            $scope.$emit( 'topLevelSystemUnderTestSet', item, oldTlsut );\n                        }\n                    }, {\n                        id: 'exportAsAdm',\n                        label: 'Export ADM',\n                        disabled: false,\n                        iconClass: 'glyphicon glyphicon-share-alt',\n                        actionData: {\n                            id: item.id,\n                            name: item.title,\n                            context: context\n                        },\n                        action: designService.exportAsAdmFn\n                    } ]\n                }, {\n                    items: [ {\n                        id: 'delete',\n                        label: 'Delete',\n                        disabled: false,\n                        iconClass: 'glyphicon glyphicon-remove',\n                        actionData: {\n                            id: item.id,\n                            name: item.title,\n                            context: context\n                        },\n                        action: designService.deleteFn\n                    } ]\n                } ];\n            },\n\n            detailsRenderer: function ( /*item*/) {\n                //                item.details = 'My details are here now!';\n            },\n\n            filter: {}\n\n        };\n\n        $scope.config = config;\n        $scope.listData = {\n            items: items\n        };\n\n        $scope.state = {\n            tlsutId: null\n        };\n\n        $scope.$on( 'topLevelSystemUnderTestChanged', function ( event, id ) {\n            if ( $scope.state.tlsutId && designItems.hasOwnProperty( $scope.state.tlsutId ) ) {\n                designItems[ $scope.state.tlsutId ].cssClass = '';\n            }\n            $scope.state.tlsutId = id;\n            if ( designItems.hasOwnProperty( id ) ) {\n                designItems[ id ].cssClass = 'top-level-system-under-test';\n            }\n        } );\n\n        // Transform the raw service node data to items for the list.\n        serviceData2ListItem = function ( data ) {\n            var listItem;\n\n            if ( designItems.hasOwnProperty( data.id ) ) {\n                listItem = designItems[ data.id ];\n                listItem.title = data.name;\n                listItem.description = data.description;\n            } else {\n                listItem = {\n                    id: data.id,\n                    title: data.name,\n                    toolTip: 'Open Design Space View',\n                    cssClass: $scope.state.tlsutId === data.id ? 'top-level-system-under-test' : '',\n                    description: data.description,\n                    lastUpdated: {\n                        time: 'N/A', // TODO: get this in the future.\n                        user: 'N/A' // TODO: get this in the future.\n                    },\n                    stats: [ {\n                        value: 0,\n                        toolTip: 'Configuration Sets',\n                        iconClass: 'glyphicon glyphicon-th-large'\n                    }, {\n                        value: 0,\n                        toolTip: 'Configurations',\n                        iconClass: 'glyphicon glyphicon-th'\n                    }, {\n                        value: 0,\n                        toolTip: 'Results',\n                        iconClass: 'glyphicon glyphicon-stats'\n                    } ],\n                    details: 'Content',\n                    detailsTemplateUrl: 'designDetails.html'\n                };\n                // Add the list-item to the items list and the dictionary.\n                items.push( listItem );\n                designItems[ listItem.id ] = listItem;\n            }\n        };\n\n        addConfigurationWatcher = function ( designId ) {\n            designService.watchNbrOfConfigurations( context, designId, function ( updateObject ) {\n                var listItem = designItems[ designId ];\n                //console.log(updateObject);\n                listItem.stats[ 0 ].value = updateObject.data.counters.sets;\n                listItem.stats[ 1 ].value = updateObject.data.counters.configurations;\n                listItem.stats[ 2 ].value = updateObject.data.counters.results;\n            } )\n                .then( function ( data ) {\n                    var listItem = designItems[ designId ];\n                    listItem.stats[ 0 ].value = data.counters.sets;\n                    listItem.stats[ 1 ].value = data.counters.configurations;\n                    listItem.stats[ 2 ].value = data.counters.results;\n                } );\n        };\n\n        designService.registerWatcher( context, function ( destroyed ) {\n            items = [];\n            $scope.listData.items = items;\n            designItems = {};\n\n            if ( destroyed ) {\n                console.warn( 'destroy event raised' );\n                // Data not (yet) avaliable.\n                // TODO: display this to the user.\n                return;\n            }\n            console.info( 'initialize event raised' );\n\n            designService.watchDesigns( context, $scope.workspaceId, function ( updateObject ) {\n                var index;\n                //console.warn(updateObject);\n                if ( updateObject.type === 'load' ) {\n                    serviceData2ListItem( updateObject.data );\n                    addConfigurationWatcher( updateObject.id );\n                } else if ( updateObject.type === 'update' ) {\n                    serviceData2ListItem( updateObject.data );\n                } else if ( updateObject.type === 'unload' ) {\n                    if ( designItems.hasOwnProperty( updateObject.id ) ) {\n                        index = items.map( function ( e ) {\n                            return e.id;\n                        } )\n                            .indexOf( updateObject.id );\n                        if ( index > -1 ) {\n                            items.splice( index, 1 );\n                        }\n                        designService.cleanUpRegion( context, context.regionId +\n                            '_watchNbrOfConfigurations_' + updateObject.id );\n                        delete designItems[ updateObject.id ];\n                    }\n                } else {\n                    throw new Error( updateObject );\n                }\n            } )\n                .then( function ( data ) {\n                    var designId;\n                    for ( designId in data.designs ) {\n                        if ( data.designs.hasOwnProperty( designId ) ) {\n                            serviceData2ListItem( data.designs[ designId ] );\n                            addConfigurationWatcher( designId );\n                        }\n                    }\n                } );\n        } );\n    } )\n    .controller( 'DesignEditController', function ( $scope, $modalInstance, data ) {\n        'use strict';\n        $scope.data = {\n            description: data.description,\n            name: data.name\n        };\n\n        $scope.ok = function () {\n            $modalInstance.close( $scope.data );\n        };\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss( 'cancel' );\n        };\n    } )\n    .directive( 'designList', function () {\n        'use strict';\n        return {\n            restrict: 'E',\n            scope: {\n                workspaceId: '=workspaceId',\n                connectionId: '=connectionId',\n                usedByTestBench: '=usedByTestBench'\n            },\n            replace: true,\n            templateUrl: '/cyphy-components/templates/DesignList.html',\n            controller: 'DesignListController'\n        };\n    } );","/*globals angular, console*/\n\n/**\n * @author pmeijer / https://github.com/pmeijer\n */\n\nangular.module( 'cyphy.components' )\n    .controller( 'DesignTreeController', function ( $scope, $window, designService, desertService ) {\n        'use strict';\n        var context,\n            config,\n            treeData,\n            rootNode,\n            avmIds = {},\n            buildTreeStructure;\n\n        console.log( 'DesignTreeController' );\n\n        // Check for valid connectionId and register clean-up on destroy event.\n        if ( $scope.connectionId && angular.isString( $scope.connectionId ) ) {\n            context = {\n                db: $scope.connectionId,\n                regionId: 'DesignTreeController_' + ( new Date() )\n                    .toISOString()\n            };\n            $scope.$on( '$destroy', function () {\n                designService.cleanUpAllRegions( context );\n            } );\n        } else {\n            throw new Error( 'connectionId must be defined and it must be a string' );\n        }\n\n        config = {\n            nodeContextmenuRenderer: function ( e, node ) {\n                return [ {\n                    items: [ {\n                        id: 'create',\n                        label: 'Open in Editor',\n                        disabled: false,\n                        iconClass: 'glyphicon glyphicon-edit',\n                        actionData: {\n                            id: node.id\n                        },\n                        action: function ( data ) {\n                            $window.open( '/?project=ADMEditor&activeObject=' + data.id, '_blank' );\n                        }\n                    } ]\n                } ];\n            },\n            nodeClick: function ( e, node ) {\n                console.log( 'Node was clicked:', node, $scope );\n            },\n            disableManualSelection: true,\n            folderIconClass: 'fa fa-cubes'\n            //            nodeDblclick: function ( e, node ) {\n            //                console.log( 'Node was double-clicked:', node );\n            //            },\n            //            nodeExpanderClick: function ( e, node, isExpand ) {\n            //                console.log( 'Expander was clicked for node:', node, isExpand );\n            //            }\n\n        };\n\n        rootNode = {\n            id: $scope.designId,\n            label: 'Loading Design Space Nodes..',\n            extraInfo: '',\n            children: [],\n            childrenCount: 0\n        };\n\n        treeData = {\n            id: '',\n            label: '',\n            extraInfo: '',\n            unCollapsible: true,\n            children: [\n                rootNode\n            ],\n            childrenCount: 1\n        };\n        $scope.config = config;\n        $scope.treeData = treeData;\n        $scope.$on( 'setSelectedNodes', function ( event, data ) {\n            $scope.config.state.selectedNodes = data;\n        } );\n\n        buildTreeStructure = function ( container, parentTreeNode ) {\n            var key,\n                childData,\n                treeNode;\n            if ( parentTreeNode ) {\n                treeNode = {\n                    id: null,\n                    label: null,\n                    extraInfo: null,\n                    children: [],\n                    childrenCount: 0\n                };\n                parentTreeNode.children.push( treeNode );\n                parentTreeNode.childrenCount += 1;\n            } else {\n                treeNode = rootNode;\n            }\n            treeNode.id = container.id;\n            treeNode.label = container.name;\n            treeNode.extraInfo = container.type;\n            $scope.config.state.expandedNodes.push( treeNode.id );\n            for ( key in container.components ) {\n                if ( container.components.hasOwnProperty( key ) ) {\n                    childData = container.components[ key ];\n                    treeNode.children.push( {\n                        id: childData.id,\n                        label: childData.name\n                    } );\n                    treeNode.childrenCount += 1;\n                    if ( avmIds[ childData.avmId ] ) {\n                        avmIds[ childData.avmId ].push( childData.id );\n                    } else {\n                        avmIds[ childData.avmId ] = [ childData.id ];\n                    }\n                }\n            }\n            for ( key in container.subContainers ) {\n                if ( container.subContainers.hasOwnProperty( key ) ) {\n                    childData = container.subContainers[ key ];\n                    buildTreeStructure( childData, treeNode );\n                }\n            }\n        };\n\n        designService.registerWatcher( context, function ( destroyed ) {\n            if ( destroyed ) {\n                console.warn( 'destroy event raised' );\n                // Data not (yet) avaliable.\n                // TODO: display this to the user.\n                return;\n            }\n            console.info( 'initialize event raised' );\n\n            designService.watchDesignStructure( context, $scope.designId, function ( updateObject ) {\n                console.warn( updateObject );\n            } )\n                .then( function ( data ) {\n                    var rootContainer = data.containers[ data.rootId ],\n                        desertInputData;\n                    buildTreeStructure( rootContainer );\n                    $scope.$emit( 'designTreeLoaded', avmIds );\n                    // FIXME: This part is only here to reuse the data from watchDesignStructure.\n                    // TODO: Find a more suitable location.\n                    desertInputData = desertService.getDesertInputData( data );\n                    $scope.$emit( 'desertInputReady', desertInputData );\n                } );\n        } );\n    } )\n    .directive( 'designTree', function () {\n        'use strict';\n        return {\n            restrict: 'E',\n            scope: {\n                designId: '=designId',\n                connectionId: '=connectionId'\n            },\n            replace: true,\n            templateUrl: '/cyphy-components/templates/DesignTree.html',\n            controller: 'DesignTreeController'\n        };\n    } );","/*globals angular*/\n\n/**\n * @author pmeijer / https://github.com/pmeijer\n */\n\nangular.module( 'cyphy.components' )\n    .controller( 'SimpleModalController', function ( $scope, $modalInstance, data ) {\n        'use strict';\n        $scope.data = {\n            title: data.title,\n            details: data.details\n        };\n\n        $scope.ok = function () {\n            $modalInstance.close();\n        };\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss( 'cancel' );\n        };\n    } );","/*globals angular, console*/\n\n/**\n * @author pmeijer / https://github.com/pmeijer\n */\n\nangular.module( 'cyphy.components' )\n    .controller( 'TestBenchDetailsController', function ( $scope, testBenchService ) {\n        'use strict';\n        var context = {},\n            properties = {},\n            connectors = {},\n            ports = {},\n            watchInterfaces;\n\n        console.log( 'TestBenchDetailsController' );\n        $scope.init = function ( connectionId ) {\n            $scope.connectionId = connectionId;\n            if ( $scope.connectionId && angular.isString( $scope.connectionId ) ) {\n                context = {\n                    db: $scope.connectionId,\n                    regionId: 'TestBenchDetails_' + ( new Date() )\n                        .toISOString()\n                };\n                $scope.$on( '$destroy', function () {\n                    console.log( 'Destroying :', context.regionId );\n                    testBenchService.cleanUpAllRegions( context );\n                } );\n            } else {\n                throw new Error( 'connectionId must be defined and it must be a string' );\n            }\n            $scope.details = {\n                properties: properties,\n                connectors: connectors,\n                ports: ports\n            };\n            watchInterfaces = function ( containerId ) {\n                testBenchService.watchInterfaces( context, containerId, function ( updateObject ) {\n                    // Since watchInterfaces keeps the data up-to-date there shouldn't be a need to do any\n                    // updates here..\n                    console.log( 'watchInterfaces', updateObject );\n                } )\n                    .then( function ( containerInterfaces ) {\n                        $scope.details.properties = containerInterfaces.properties;\n                        $scope.details.connectors = containerInterfaces.connectors;\n                        $scope.details.ports = containerInterfaces.ports;\n                    } );\n            };\n\n            testBenchService.registerWatcher( context, function ( destroy ) {\n                $scope.details = {\n                    properties: {},\n                    connectors: {},\n                    ports: {}\n                };\n                if ( destroy ) {\n                    //TODO: notify user\n                    return;\n                }\n                console.info( 'TestBenchDetailsController - initialize event raised' );\n                testBenchService.watchTestBenchDetails( context, $scope.testBenchId, function ( updatedObj ) {\n                    console.warn( 'watchTestBenchDetails updates', updatedObj );\n                } )\n                    .then( function ( data ) {\n                        if ( data.containerIds.length === 0 ) {\n                            console.warn( 'No container defined!' );\n                        } else if ( data.containerIds.length === 1 ) {\n                            watchInterfaces( data.containerIds[ 0 ] );\n                        } else {\n                            console.error( 'More than one container defined!' );\n                        }\n                    } );\n            } );\n        };\n    } )\n    .directive( 'testBenchDetails', function () {\n        'use strict';\n        return {\n            restrict: 'E',\n            scope: {\n                testBenchId: '=testBenchId'\n            },\n            require: '^testBenchList',\n            link: function ( scope, elem, attr, testBenchListController ) {\n                var connectionId = testBenchListController.getConnectionId();\n                scope.init( connectionId );\n            },\n            replace: true,\n            templateUrl: '/cyphy-components/templates/InterfaceDetails.html',\n            controller: 'TestBenchDetailsController'\n        };\n    } );","/*globals angular, console*/\n\n/**\n * @author pmeijer / https://github.com/pmeijer\n * @author lattmann / https://github.com/lattmann\n */\n\nangular.module( 'cyphy.components' )\n    .controller( 'TestBenchListController', function ( $scope, $window, $location, $modal, growl, testBenchService ) {\n        'use strict';\n        var\n        items = [], // Items that are passed to the item-list ui-component.\n            testBenchItems = {}, // Same items are stored in a dictionary.\n            serviceData2ListItem,\n            config,\n            context;\n\n        console.log( 'TestBenchListController' );\n\n        this.getConnectionId = function () {\n            return $scope.connectionId;\n        };\n\n        // Check for valid connectionId and register clean-up on destroy event.\n        if ( $scope.connectionId && angular.isString( $scope.connectionId ) ) {\n            context = {\n                db: $scope.connectionId,\n                regionId: 'TestBenchListController_' + ( new Date() )\n                    .toISOString()\n            };\n            $scope.$on( '$destroy', function () {\n                testBenchService.cleanUpAllRegions( context );\n            } );\n        } else {\n            throw new Error( 'connectionId must be defined and it must be a string' );\n        }\n\n        // Configuration for the item list ui component.\n        config = {\n\n            sortable: false,\n            secondaryItemMenu: true,\n            detailsCollapsible: true,\n            showDetailsLabel: 'Show details',\n            hideDetailsLabel: 'Hide details',\n\n            // Event handlers\n\n            itemSort: function ( jQEvent, ui ) {\n                console.log( 'Sort happened', jQEvent, ui );\n            },\n\n            itemClick: function ( event, item ) {\n                var newUrl = '/testBench/' + $scope.workspaceId.replace( /\\//g, '-' ) + '/' + item.id.replace(\n                    /\\//g, '-' );\n                console.log( newUrl );\n                $location.path( newUrl );\n            },\n\n            itemContextmenuRenderer: function ( e, item ) {\n                return [ {\n                    items: [ {\n                        id: 'openInEditor',\n                        label: 'Open in Editor',\n                        disabled: false,\n                        iconClass: 'glyphicon glyphicon-edit',\n                        action: function () {\n                            $window.open( '/?project=ADMEditor&activeObject=' + item.id, '_blank' );\n                        }\n                    }, {\n                        id: 'editTestBench',\n                        label: 'Edit',\n                        disabled: false,\n                        iconClass: 'glyphicon glyphicon-pencil',\n                        actionData: {\n                            id: item.id,\n                            description: item.description,\n                            name: item.title,\n                            files: item.data.files,\n                            path: item.data.path,\n                            editContext: {\n                                db: context.db,\n                                regionId: context.regionId + '_watchTestBenches'\n                            },\n                            testBench: item,\n                            modal: $modal\n                        },\n                        action: testBenchService.editTestBenchFn\n                    } ]\n                }, {\n                    items: [ {\n                        id: 'delete',\n                        label: 'Delete',\n                        disabled: false,\n                        iconClass: 'glyphicon glyphicon-remove',\n                        actionData: {\n                            id: item.id,\n                            name: item.title,\n                            context: context,\n                            modal: $modal\n                        },\n                        action: testBenchService.deleteFn\n                    } ]\n                } ];\n            },\n\n            detailsRenderer: function ( /*item*/) {\n                //                item.details = 'My details are here now!';\n            },\n\n            filter: {}\n\n        };\n\n        $scope.config = config;\n        $scope.listData = {\n            items: items\n        };\n\n        // Transform the raw service node data to items for the list.\n        serviceData2ListItem = function ( data ) {\n            var listItem;\n\n            if ( testBenchItems.hasOwnProperty( data.id ) ) {\n                listItem = testBenchItems[ data.id ];\n                listItem.title = data.name;\n                listItem.description = data.description;\n                listItem.data.files = data.files;\n                listItem.data.path = data.path;\n                listItem.data.results = data.results;\n            } else {\n                listItem = {\n                    id: data.id,\n                    title: data.name,\n                    toolTip: 'Open Test-Bench View',\n                    description: data.description,\n                    lastUpdated: {\n                        time: 'N/A', // TODO: get this in the future.\n                        user: 'N/A' // TODO: get this in the future.\n                    },\n                    stats: [],\n                    details: 'Content',\n                    detailsTemplateUrl: 'testBenchDetails.html',\n                    data: {\n                        files: data.files,\n                        path: data.path,\n                        results: data.results\n                    }\n                };\n                // Add the list-item to the items list and the dictionary.\n                items.push( listItem );\n                testBenchItems[ listItem.id ] = listItem;\n            }\n        };\n\n        testBenchService.registerWatcher( context, function ( destroyed ) {\n            items = [];\n            $scope.listData.items = items;\n            testBenchItems = {};\n\n            if ( destroyed ) {\n                console.warn( 'destroy event raised' );\n                // Data not (yet) avaliable.\n                // TODO: display this to the user.\n                return;\n            }\n            console.info( 'initialize event raised' );\n\n            testBenchService.watchTestBenches( context, $scope.workspaceId, function ( updateObject ) {\n                var index;\n                //console.warn(updateObject);\n                if ( updateObject.type === 'load' ) {\n                    serviceData2ListItem( updateObject.data );\n                } else if ( updateObject.type === 'update' ) {\n                    serviceData2ListItem( updateObject.data );\n                } else if ( updateObject.type === 'unload' ) {\n                    if ( testBenchItems.hasOwnProperty( updateObject.id ) ) {\n                        index = items.map( function ( e ) {\n                            return e.id;\n                        } )\n                            .indexOf( updateObject.id );\n                        if ( index > -1 ) {\n                            items.splice( index, 1 );\n                        }\n                        delete testBenchItems[ updateObject.id ];\n                    }\n                } else {\n                    throw new Error( updateObject );\n                }\n            } )\n                .then( function ( data ) {\n                    var testBenchId;\n                    for ( testBenchId in data.testBenches ) {\n                        if ( data.testBenches.hasOwnProperty( testBenchId ) ) {\n                            serviceData2ListItem( data.testBenches[ testBenchId ] );\n                        }\n                    }\n                } );\n        } );\n    } )\n    .controller( 'TestBenchEditController', function ( $scope, $modalInstance, growl, data, fileService ) {\n        'use strict';\n        var fileInfo;\n        $scope.data = {\n            description: data.description,\n            name: data.name,\n            fileInfo: {\n                hash: data.files,\n                name: null,\n                url: fileService.getDownloadUrl( data.files )\n            },\n            path: data.path\n        };\n        fileInfo = $scope.data.fileInfo;\n        if ( fileInfo.hash ) {\n            fileService.getMetadata( fileInfo.hash )\n                .then( function ( metadata ) {\n                    fileInfo.name = metadata.name;\n                } )\n                .\n            catch ( function () {\n                console.error( 'Could not get meta-data for hash', fileInfo.hash );\n            } );\n        }\n\n        $scope.dragOverClass = function ( $event ) {\n            var draggedItems = $event.dataTransfer.items,\n                hasFile;\n            //console.warn(draggedItems);\n            hasFile = draggedItems && draggedItems.length === 1 && draggedItems[ 0 ].kind === 'file';\n\n            return hasFile ? 'bg-success dragover' : 'bg-danger dragover';\n        };\n\n        $scope.onDroppedFiles = function ( $files ) {\n            fileService.saveDroppedFiles( $files, {\n                zip: true\n            } )\n                .then( function ( fInfos ) {\n                    if ( fInfos.length !== 1 ) {\n                        growl.error( 'One zip file must be dropped!' );\n                    } else {\n                        fileInfo.name = fInfos[ 0 ].name;\n                        fileInfo.url = fInfos[ 0 ].name;\n                        fileInfo.hash = fInfos[ 0 ].hash;\n                    }\n                } );\n        };\n\n        $scope.ok = function () {\n            $modalInstance.close( $scope.data );\n        };\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss( 'cancel' );\n        };\n    } )\n    .directive( 'testBenchList', function () {\n        'use strict';\n        return {\n            restrict: 'E',\n            scope: {\n                workspaceId: '=workspaceId',\n                connectionId: '=connectionId'\n            },\n            replace: true,\n            templateUrl: '/cyphy-components/templates/TestBenchList.html',\n            controller: 'TestBenchListController'\n        };\n    } );","/*globals angular, console*/\n\n/**\n * @author pmeijer / https://github.com/pmeijer\n */\n\nangular.module( 'cyphy.components' )\n    .controller( 'WorkersListController', function ( $scope, $interval, growl, executorService ) {\n        'use strict';\n        var intervalPromise = null,\n            consecutiveErrors = 0,\n            maxConsecutiveErrors = 30;\n        $scope.dataModel = {\n            workers: null\n        };\n        $scope.$on( '$destroy', function () {\n            if ( intervalPromise && $interval.cancel( intervalPromise ) ) {\n                console.log( 'Workers interval cancelled' );\n            } else {\n                console.error( 'Could not cancel WorkersInterval.' );\n                console.error( intervalPromise );\n            }\n        } );\n\n        intervalPromise = $interval( function () {\n            executorService.getWorkersInfo()\n                .then( function ( responce ) {\n                    consecutiveErrors = 0;\n                    $scope.dataModel.workers = responce;\n                } )\n                .\n            catch ( function ( err ) {\n                console.error( err );\n                consecutiveErrors += 1;\n                if ( consecutiveErrors >= maxConsecutiveErrors ) {\n                    $interval.cancel( intervalPromise );\n                    growl.error( 'Workers did not respond after ' + maxConsecutiveErrors + ' requests.' );\n                    intervalPromise = null;\n                }\n            } );\n        }, 1000 );\n    } )\n    .directive( 'workersList', function () {\n        'use strict';\n        return {\n            restrict: 'E',\n            scope: {},\n            replace: true,\n            templateUrl: '/cyphy-components/templates/WorkersList.html',\n            controller: 'WorkersListController'\n        };\n    } );","/*globals angular, console*/\n\n/**\n * @author pmeijer / https://github.com/pmeijer\n * @author lattmann / https://github.com/lattmann\n */\n\nangular.module( 'cyphy.components' )\n    .controller( 'WorkspaceListController', function ( $scope, $window, $location, $modal, growl, workspaceService,\n        fileService ) {\n        'use strict';\n        var\n        items = [],\n            workspaceItems = {},\n            config,\n            context,\n            serviceData2ListItem,\n            addCountWatchers;\n\n        console.log( 'WorkspaceListController' );\n\n        if ( $scope.connectionId && angular.isString( $scope.connectionId ) ) {\n            context = {\n                db: $scope.connectionId,\n                regionId: 'WorkspaceListController_' + ( new Date() )\n                    .toISOString()\n            };\n            $scope.$on( '$destroy', function () {\n                workspaceService.cleanUpAllRegions( context );\n            } );\n        } else {\n            throw new Error( 'connectionId must be defined and it must be a string' );\n        }\n\n        config = {\n\n            sortable: false,\n            secondaryItemMenu: true,\n            detailsCollapsible: true,\n            showDetailsLabel: 'Show details',\n            hideDetailsLabel: 'Hide details',\n\n            // Event handlers\n\n            itemSort: function ( jQEvent, ui ) {\n                console.log( 'Sort happened', jQEvent, ui );\n            },\n\n            itemClick: function ( event, item ) {\n                $location.path( '/workspaceDetails/' + item.id.replace( /\\//g, '-' ) );\n            },\n\n            itemContextmenuRenderer: function ( e, item ) {\n                return [ {\n                    items: [ {\n                        id: 'openInEditor',\n                        label: 'Open in Editor',\n                        disabled: false,\n                        iconClass: 'glyphicon glyphicon-edit',\n                        action: function () {\n                            $window.open( '/?project=ADMEditor&activeObject=' + item.id, '_blank' );\n                        }\n                    }, {\n                        id: 'editWorkspace',\n                        label: 'Edit',\n                        disabled: false,\n                        iconClass: 'glyphicon glyphicon-pencil',\n                        actionData: {\n                            id: item.id,\n                            description: item.description,\n                            name: item.title\n                        },\n                        action: function ( data ) {\n                            var editContext = {\n                                db: context.db,\n                                regionId: context.regionId + '_watchWorkspaces'\n                            },\n                                modalInstance = $modal.open( {\n                                    templateUrl: '/cyphy-components/templates/WorkspaceEdit.html',\n                                    controller: 'WorkspaceEditController',\n                                    resolve: {\n                                        data: function () {\n                                            return data;\n                                        }\n                                    }\n                                } );\n\n                            modalInstance.result.then( function ( editedData ) {\n                                var attrs = {\n                                    'name': editedData.name,\n                                    'INFO': editedData.description\n                                };\n                                workspaceService.setWorkspaceAttributes( editContext, data.id, attrs )\n                                    .then( function () {\n                                        console.log( 'Attribute updated' );\n                                    } );\n                            }, function () {\n                                console.log( 'Modal dismissed at: ' + new Date() );\n                            } );\n                        }\n                    }, {\n                        id: 'exportAsXME',\n                        label: 'Export as XME',\n                        disabled: false,\n                        iconClass: 'glyphicon glyphicon-share-alt',\n                        actionData: {\n                            id: item.id,\n                            name: item.title\n                        },\n                        action: function ( data ) {\n                            workspaceService.exportWorkspace( context, data.id )\n                                .then( function ( downloadUrl ) {\n                                    growl.success( 'Workspace package for <a href=\"' + downloadUrl +\n                                        '\">' +\n                                        data.name + '</a> exported.' );\n                                } )\n                                .\n                            catch ( function ( reason ) {\n                                console.error( reason );\n                                growl.error( 'Export failed, see console for details.' );\n                            } );\n                        }\n                    } ]\n                }, {\n                    items: [ {\n                        id: 'delete',\n                        label: 'Delete',\n                        disabled: false,\n                        iconClass: 'glyphicon glyphicon-remove',\n                        actionData: {\n                            id: item.id,\n                            name: item.title\n                        },\n                        action: function ( data ) {\n                            var modalInstance = $modal.open( {\n                                templateUrl: '/cyphy-components/templates/SimpleModal.html',\n                                controller: 'SimpleModalController',\n                                resolve: {\n                                    data: function () {\n                                        return {\n                                            title: 'Delete Workspace',\n                                            details: 'This will delete ' + data.name +\n                                                ' from the project.'\n                                        };\n                                    }\n                                }\n                            } );\n\n                            modalInstance.result.then( function () {\n                                workspaceService.deleteWorkspace( context, data.id );\n                            }, function () {\n                                console.log( 'Modal dismissed at: ' + new Date() );\n                            } );\n                        }\n                    } ]\n                } ];\n            },\n\n            detailsRenderer: function ( /*item*/) {\n                //                item.details = 'My details are here now!';\n            },\n\n            newItemForm: {\n                title: 'Create new workspace',\n                itemTemplateUrl: '/cyphy-components/templates/WorkspaceNewItem.html',\n                expanded: false,\n                controller: function ( $scope ) {\n                    $scope.model = {\n                        droppedFiles: []\n                    };\n                    $scope.dragOverClass = function ( $event ) {\n                        var draggedItems = $event.dataTransfer.items,\n                            i,\n                            hasFile = false;\n                        //                        console.warn(draggedItems);\n                        if ( draggedItems === null ) {\n                            hasFile = false;\n                        } else {\n                            for ( i = 0; i < draggedItems.length; i += 1 ) {\n                                if ( draggedItems[ i ].kind === 'file' ) {\n                                    hasFile = true;\n                                    break;\n                                }\n                            }\n                        }\n\n                        return hasFile ? 'bg-success dragover' : 'bg-danger dragover';\n                    };\n\n                    $scope.onDroppedFiles = function ( $files ) {\n                        fileService.saveDroppedFiles( $files, {\n                            zip: true,\n                            adm: true,\n                            atm: true\n                        } )\n                            .then( function ( fInfos ) {\n                                var i;\n                                console.log( fInfos );\n                                for ( i = 0; i < fInfos.length; i += 1 ) {\n                                    $scope.model.droppedFiles.push( fInfos[ i ] );\n                                }\n                            } );\n                    };\n\n                    $scope.createItem = function ( newItem ) {\n                        var newItemContext = {\n                            db: context.db,\n                            regionId: context.regionId + '_watchWorkspaces'\n                        };\n                        if ( !newItem || !newItem.name ) {\n                            growl.warning( 'Provide a name' );\n                            return;\n                        }\n                        workspaceService.createWorkspace( newItemContext, newItem.name, newItem.description )\n                            .then( function ( folderIds ) {\n                                growl.success( newItem.name + ' created.' );\n                                if ( $scope.model.droppedFiles.length > 0 ) {\n                                    growl.info( 'Importing files..' );\n                                    workspaceService.importFiles( newItemContext, folderIds, $scope.model.droppedFiles )\n                                        .then( function () {\n                                            growl.info( 'Finished importing files!', {\n                                                ttl: 100\n                                            } );\n                                        }, function ( reason ) {\n                                            growl.error( reason );\n                                        }, function ( info ) {\n                                            growl[ info.type ]( info.message );\n                                        } )\n                                        .\n                                    finally( function () {\n                                        config.newItemForm.expanded = false;\n                                        $scope.model.droppedFiles = [];\n                                    } );\n                                } else {\n                                    config.newItemForm.expanded = false;\n                                    $scope.model.droppedFiles = [];\n                                }\n                            } );\n                    };\n                }\n            },\n\n            filter: {}\n\n        };\n\n        $scope.listData = {\n            items: items\n        };\n\n        $scope.config = config;\n\n        serviceData2ListItem = function ( data ) {\n            var workspaceItem;\n\n            if ( workspaceItems.hasOwnProperty( data.id ) ) {\n                workspaceItem = workspaceItems[ data.id ];\n                workspaceItem.title = data.name;\n                workspaceItem.description = data.description;\n            } else {\n                workspaceItem = {\n                    id: data.id,\n                    title: data.name,\n                    toolTip: 'Open Workspace',\n                    description: data.description,\n                    lastUpdated: {\n                        time: new Date(), // TODO: get this\n                        user: 'N/A' // TODO: get this\n                    },\n                    stats: [ {\n                        value: 0,\n                        toolTip: 'Components',\n                        iconClass: 'fa fa-puzzle-piece'\n                    }, {\n                        value: 0,\n                        toolTip: 'Design Spaces',\n                        iconClass: 'fa fa-cubes'\n                    }, {\n                        value: 0,\n                        toolTip: 'Test benches',\n                        iconClass: 'glyphicon glyphicon-saved'\n                    }, {\n                        value: 0,\n                        toolTip: 'Requirements',\n                        iconClass: 'fa fa-bar-chart-o'\n                    } ]\n                };\n\n                workspaceItems[ workspaceItem.id ] = workspaceItem;\n                items.push( workspaceItem );\n            }\n        };\n\n        addCountWatchers = function ( workspaceId ) {\n            workspaceService.watchNumberOfComponents( context, workspaceId, function ( updateData ) {\n                var workspaceData = workspaceItems[ workspaceId ];\n                if ( workspaceData ) {\n                    workspaceData.stats[ 0 ].value = updateData.data;\n                }\n            } )\n                .then( function ( data ) {\n                    var workspaceData = workspaceItems[ workspaceId ];\n                    if ( workspaceData ) {\n                        workspaceData.stats[ 0 ].value = data.count;\n                    }\n                } );\n            workspaceService.watchNumberOfDesigns( context, workspaceId, function ( updateData ) {\n                var workspaceData = workspaceItems[ workspaceId ];\n                if ( workspaceData ) {\n                    workspaceData.stats[ 1 ].value = updateData.data;\n                }\n            } )\n                .then( function ( data ) {\n                    var workspaceData = workspaceItems[ workspaceId ];\n                    if ( workspaceData ) {\n                        workspaceData.stats[ 1 ].value = data.count;\n                    }\n                } );\n            workspaceService.watchNumberOfTestBenches( context, workspaceId, function ( updateData ) {\n                var workspaceData = workspaceItems[ workspaceId ];\n                if ( workspaceData ) {\n                    workspaceData.stats[ 2 ].value = updateData.data;\n                }\n            } )\n                .then( function ( data ) {\n                    var workspaceData = workspaceItems[ workspaceId ];\n                    if ( workspaceData ) {\n                        workspaceData.stats[ 2 ].value = data.count;\n                    }\n                } );\n        };\n\n        workspaceService.registerWatcher( context, function ( destroyed ) {\n            // initialize all variables\n            items = [];\n            $scope.listData = {\n                items: items\n            };\n            workspaceItems = {};\n\n            if ( destroyed ) {\n                console.info( 'destroy event raised' );\n                // Data not (yet) avaliable.\n                // TODO: display this to the user.\n                return;\n            }\n            console.info( 'WorkspaceListController - initialize event raised' );\n            workspaceService.watchWorkspaces( context, function ( updateObject ) {\n                var index;\n\n                if ( updateObject.type === 'load' ) {\n                    serviceData2ListItem( updateObject.data );\n                    addCountWatchers( updateObject.id );\n\n                } else if ( updateObject.type === 'update' ) {\n                    serviceData2ListItem( updateObject.data );\n\n                } else if ( updateObject.type === 'unload' ) {\n                    if ( workspaceItems.hasOwnProperty( updateObject.id ) ) {\n                        index = items.map( function ( e ) {\n                            return e.id;\n                        } )\n                            .indexOf( updateObject.id );\n                        if ( index > -1 ) {\n                            items.splice( index, 1 );\n                        }\n                        workspaceService.cleanUpRegion( context, context.regionId +\n                            '_watchNumberOfComponents_' + updateObject.id );\n                        workspaceService.cleanUpRegion( context, context.regionId +\n                            '_watchNumberOfDesigns_' + updateObject.id );\n                        workspaceService.cleanUpRegion( context, context.regionId +\n                            '_watchNumberOfTestBenches_' + updateObject.id );\n                        delete workspaceItems[ updateObject.id ];\n                    }\n\n                } else {\n                    throw new Error( updateObject );\n\n                }\n            } )\n                .then( function ( data ) {\n                    var workspaceId;\n\n                    for ( workspaceId in data.workspaces ) {\n                        if ( data.workspaces.hasOwnProperty( workspaceId ) ) {\n                            serviceData2ListItem( data.workspaces[ workspaceId ] );\n                            addCountWatchers( workspaceId );\n                        }\n                    }\n                } );\n        } );\n    } )\n    .controller( 'WorkspaceEditController', function ( $scope, $modalInstance, data ) {\n        'use strict';\n        $scope.data = {\n            description: data.description,\n            name: data.name\n        };\n\n        $scope.ok = function () {\n            $modalInstance.close( $scope.data );\n        };\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss( 'cancel' );\n        };\n    } )\n    .directive( 'workspaceList', function () {\n        'use strict';\n        return {\n            restrict: 'E',\n            replace: true,\n            scope: {\n                connectionId: '=connectionId'\n            },\n            templateUrl: '/cyphy-components/templates/WorkspaceList.html',\n            controller: 'WorkspaceListController'\n        };\n    } );","'use strict';\n\nmodule.exports = function() {\n    return {\n        'capacitors': 'capacitor',\n        'resistors': 'resistor',\n        'diodes': 'diode',\n        'inductors': 'inductor'\n        //'transistors': 'jFetP'\n    };\n};","/*globals angular, ga */\n\n'use strict';\n\nmodule.exports = function (symbolManager, $log, $rootScope) {\n\n    var config,\n\n        treeNavigatorData,\n        treeNodesById,\n        childNodes,\n\n        initializeWithNodes,\n        upsertItem,\n        removeItem,\n        showNode,\n        upsertComponentInterface,\n\n        parentNodes,\n\n        createParentNode,\n        parseClassifications,\n        parseNode,\n        parseNodeName,\n        parseClassName,\n        parseNodeExtraInfo,\n        findSymbolForClassNode,\n\n        organizeTree,\n\n        getNodeContextmenu,\n        getComponentById,\n\n        mapFromClassNamesToSymbolTypes;\n\n    mapFromClassNamesToSymbolTypes = require('./ClassNamesToSymbolTypes')();\n\n    treeNodesById = {};\n\n    childNodes = [];\n\n    $log.debug('In ComponentBrowserService');\n\n    getNodeContextmenu = function (node) {\n\n        var contextMenu;\n\n\n        if (childNodes.indexOf(node) > -1) {\n\n            contextMenu = [\n                {\n                    items: [\n                        {\n                            id: 'addToDesign',\n                            label: 'Add to design',\n                            iconClass: 'fa fa-plus-circle',\n                            action: function() {\n\n                                ga('send', 'event', 'avmComponent', 'createFromContextmenu');\n\n                                $rootScope.$emit('componentInstantiationMustBeDone', node);\n                            }\n                        }\n                    ]\n                }\n            ];\n\n        }\n\n        return contextMenu;\n\n    };\n\n\n    config = {\n\n//        scopeMenu: [\n//            {\n//                items: [\n//                    {\n//                        id: 'project',\n//                        label: 'Project Hierarchy',\n//                        action: function () {\n//                            config.state.activeScope = 'project';\n//                            config.selectedScope = config.scopeMenu[ 0 ].items[ 0 ];\n//                        }\n//                    },\n//                    {\n//                        id: 'composition',\n//                        label: 'Composition',\n//                        action: function () {\n//                            config.state.activeScope = 'composition';\n//                            config.selectedScope = config.scopeMenu[ 0 ].items[ 1 ];\n//                        }\n//                    }\n//                ]\n//            }\n//\n//        ],\n//\n        extraInfoTemplateUrl: '/cyphy-components/templates/componentExtraInfo.html',\n\n        nodeClassGetter: function (node) {\n\n            var result;\n\n            result = '';\n\n            if (node.childrenCount) {\n                result = 'parent-node';\n            } else {\n                result = 'leaf-node';\n            }\n\n            if (node.symbol) {\n                result += ' has-symbol';\n            }\n\n            return result;\n        },\n\n        preferencesMenu: [\n            {\n                items: [\n                    {\n                        id: 'expandAll',\n                        label: 'Expand all',\n                        iconClass: 'fa fa-plus-square',\n                        action: function () {\n\n                            treeNavigatorData.config.state = treeNavigatorData.config.state || {};\n                            treeNavigatorData.config.state.expandedNodes = treeNavigatorData.config.state.expandedNodes || [];\n\n                            angular.forEach(parentNodes, function (parentNode) {\n\n                                if (treeNavigatorData.config.state.expandedNodes.indexOf(parentNode.id) === -1) {\n                                    treeNavigatorData.config.state.expandedNodes.push(parentNode.id);\n                                }\n\n                            });\n\n                        }\n                    },\n\n                    {\n                        id: 'collapseAll',\n                        label: 'Collapse all',\n                        iconClass: 'fa fa-minus-square',\n                        action: function () {\n\n                            treeNavigatorData.config.state = treeNavigatorData.config.state || {};\n                            treeNavigatorData.config.state.expandedNodes = [];\n\n                        }\n                    }\n//\n//                    {\n//                        id: 'preferences 3',\n//                        label: 'Preferences 3',\n//                        menu: [\n//                            {\n//                                items: [\n//                                    {\n//                                        id: 'sub_preferences 1',\n//                                        label: 'Sub preferences 1'\n//                                    },\n//                                    {\n//                                        id: 'sub_preferences 2',\n//                                        label: 'Sub preferences 2',\n//                                        action: function (data) {\n//                                            $log.log(data);\n//                                        }\n//                                    }\n//                                ]\n//                            }\n//                        ]\n//                    }\n                ]\n            }\n        ],\n\n        showRootLabel: false,\n\n        // Tree Event callbacks\n\n        nodeClick: function (/*e, node*/) {\n            ///console.log('Node was clicked:', node);\n        },\n\n        nodeDblclick: function (/*e, node*/) {\n            //console.log('Node was double-clicked:', node);\n        },\n\n        nodeContextmenuRenderer: function (e, node) {\n            //console.log('Contextmenu was triggered for node:', node);\n\n            return getNodeContextmenu(node);\n\n        },\n\n        nodeExpanderClick: function (/*e, node, isExpand*/) {\n            //console.log('Expander was clicked for node:', node, isExpand);\n        }\n\n    };\n\n    createParentNode = function (id, descriptor, parentId) {\n\n        var node,\n            parentNode;\n\n        node = parentNodes[id];\n\n        if (!angular.isObject(node)) {\n\n            node = {\n                id: id,\n                children: [],\n                childrenCount: 0\n            };\n\n            angular.extend(node, descriptor);\n\n            treeNodesById[id] = node;\n            parentNodes[id] = node;\n\n            if (parentId) {\n\n                parentNode = parentNodes[parentId];\n                node.parentNode = parentNode;\n\n                if (parentNode) {\n\n                    parentNode.children.push(node);\n                    parentNode.childrenCount++;\n\n                }\n\n            }\n\n        }\n\n        return node;\n    };\n\n\n    parseClassName = function (crappyName) {\n\n        var result;\n\n        result = crappyName.replace(/_/g, ' ');\n\n        return result;\n\n    };\n\n    findSymbolForClassNode = function(classNode, rawClassName) {\n\n        var symbolType,\n            symbol;\n\n        if (angular.isObject(symbolManager)) {\n\n            symbolType = mapFromClassNamesToSymbolTypes[rawClassName];\n\n            if (symbolType) {\n\n                symbol = symbolManager.getSymbol(symbolType);\n\n                classNode.symbol = symbol;\n                classNode.extraInfo = classNode.extraInfo || {};\n\n                classNode.extraInfo.symbol = symbol;\n\n            }\n\n        }\n\n\n    };\n\n\n    parseClassifications = function (classifications) {\n        var classes,\n            classId,\n            classNode,\n            parentId,\n            i;\n\n        if (classifications) {\n\n            classes = classifications.split('.');\n\n        } else {\n\n            classes = [ 'unclassified' ];\n\n        }\n\n        parentId = treeNavigatorData.data.id;\n\n        for (i = 0; i < classes.length; i++) {\n\n            classId = parentId + '_' + classes[i];\n\n            classNode = createParentNode(\n                classId,\n                {\n                    label: parseClassName(classes[i]),\n                    dropChannel: 'noDrop'\n                },\n                parentId\n            );\n\n            parentId = classId;\n\n            findSymbolForClassNode(classNode, classes[i]);\n\n        }\n\n        return classNode;\n\n    };\n\n\n    parseNodeName = function (crappyName) {\n\n        var result;\n\n        result = crappyName.replace(/_/g, ' ');\n\n        return result;\n\n    };\n\n\n    parseNode = function (nodeDescriptor) {\n\n        var node,\n            parentNode,\n            label;\n\n        node = treeNodesById[ nodeDescriptor.id ];\n\n        if (!angular.isObject(node)) {\n\n            parentNode = parseClassifications(nodeDescriptor.classifications);\n\n            label = parseNodeName(nodeDescriptor.name);\n\n            node = {\n                id: nodeDescriptor.id,\n                label: label,\n                description: null,\n                parentNode: parentNode,\n                draggable: true,\n                dragChannel: 'component',\n                dropChannel: 'noDrop'\n            };\n\n            childNodes.push(node);\n\n            treeNodesById[node.id] = node;\n\n            parentNode.children.push(node);\n            parentNode.childrenCount++;\n\n        }\n\n        //console.log(nodeDescriptor);\n\n    };\n\n\n    organizeTree = function (node) {\n\n        var i,\n            totalChildrenCount;\n\n\n        if (node.childrenCount > 0) {\n            totalChildrenCount = 0;\n        } else {\n            totalChildrenCount = 1;\n        }\n\n        if (angular.isArray(node.children)) {\n\n            node.children.sort(function(a, b){\n\n                if(a.label < b.label) {\n                    return -1;\n                }\n\n                if(a.label > b.label) {\n                    return 1;\n                }\n\n                return 0;\n            });\n\n            for (i=0; i < node.children.length; i++ ) {\n                totalChildrenCount += organizeTree( node.children[ i ] );\n            }\n            node.totalChildrenCount = totalChildrenCount;\n\n            if (node.totalChildrenCount > 0) {\n\n                node.extraInfo = node.extraInfo || {};\n\n                node.extraInfo.totalChildrenCount = node.totalChildrenCount;\n            }\n\n        }\n\n        return totalChildrenCount;\n\n    };\n\n    initializeWithNodes = function (nodes) {\n\n        var rootNode;\n\n        treeNodesById = {};\n        parentNodes = {};\n        childNodes = [];\n\n        rootNode = createParentNode(\n            'root',\n            {\n                label: 'Root node'\n            }\n        );\n\n        treeNavigatorData.data = rootNode;\n        treeNavigatorData.childNodes = childNodes;\n\n        angular.forEach(nodes, function (node) {\n\n            parseNode(node);\n\n        });\n\n        organizeTree(treeNavigatorData.data);\n\n    };\n\n    upsertItem = function (/*data*/) {\n\n        //TODO: complete this\n\n//        var treeNode;\n//\n//        console.log(data);\n//\n//        if (treeNodesById[ data.id ]) {\n//\n//            treeNode = treeNodesById[ data.id ];\n////            listItem.title = data.name;\n////            listItem.description = data.description;\n////            listItem.data.resource = data.resource;\n//\n//        } else {\n//\n//            treeNode = {\n//\n//            };\n//\n//            treeNodesById[ data.id ] = treeNode;\n//\n//        }\n\n    };\n\n    removeItem = function () {\n        // TODO: complete this\n    };\n\n    showNode = function(nodeId) {\n\n        // TODO: make it part of TreeNaviagtor\n\n        var node,\n            parentNode;\n\n        node = treeNodesById[nodeId];\n\n        if (angular.isObject(node)) {\n\n            parentNode = node.parentNode;\n\n            while (parentNode) {\n\n                if (treeNavigatorData.config.state.expandedNodes.indexOf(parentNode.id) === -1) {\n                    treeNavigatorData.config.state.expandedNodes.push(parentNode.id);\n                }\n\n                parentNode = parentNode.parentNode;\n\n            }\n\n            treeNavigatorData.config.state.selectedNodes = [ nodeId ];\n        }\n    };\n\n    parseNodeExtraInfo = function(node) {\n\n        var extraInfo;\n\n        if (angular.isObject(node) && angular.isObject(node.interfaces)) {\n\n//            console.log(node.interfaces);\n\n            if (angular.isObject(node.interfaces.properties)) {\n\n                extraInfo = extraInfo || {};\n\n                extraInfo.properties = {};\n\n                angular.forEach(node.interfaces.properties, function(property, key) {\n\n                    extraInfo.properties[key] = property;\n\n                });\n\n//                console.log(extraInfo.properties);\n\n            }\n\n        }\n\n        node.extraInfo = extraInfo;\n\n    };\n\n    upsertComponentInterface = function(nodeId, interfaces) {\n\n        var node;\n\n        node = treeNodesById[nodeId];\n\n        if (angular.isObject(node)) {\n\n            interfaces = interfaces || {};\n\n            node.interfaces = interfaces;\n\n            parseNodeExtraInfo(node);\n\n        }\n\n    };\n\n    getComponentById = function(nodeId) {\n\n        return treeNodesById[nodeId];\n\n    };\n\n\n    treeNavigatorData = {\n        data: {},\n        config: config,\n        childNodes: childNodes\n    };\n\n\n    this.treeNavigatorData = treeNavigatorData;\n\n    this.initializeWithNodes = initializeWithNodes;\n    this.upsertItem = upsertItem;\n    this.removeItem = removeItem;\n    this.showNode = showNode;\n    this.upsertComponentInterface = upsertComponentInterface;\n\n    this.getComponentById = getComponentById;\n\n};\n","/*globals angular, $, ga*/\n'use strict';\n\nvar ComponentBrowserService = require('./classes/ComponentBrowserService.js');\n\n\nangular.module( 'cyphy.components' )\n    .service( 'componentBrowserService', ComponentBrowserService )\n    .controller( 'ComponentBrowserController',\n    function (\n        $scope, $window, $modal, growl, componentService, fileService, $log, componentBrowserService, $timeout\n    ) {\n        var\n            addInterfaceWatcher,\n\n            context;\n\n\n        this.getConnectionId = function () {\n            return $scope.connectionId;\n        };\n\n        // Check for valid connectionId and register clean-up on destroy event.\n        if ( $scope.connectionId && angular.isString( $scope.connectionId ) ) {\n            context = {\n                db: $scope.connectionId,\n                regionId: 'ComponentListController_' + ( new Date() )\n                    .toISOString()\n            };\n            $scope.$on( '$destroy', function () {\n                componentService.cleanUpAllRegions( context );\n            } );\n        } else {\n            throw new Error( 'connectionId must be defined and it must be a string' );\n        }\n\n        // Tree setup\n\n\n        $scope.treeNavigatorData = componentBrowserService.treeNavigatorData;\n\n        $timeout(function(){\n            $scope.adjustTreeNavigatorSize();\n        }, 20);\n\n\n        // Getting the data\n\n        addInterfaceWatcher = function (componentId) {\n\n            componentService.watchInterfaces(context, componentId, function (updateData) {\n\n                componentBrowserService.upsertComponentInterface(componentId, updateData);\n\n            })\n                .then(function (data) {\n\n                    componentBrowserService.upsertComponentInterface(componentId, data);\n\n                });\n        };\n\n\n        componentService.registerWatcher( context, function ( destroyed ) {\n\n            if ( destroyed ) {\n                $log.warn( 'destroy event raised' );\n                return;\n            }\n\n            $log.debug( 'initialize event raised' );\n\n            componentService.watchComponents( context, $scope.workspaceId, $scope.avmIds, function (\n                updateObject ) {\n\n                if ( updateObject.type === 'load' ) {\n\n                    componentBrowserService.upsertItem( updateObject.data );\n\n                    addInterfaceWatcher( updateObject.id );\n\n                } else if ( updateObject.type === 'update' ) {\n\n                    componentBrowserService.upsertItem( updateObject.data );\n\n                } else if ( updateObject.type === 'unload' ) {\n\n                    componentBrowserService.removeItem( updateObject.id );\n\n                } else {\n                    throw new Error( updateObject );\n                }\n            } )\n                .then( function ( data ) {\n                    var componentId;\n\n\n                    componentBrowserService.initializeWithNodes(data.components);\n\n                    for ( componentId in data.components ) {\n                        if ( data.components.hasOwnProperty( componentId ) ) {\n\n                            addInterfaceWatcher( componentId );\n\n                        }\n                    }\n                } );\n        } );\n\n        $scope.$watch('componentSearchSelection', function(selectedObject) {\n\n            var node;\n\n            if (angular.isObject(selectedObject)) {\n\n                node = selectedObject.originalObject;\n\n                componentBrowserService.showNode(node.id);\n\n                $timeout(function(){\n\n                    var $nodeLi,\n                        y;\n\n                    if ($scope.$treeNavigatorNodesElement) {\n                        $nodeLi = $scope.$treeNavigatorNodesElement.find('[title=\"' + node.label + '\"]');\n\n                        if ($nodeLi.length) {\n\n                            y = ($nodeLi.offset().top -\n                                $scope.$treeNavigatorNodesElement.offset().top) +\n                                $scope.$treeNavigatorNodesElement.scrollTop();\n\n                            $scope.$treeNavigatorNodesElement.animate({\n                               scrollTop: y\n                            }, 500);\n\n                        }\n                    }\n\n                    ga('send', 'event', 'componentBrowser', 'search', node.label);\n\n                }, 100);\n            }\n\n        });\n\n    } )\n    .directive( 'componentBrowser', function ($window) {\n\n        return {\n            restrict: 'E',\n            scope: {\n                workspaceId: '=workspaceId',\n                connectionId: '=connectionId',\n                avmIds: '=avmIds',\n                autoHeight: '=autoHeight'\n            },\n            replace: true,\n            templateUrl: '/cyphy-components/templates/componentBrowser.html',\n            controller: 'ComponentBrowserController',\n            link: function(scope, element) {\n\n                var $treeNavigatorNodesElement,\n                    $parent,\n                    headerPartHeight,\n                    $windowElement;\n\n                $parent = $(element.parent());\n\n                scope.adjustTreeNavigatorSize = function() {\n\n                    var parentHeight;\n\n                    if (scope.autoHeight) {\n\n                        if (headerPartHeight === undefined) {\n                            headerPartHeight = element.find('.header-part').outerHeight();\n                        }\n\n                        $treeNavigatorNodesElement = $treeNavigatorNodesElement || element.find('nav > div.tree-navigator-nodes');\n                        scope.$treeNavigatorNodesElement = $treeNavigatorNodesElement;\n\n\n                        if ($treeNavigatorNodesElement.length) {\n\n                            parentHeight = $parent.innerHeight();\n\n                            //console.log('--------------', parentHeight-headerPartHeight-10);\n\n                            $treeNavigatorNodesElement.outerHeight(parentHeight-headerPartHeight-10);\n\n                        }\n                    }\n                };\n\n                $windowElement = angular.element($window);\n\n                $windowElement.bind(\n                    'resize', scope.adjustTreeNavigatorSize\n                );\n\n                scope.$on('destroy', function(){\n\n                    $windowElement.unbind(\n                        'resize', scope.adjustTreeNavigatorSize\n                    );\n\n                });\n            }\n        };\n    } );\n","/*globals angular*/\n'use strict';\n\nangular.module('cyphy.components')\n    .directive('propertyList', function () {\n\n        return {\n            restrict: 'E',\n            scope: {\n                properties: '='\n            },\n            replace: true,\n            templateUrl: '/cyphy-components/templates/propertyList.html'\n        };\n    });","/*globals angular, console*/\n\n/**\n * This service contains functionality shared amongst the different services. It should not be used\n * directly in a controller - only as part of other services.\n *\n * @author pmeijer / https://github.com/pmeijer\n */\n\n\nangular.module( 'cyphy.services' )\n    .service( 'baseCyPhyService', function ( $q, $timeout, nodeService ) {\n        'use strict';\n        var self = this;\n        /**\n         * Registers a watcher (controller) to the service. Callback function is called when nodes become available or\n         * when they became unavailable. These are also called directly with the state of the nodeService.\n         * @param {string} watchers - Watchers from the service utilizing this function.\n         * @param {object} parentContext - context of controller.\n         * @param {string} parentContext.db - Database connection.\n         * @param {string} parentContext.regionId - Region of the controller (all spawned regions are grouped by this).\n         * @param {function} fn - Called with true when there are no nodes unavailable and false when there are.\n         */\n        this.registerWatcher = function ( watchers, parentContext, fn ) {\n            nodeService.on( parentContext.db, 'initialize', function () {\n                // This should be enough, the regions will be cleaned up in nodeService.\n                watchers[ parentContext.regionId ] = {};\n                fn( false );\n            } );\n            nodeService.on( parentContext.db, 'destroy', function () {\n                // This should be enough, the regions should be cleaned up in nodeService.\n                if ( watchers[ parentContext.regionId ] ) {\n                    delete watchers[ parentContext.regionId ];\n                }\n                fn( true );\n            } );\n        };\n\n        /**\n         * Removes all watchers spawned from parentContext, this should typically be invoked when the controller is destroyed.\n         * @param {string} watchers - Watchers from the service utilizing this function.\n         * @param {object} parentContext - context of controller.\n         * @param {string} parentContext.regionId - Region of the controller (all spawned regions are grouped by this).\n         */\n        this.cleanUpAllRegions = function ( watchers, parentContext ) {\n            var childWatchers,\n                key;\n            if ( watchers[ parentContext.regionId ] ) {\n                childWatchers = watchers[ parentContext.regionId ];\n                for ( key in childWatchers ) {\n                    if ( childWatchers.hasOwnProperty( key ) ) {\n                        nodeService.cleanUpRegion( childWatchers[ key ].db, childWatchers[ key ].regionId );\n                    }\n                }\n                delete watchers[ parentContext.regionId ];\n            } else {\n                console.log( 'Nothing to clean-up..' );\n            }\n        };\n\n        /**\n         * Removes specified watcher (regionId)\n         * @param {string} watchers - Watchers from the service utilizing this function.\n         * @param {object} parentContext - context of controller.\n         * @param {string} parentContext.db - Database connection of both parent and region to be deleted.\n         * @param {string} parentContext.regionId - Region of the controller (all spawned regions are grouped by this).\n         * @param {string} regionId - Region id of the spawned region that should be deleted.\n         */\n        this.cleanUpRegion = function ( watchers, parentContext, regionId ) {\n            if ( watchers[ parentContext.regionId ] ) {\n                if ( watchers[ parentContext.regionId ][ regionId ] ) {\n                    nodeService.cleanUpRegion( parentContext.db, regionId );\n                    delete watchers[ parentContext.regionId ][ regionId ];\n                } else {\n                    console.log( 'Nothing to clean-up..' );\n                }\n            } else {\n                console.log( 'Cannot clean-up region since parentContext is not registered..', parentContext );\n            }\n        };\n\n        /**\n         * Updates the given attributes of a node.\n         * @param {object} context - Must exist within watchers and contain the component.\n         * @param {string} context.db - Must exist within watchers and contain the component.\n         * @param {string} context.regionId - Must exist within watchers and contain the component.\n         * @param {string} id - Path to node.\n         * @param {object} attrs - Keys are names of attributes and values are the wanted value.\n         */\n        this.setNodeAttributes = function ( context, id, attrs ) {\n            var deferred = $q.defer();\n            if ( Object.keys( attrs )\n                .length === 0 ) {\n                console.log( 'no attribute to update' );\n                deferred.resolve();\n            }\n            nodeService.loadNode( context, id )\n                .then( function ( nodeObj ) {\n                    var keys = Object.keys( attrs ),\n                        counter = keys.length,\n                        setAttr = function () {\n                            counter -= 1;\n                            nodeObj.setAttribute( keys[ counter ], attrs[ keys[ counter ] ],\n                                'webCyPhy - setNodeAttributes' );\n                            if ( counter <= 0 ) {\n                                deferred.resolve();\n                            } else {\n                                setAttr();\n                            }\n                        };\n                    setAttr();\n                } );\n\n            return deferred.promise;\n        };\n\n        /** TODO: Watch domainPorts inside Connectors\n         *  Watches the interfaces (Properties, Connectors and DomainPorts) of a model.\n         * @param {string} watchers - Watchers from the service utilizing this function.\n         * @param {object} parentContext - context of controller.\n         * @param {string} id - Path to model.\n         * @param {function} updateListener - invoked when there are (filtered) changes in data.\n         * @returns {Promise} - Returns data when resolved.\n         */\n        this.watchInterfaces = function ( watchers, parentContext, id, updateListener ) {\n            var deferred = $q.defer(),\n                regionId = parentContext.regionId + '_watchInterfaces_' + id,\n                context = {\n                    db: parentContext.db,\n                    regionId: regionId\n                },\n                data = {\n                    regionId: regionId,\n                    id: id,\n                    properties: {}, //property:  {id: <string>, name: <string>, dataType: <string>, valueType <string>, derived <boolean>}\n                    connectors: {}, //connector: {id: <string>, name: <string>, domainPorts: <object> }\n                    ports: {} //port:      {id: <string>, name: <string>, type: <string>, class: <string> }\n                },\n                triggerUpdateListener = function ( id, data, eventType ) {\n                    $timeout( function () {\n                        updateListener( {\n                            id: id,\n                            type: eventType,\n                            data: data\n                        } );\n                    } );\n                },\n                addNewProperty = function ( id, node ) {\n                    data.properties[ id ] = {\n                        id: id,\n                        name: node.getAttribute( 'name' ),\n                        dataType: node.getAttribute( 'DataType' ),\n                        valueType: node.getAttribute( 'ValueType' ),\n                        value: node.getAttribute( 'Value' ),\n                        unit: node.getAttribute( 'Unit' ),\n                        isProminent: node.getAttribute( 'IsProminent' ),\n\n                        derived: isPropertyDerived( node )\n                    };\n                    node.onUpdate( onPropertyUpdate );\n                    node.onUnload( onPropertyUnload );\n                },\n                onPropertyUpdate = function ( id ) {\n                    var keyToAttr = {\n                        name: 'name',\n                        dataType: 'DataType',\n                        valueType: 'ValueType',\n                        value: 'Value',\n                        unit: 'Unit',\n                        isProminent: 'IsProminent'\n                    },\n                        newDerived = isPropertyDerived( this ),\n                        hadChanges = self.checkForAttributeUpdates( data.properties[ id ], this, keyToAttr );\n\n                    if ( newDerived !== data.properties[ id ].derived ) {\n                        data.properties[ id ].derived = newDerived;\n                        hadChanges = true;\n                    }\n\n                    if ( hadChanges ) {\n                        triggerUpdateListener( id, data, 'update' );\n                    }\n                },\n                onPropertyUnload = function ( id ) {\n                    delete data.properties[ id ];\n                    triggerUpdateListener( id, null, 'unload' );\n                },\n                addNewConnector = function ( id, node ) {\n                    data.connectors[ id ] = {\n                        id: id,\n                        name: node.getAttribute( 'name' ),\n                        position: node.getRegistry( 'position' ),\n                        domainPorts: {}\n                    };\n                    node.onUpdate( onConnectorUpdate );\n                    node.onUnload( onConnectorUnload );\n                    ///queueList.push(childNode.loadChildren(childNode));\n                },\n                onConnectorUpdate = function ( id ) {\n\n                    var connector,\n\n                        newName,\n                        newPos,\n\n                        hadChanges;\n\n                    hadChanges = false;\n\n                    connector = data.connectors[ id ];\n\n                    newName = this.getAttribute( 'name' );\n                    newPos = this.getRegistry( 'position' );\n\n\n                    if ( newName !== connector.name ) {\n                        connector.name = newName;\n                        hadChanges = true;\n                    }\n\n                    if ( newPos.x !== connector.position.x || newPos.y !== connector.position.y ) {\n                        connector.position = newPos;\n                        hadChanges = true;\n                    }\n\n                    if ( hadChanges ) {\n                        triggerUpdateListener( id, data, 'update' );\n                    }\n                },\n                onConnectorUnload = function ( id ) {\n                    delete data.connectors[ id ];\n                    triggerUpdateListener( id, null, 'unload' );\n                },\n                addNewPort = function ( id, node ) {\n                    data.ports[ id ] = {\n                        id: id,\n                        name: node.getAttribute( 'name' ),\n                        type: node.getAttribute( 'Type' ),\n                        class: node.getAttribute( 'Class' )\n                    };\n                    node.onUpdate( onPortUpdate );\n                    node.onUnload( onPortUnload );\n                },\n                onPortUpdate = function ( id ) {\n                    var keyToAttr = {\n                        name: 'name',\n                        type: 'Type',\n                        class: 'Class'\n                    },\n                        hadChanges = self.checkForAttributeUpdates( data.ports[ id ], this, keyToAttr );\n\n                    if ( hadChanges ) {\n                        triggerUpdateListener( id, data, 'update' );\n                    }\n                },\n                onPortUnload = function ( id ) {\n                    delete data.ports[ id ];\n                    triggerUpdateListener( id, null, 'unload' );\n                },\n                isPropertyDerived = function ( node ) {\n                    return node.getCollectionPaths( 'dst' )\n                        .length > 0;\n                };\n\n            watchers[ parentContext.regionId ] = watchers[ parentContext.regionId ] || {};\n            watchers[ parentContext.regionId ][ context.regionId ] = context;\n            nodeService.getMetaNodes( context )\n                .then( function ( meta ) {\n                    nodeService.loadNode( context, id )\n                        .then( function ( modelNode ) {\n                            modelNode.loadChildren()\n                                .then( function ( children ) {\n                                    var i,\n                                        childId,\n                                        metaName,\n                                        queueList = [],\n                                        childNode;\n                                    for ( i = 0; i < children.length; i += 1 ) {\n                                        childNode = children[ i ];\n                                        childId = childNode.getId();\n                                        metaName = childNode.getMetaTypeName( meta );\n                                        if ( metaName === 'Property' ) {\n                                            addNewProperty( childId, childNode );\n                                        } else if ( metaName === 'Connector' ) {\n                                            addNewConnector( childId, childNode );\n                                        } else if ( metaName === 'DomainPort' ) {\n                                            addNewPort( childId, childNode );\n                                        }\n                                    }\n                                    modelNode.onNewChildLoaded( function ( newChild ) {\n                                        childId = newChild.getId();\n                                        metaName = newChild.getMetaTypeName( meta );\n                                        if ( metaName === 'Property' ) {\n                                            addNewProperty( childId, newChild );\n                                            triggerUpdateListener( childId, data, 'load' );\n                                        } else if ( metaName === 'Connector' ) {\n                                            addNewConnector( childId, newChild );\n                                            triggerUpdateListener( childId, data, 'load' );\n                                        } else if ( metaName === 'DomainPort' ) {\n                                            addNewPort( childId, newChild );\n                                            triggerUpdateListener( childId, data, 'load' );\n                                        }\n                                    } );\n\n                                    if ( queueList.length === 0 ) {\n                                        deferred.resolve( data );\n                                    } else {\n                                        $q.all( queueList )\n                                            .then( function () {\n                                                deferred.resolve( data );\n                                            } );\n                                    }\n                                } );\n                        } );\n                } );\n\n            return deferred.promise;\n        };\n\n        /**\n         * Checks and updates the values in data with the new attribute values in node.\n         * @param {Object} data - Where the attribute values are stored.\n         * @param {NodeObj} node - Node that had update events.\n         * @param {Object} keyToAttr - Maps the key in data to the attribute string.\n         * @returns {boolean} - True if there were any changes.\n         */\n        this.checkForAttributeUpdates = function ( data, node, keyToAttr ) {\n            var key,\n                newAttr,\n                hadChanges = false;\n            for ( key in keyToAttr ) {\n                if ( keyToAttr.hasOwnProperty( key ) ) {\n                    newAttr = node.getAttribute( keyToAttr[ key ] );\n                    if ( newAttr !== data[ key ] ) {\n                        data[ key ] = newAttr;\n                        hadChanges = true;\n                    }\n                }\n            }\n            return hadChanges;\n        };\n    } );","/*globals angular, console*/\n\n\n/**\n * @author pmeijer / https://github.com/pmeijer\n * @author lattmann / https://github.com/lattmann\n */\n\n\nangular.module( 'cyphy.services' )\n    .service( 'componentService', function ( $q, $timeout, nodeService, baseCyPhyService ) {\n        'use strict';\n        var watchers = {};\n\n        /**\n         * Removes the component from the context (db/project/branch).\n         * @param context - context of controller, N.B. does not need to specify region.\n         * @param componentId\n         * @param [msg] - Commit message.\n         */\n        this.deleteComponent = function ( context, componentId, msg ) {\n            var message = msg || 'ComponentService.deleteComponent ' + componentId;\n            nodeService.destroyNode( context, componentId, message );\n        };\n\n        /**\n         * Updates the given attributes\n         * @param {object} context - Must exist within watchers and contain the component.\n         * @param {string} context.db - Must exist within watchers and contain the component.\n         * @param {string} context.regionId - Must exist within watchers and contain the component.\n         * @param {string} componentId - Path to component.\n         * @param {object} attrs - Keys are names of attributes and values are the wanted value.\n         */\n        this.setComponentAttributes = function ( context, componentId, attrs ) {\n            return baseCyPhyService.setNodeAttributes( context, componentId, attrs );\n        };\n\n        /**\n         *  Watches all components (existence and their attributes) of a workspace.\n         * @param parentContext - context of controller.\n         * @param workspaceId\n         * @param updateListener - invoked when there are (filtered) changes in data.  Data is an object in data.components.\n         * @param {object} avmIds - An optional filter that only watches components with IDs that evaluates to true.\n         * @returns {Promise} - Returns data when resolved.\n         */\n        this.watchComponents = function ( parentContext, workspaceId, avmIds, updateListener ) {\n            var deferred = $q.defer(),\n                regionId = parentContext.regionId + '_watchComponents',\n                context = {\n                    db: parentContext.db,\n                    regionId: regionId\n                },\n                data = {\n                    regionId: regionId,\n                    components: {} // component {id: <string>, name: <string>, description: <string>,\n                    //            avmId: <string>, resource: <hash|string>, classifications: <string> }\n                },\n                onUpdate = function ( id ) {\n                    var newName = this.getAttribute( 'name' ),\n                        newDesc = this.getAttribute( 'INFO' ),\n                        newAvmID = this.getAttribute( 'ID' ),\n                        newResource = this.getAttribute( 'Resource' ),\n                        newClass = this.getAttribute( 'Classifications' ),\n                        hadChanges = false;\n                    if ( newName !== data.components[ id ].name ) {\n                        data.components[ id ].name = newName;\n                        hadChanges = true;\n                    }\n                    if ( newDesc !== data.components[ id ].description ) {\n                        data.components[ id ].description = newDesc;\n                        hadChanges = true;\n                    }\n                    if ( newAvmID !== data.components[ id ].avmId ) {\n                        data.components[ id ].avmId = newAvmID;\n                        hadChanges = true;\n                    }\n                    if ( newResource !== data.components[ id ].resource ) {\n                        data.components[ id ].resource = newResource;\n                        hadChanges = true;\n                    }\n                    if ( newClass !== data.components[ id ].classifications ) {\n                        data.components[ id ].classifications = newClass;\n                        hadChanges = true;\n                    }\n                    if ( hadChanges ) {\n                        console.warn( 'ComponentService found update' );\n                        $timeout( function () {\n                            updateListener( {\n                                id: id,\n                                type: 'update',\n                                data: data.components[ id ]\n                            } );\n                        } );\n                    }\n                },\n                onUnload = function ( id ) {\n                    delete data.components[ id ];\n                    $timeout( function () {\n                        updateListener( {\n                            id: id,\n                            type: 'unload',\n                            data: null\n                        } );\n                    } );\n                },\n                watchFromFolderRec = function ( folderNode, meta ) {\n                    var recDeferred = $q.defer();\n                    folderNode.loadChildren()\n                        .then( function ( children ) {\n                            var i,\n                                componentId,\n                                queueList = [],\n                                childNode;\n                            for ( i = 0; i < children.length; i += 1 ) {\n                                childNode = children[ i ];\n                                if ( childNode.isMetaTypeOf( meta.byName.ACMFolder ) ) {\n                                    queueList.push( watchFromFolderRec( childNode, meta ) );\n                                } else if ( childNode.isMetaTypeOf( meta.byName.AVMComponentModel ) ) {\n                                    componentId = childNode.getId();\n                                    if ( !avmIds || avmIds.hasOwnProperty( childNode.getAttribute( 'ID' ) ) ) {\n                                        data.components[ componentId ] = {\n                                            id: componentId,\n                                            name: childNode.getAttribute( 'name' ),\n                                            description: childNode.getAttribute( 'INFO' ),\n                                            avmId: childNode.getAttribute( 'ID' ),\n                                            resource: childNode.getAttribute( 'Resource' ),\n                                            classifications: childNode.getAttribute( 'Classifications' )\n                                        };\n                                        childNode.onUnload( onUnload );\n                                        childNode.onUpdate( onUpdate );\n                                    }\n                                }\n                            }\n\n                            folderNode.onNewChildLoaded( function ( newChild ) {\n                                if ( newChild.isMetaTypeOf( meta.ACMFolder ) ) {\n                                    watchFromFolderRec( newChild, meta );\n                                } else if ( newChild.isMetaTypeOf( meta.AVMComponentModel ) ) {\n                                    componentId = newChild.getId();\n                                    if ( !avmIds || avmIds.hasOwnProperty( newChild.getAttribute( 'ID' ) ) ) {\n                                        data.components[ componentId ] = {\n                                            id: componentId,\n                                            name: newChild.getAttribute( 'name' ),\n                                            description: newChild.getAttribute( 'INFO' ),\n                                            avmId: newChild.getAttribute( 'ID' ),\n                                            resource: newChild.getAttribute( 'Resource' ),\n                                            classifications: newChild.getAttribute( 'Classifications' )\n                                        };\n                                        newChild.onUnload( onUnload );\n                                        newChild.onUpdate( onUpdate );\n                                        $timeout( function () {\n                                            updateListener( {\n                                                id: componentId,\n                                                type: 'load',\n                                                data: data.components[ componentId ]\n                                            } );\n                                        } );\n                                    }\n                                }\n                            } );\n                            if ( queueList.length === 0 ) {\n                                recDeferred.resolve();\n                            } else {\n                                $q.all( queueList )\n                                    .then( function () {\n                                        recDeferred.resolve();\n                                    } );\n                            }\n                        } );\n\n                    return recDeferred.promise;\n                };\n            watchers[ parentContext.regionId ] = watchers[ parentContext.regionId ] || {};\n            watchers[ parentContext.regionId ][ context.regionId ] = context;\n            nodeService.getMetaNodes( context )\n                .then( function ( meta ) {\n                    nodeService.loadNode( context, workspaceId )\n                        .then( function ( workspaceNode ) {\n                            workspaceNode.loadChildren()\n                                .then( function ( children ) {\n                                    var i,\n                                        queueList = [],\n                                        childNode;\n                                    for ( i = 0; i < children.length; i += 1 ) {\n                                        childNode = children[ i ];\n                                        if ( childNode.isMetaTypeOf( meta.byName.ACMFolder ) ) {\n                                            queueList.push( watchFromFolderRec( childNode, meta ) );\n                                        }\n                                    }\n                                    workspaceNode.onNewChildLoaded( function ( newChild ) {\n                                        if ( newChild.isMetaTypeOf( meta.byName.ACMFolder ) ) {\n                                            watchFromFolderRec( newChild, meta );\n                                        }\n                                    } );\n                                    if ( queueList.length === 0 ) {\n                                        deferred.resolve( data );\n                                    } else {\n                                        $q.all( queueList )\n                                            .then( function () {\n                                                deferred.resolve( data );\n                                            } );\n                                    }\n                                } );\n                        } );\n                } );\n\n            return deferred.promise;\n        };\n\n        /**\n         *  Watches the domain-models of a component.\n         * @param parentContext - context of controller.\n         * @param componentId\n         * @param updateListener - invoked when there are (filtered) changes in data.\n         * @returns {Promise} - Returns data when resolved.\n         */\n        this.watchComponentDomains = function ( parentContext, componentId, updateListener ) {\n            var deferred = $q.defer(),\n                regionId = parentContext.regionId + '_watchComponentDomains_' + componentId,\n                context = {\n                    db: parentContext.db,\n                    regionId: regionId\n                },\n                data = {\n                    regionId: regionId,\n                    id: componentId,\n                    domainModels: {} //domainModel: id: <string>, type: <string>\n                },\n                onDomainModelUpdate = function ( id ) {\n                    var newType = this.getAttribute( 'Type' ),\n                        hadChanges = false;\n                    if ( newType !== data.domainModels[ id ].type ) {\n                        data.domainModels[ id ].type = newType;\n                        hadChanges = true;\n                    }\n                    if ( hadChanges ) {\n                        $timeout( function () {\n                            updateListener( {\n                                id: id,\n                                type: 'update',\n                                data: data\n                            } );\n                        } );\n                    }\n                },\n                onDomainModelUnload = function ( id ) {\n                    delete data.domainModels[ id ];\n                    $timeout( function () {\n                        updateListener( {\n                            id: id,\n                            type: 'unload',\n                            data: null\n                        } );\n                    } );\n                };\n\n            watchers[ parentContext.regionId ] = watchers[ parentContext.regionId ] || {};\n            watchers[ parentContext.regionId ][ context.regionId ] = context;\n            nodeService.getMetaNodes( context )\n                .then( function ( meta ) {\n                    nodeService.loadNode( context, componentId )\n                        .then( function ( componentNode ) {\n                            componentNode.loadChildren()\n                                .then( function ( children ) {\n                                    var i,\n                                        childId,\n                                        queueList = [],\n                                        childNode;\n                                    for ( i = 0; i < children.length; i += 1 ) {\n                                        childNode = children[ i ];\n                                        childId = childNode.getId();\n                                        if ( childNode.isMetaTypeOf( meta.byName.DomainModel ) ) {\n                                            data.domainModels[ childId ] = {\n                                                id: childId,\n                                                type: childNode.getAttribute( 'Type' )\n                                            };\n                                            childNode.onUpdate( onDomainModelUpdate );\n                                            childNode.onUnload( onDomainModelUnload );\n                                        }\n                                    }\n                                    componentNode.onNewChildLoaded( function ( newChild ) {\n                                        childId = newChild.getId();\n                                        if ( newChild.isMetaTypeOf( meta.byName.DomainModel ) ) {\n                                            data.domainModels[ childId ] = {\n                                                id: childId,\n                                                type: newChild.getAttribute( 'Type' )\n                                            };\n                                            newChild.onUpdate( onDomainModelUpdate );\n                                            newChild.onUnload( onDomainModelUnload );\n                                            $timeout( function () {\n                                                updateListener( {\n                                                    id: childId,\n                                                    type: 'load',\n                                                    data: data\n                                                } );\n                                            } );\n                                        }\n                                    } );\n\n                                    if ( queueList.length === 0 ) {\n                                        deferred.resolve( data );\n                                    } else {\n                                        $q.all( queueList )\n                                            .then( function () {\n                                                deferred.resolve( data );\n                                            } );\n                                    }\n                                } );\n                        } );\n                } );\n\n            return deferred.promise;\n        };\n\n        /**\n         * See baseCyPhyService.watchInterfaces.\n         */\n        this.watchInterfaces = function ( parentContext, id, updateListener ) {\n            return baseCyPhyService.watchInterfaces( watchers, parentContext, id, updateListener );\n        };\n\n        /**\n         * See baseCyPhyService.cleanUpAllRegions.\n         */\n        this.cleanUpAllRegions = function ( parentContext ) {\n            baseCyPhyService.cleanUpAllRegions( watchers, parentContext );\n        };\n\n        /**\n         * See baseCyPhyService.cleanUpRegion.\n         */\n        this.cleanUpRegion = function ( parentContext, regionId ) {\n            baseCyPhyService.cleanUpRegion( watchers, parentContext, regionId );\n        };\n\n        /**\n         * See baseCyPhyService.registerWatcher.\n         */\n        this.registerWatcher = function ( parentContext, fn ) {\n            baseCyPhyService.registerWatcher( watchers, parentContext, fn );\n        };\n\n        this.logContext = function ( context ) {\n            nodeService.logContext( context );\n        };\n    } );","/*globals angular, console, GME*/\n\n/**\n * This service contains methods for design space exploration through the Executor Client.\n *\n * @author pmeijer / https://github.com/pmeijer\n */\n\nangular.module( 'cyphy.services' )\n    .service( 'desertService', function ( $q, $interval, fileService, executorService ) {\n        'use strict';\n        var self = this,\n            CMDSTR,\n            xmlToJson = new GME.classes.Converters.Xml2json( {\n                skipWSText: true,\n                arrayElements: {\n                    Configuration: true,\n                    Element: true,\n                    NaturalMember: true,\n                    AlternativeAssignment: true\n                }\n            } ),\n            jsonToXml = new GME.classes.Converters.Json2xml();\n\n        this.calculateConfigurations = function ( desertInput ) {\n            var deferred = $q.defer();\n\n            if ( ( desertInput.desertSystem && angular.isObject( desertInput.desertSystem ) &&\n                angular.isObject( desertInput.idMap ) ) === false ) {\n                deferred.reject( 'desertInput must contain a desertSystem and idMap object!' );\n                return deferred.promise;\n            }\n\n            self.saveDesertInput( desertInput.desertSystem )\n                .then( function ( inputHash ) {\n                    console.log( 'Saved desertInput', fileService.getDownloadUrl( inputHash ) );\n                    return self.createAndRunJob( inputHash );\n                } )\n                .then( function ( jobInfo ) {\n                    console.log( 'Job succeeded final jobInfo', jobInfo );\n                    return self.extractConfigurations( jobInfo, desertInput.idMap );\n                } )\n                .then( function ( configurations ) {\n                    deferred.resolve( configurations );\n                } )\n                .\n            catch ( function ( err ) {\n                deferred.reject( 'Calculating configurations failed, err: ' + err.toString() );\n            } );\n\n            return deferred.promise;\n        };\n\n        this.saveDesertInput = function ( desertSystem ) {\n            var deferred = $q.defer(),\n                artifact,\n                xmlString;\n\n            artifact = fileService.createArtifact( 'desert-input' );\n            xmlString = jsonToXml.convertToString( desertSystem );\n\n            fileService.addFileAsSoftLinkToArtifact( artifact, 'desertInput.xml', xmlString )\n                .then( function () {\n                    var execConfig = JSON.stringify( {\n                        cmd: 'run_desert.cmd',\n                        resultArtifacts: [ {\n                            name: 'all',\n                            resultPatterns: []\n                        } ]\n                    }, null, 4 ),\n                        filesToAdd = {\n                            'executor_config.json': execConfig,\n                            'run_desert.cmd': CMDSTR\n                        };\n                    return fileService.addFilesToArtifact( artifact, filesToAdd );\n                } )\n                .then( function () {\n                    return fileService.saveArtifact( artifact );\n                } )\n                .then( function ( artieHash ) {\n                    deferred.resolve( artieHash );\n                } )\n                .\n            catch ( function ( reason ) {\n                deferred.reject( 'Could not save DesertInput to blob, err: \"' + reason + '\"' );\n            } );\n\n            return deferred.promise;\n        };\n\n        this.createAndRunJob = function ( inputHash ) {\n            var deferred = $q.defer();\n            executorService.createJob( {\n                hash: inputHash,\n                labels: []\n            } )\n                .then( function () {\n                    var stop;\n                    stop = $interval( function () {\n                        executorService.getInfo( inputHash )\n                            .then( function ( jobInfo ) {\n                                console.info( JSON.stringify( jobInfo, null, 4 ) );\n                                if ( jobInfo.status === 'CREATED' || jobInfo.status === 'RUNNING' ) {\n                                    return;\n                                }\n                                $interval.cancel( stop );\n                                if ( jobInfo.status === 'SUCCESS' ) {\n                                    deferred.resolve( jobInfo );\n                                } else {\n                                    deferred.reject( JSON.stringify( jobInfo, null, 4 ) );\n                                }\n                            } )\n                            .\n                        catch ( function ( err ) {\n                            $interval.cancel( stop );\n                            deferred.reject( 'Could not obtain jobInfo for desert' + err );\n                        } );\n                    }, 200 );\n                } )\n                .\n            catch ( function ( err ) {\n                deferred.reject( 'Could not create job' + err );\n            } );\n\n            return deferred.promise;\n        };\n\n        this.extractConfigurations = function ( jobInfo, idMap ) {\n            var deferred = $q.defer();\n            if ( ( jobInfo.resultHashes && jobInfo.resultHashes.all ) === false ) {\n                deferred.reject( 'JobInfo did not contain resultHashes.all' );\n                return deferred.promise;\n            }\n            fileService.getMetadata( jobInfo.resultHashes.all )\n                .then( function ( metadata ) {\n                    //                    // TODO: Deal with configs when there's constraints\n                    //                    if (!metadata.content.hasOwnProperty('desertInput_configs.xml')) {\n                    //                        deferred.reject('Desert did not generate a \"desertInput_configs.xml\".');\n                    //                        return;\n                    //                    }\n                    if ( !metadata.content.hasOwnProperty( 'desertInput_back.xml' ) ) {\n                        deferred.reject( 'Desert did not generate a desertInput_back.xml.' );\n                        return;\n                    }\n\n                    return fileService.getObject( metadata.content[ 'desertInput_back.xml' ].content );\n                } )\n                .then( function ( content ) {\n                    var desertObject = xmlToJson.convertFromBuffer( content ),\n                        desertBackSystem,\n                        j,\n                        k,\n                        cfg,\n                        elem,\n                        altAss,\n                        config,\n                        configurations = [],\n                        elemIdToPath = {};\n\n                    if ( desertObject instanceof Error ) {\n                        deferred.reject( 'Output desert XML not valid xml, err: ' + desertObject.message );\n                        return;\n                    }\n                    desertBackSystem = desertObject.DesertBackSystem;\n\n                    if ( desertBackSystem.Element ) {\n                        for ( j = 0; j < desertBackSystem.Element.length; j += 1 ) {\n                            elem = desertBackSystem.Element[ j ];\n                            elemIdToPath[ elem[ '@_id' ] ] = idMap[ elem[ '@externalID' ] ];\n                        }\n                    }\n                    for ( j = 0; j < desertBackSystem.Configuration.length; j += 1 ) {\n                        cfg = desertBackSystem.Configuration[ j ];\n                        configurations.push( {\n                            name: cfg[ '@name' ],\n                            id: cfg[ '@id' ],\n                            alternativeAssignments: []\n                        } );\n                        config = configurations[ configurations.length - 1 ];\n                        if ( cfg.AlternativeAssignment ) {\n                            for ( k = 0; k < cfg.AlternativeAssignment.length; k += 1 ) {\n                                altAss = cfg.AlternativeAssignment[ k ];\n                                config.alternativeAssignments.push( {\n                                    selectedAlternative: elemIdToPath[ altAss[ '@alternative_end_' ] ],\n                                    alternativeOf: elemIdToPath[ altAss[ '@alternative_of_end_' ] ]\n                                } );\n                            }\n                        }\n                    }\n                    deferred.resolve( configurations );\n                } );\n\n            return deferred.promise;\n        };\n\n        this.calculateConfigurationsDummy = function ( /*desertInput*/) {\n            var deferred = $q.defer(),\n                configurations = [ {\n                    id: 1,\n                    name: 'Conf. no: 1',\n                    alternativeAssignments: [ {\n                        selectedAlternative: '/2130017834/542571494/1646059422/564312148/91073815',\n                        alternativeOf: '/2130017834/542571494/1646059422/564312148'\n                    } ]\n                }, {\n                    id: 2,\n                    name: 'Conf. no: 2',\n                    alternativeAssignments: [ {\n                        selectedAlternative: '/2130017834/542571494/1646059422/564312148/1433471789',\n                        alternativeOf: '/2130017834/542571494/1646059422/564312148'\n                    } ]\n                }, {\n                    id: 3,\n                    name: 'Conf. no: 3',\n                    alternativeAssignments: [ {\n                        selectedAlternative: '/2130017834/542571494/1646059422/564312148/1493907264',\n                        alternativeOf: '/2130017834/542571494/1646059422/564312148'\n                    } ]\n                }, {\n                    id: 4,\n                    name: 'Conf. no: 4',\n                    alternativeAssignments: [ {\n                        selectedAlternative: '/2130017834/542571494/1646059422/564312148/1767521621',\n                        alternativeOf: '/2130017834/542571494/1646059422/564312148'\n                    } ]\n                } ];\n\n            deferred.resolve( configurations );\n            return deferred.promise;\n        };\n\n        this.getDesertInputData = function ( designStructureData ) {\n            var desertSystem,\n                idMap = {},\n                idCounter = 4,\n                rootContainer = designStructureData.containers[ designStructureData.rootId ],\n                populateDataRec = function ( container, element ) {\n                    var key,\n                        childData,\n                        id;\n\n                    for ( key in container.components ) {\n                        if ( container.components.hasOwnProperty( key ) ) {\n                            childData = container.components[ key ];\n                            idCounter += 1;\n                            id = idCounter.toString();\n                            idMap[ id ] = childData.id;\n                            element.Element.push( {\n                                '@_id': 'id' + id,\n                                '@decomposition': 'false',\n                                '@externalID': id,\n                                '@id': id,\n                                '@name': childData.name,\n                                'Element': []\n                            } );\n                        }\n                    }\n                    for ( key in container.subContainers ) {\n                        if ( container.subContainers.hasOwnProperty( key ) ) {\n                            childData = container.subContainers[ key ];\n                            idCounter += 1;\n                            id = idCounter.toString();\n                            idMap[ id ] = childData.id;\n                            element.Element.push( {\n                                '@_id': 'id' + id,\n                                '@decomposition': ( childData.type === 'Compound' )\n                                    .toString(),\n                                '@externalID': id,\n                                '@id': id,\n                                '@name': childData.name,\n                                'Element': []\n                            } );\n                            populateDataRec( childData, element.Element[ element.Element.length - 1 ] );\n                        }\n                    }\n                };\n            desertSystem = {\n                'DesertSystem': {\n                    '@xmlns:xsi': 'http://www.w3.org/2001/XMLSchema-instance',\n                    '@SystemName': '',\n                    '@xsi:noNamespaceSchemaLocation': 'DesertIface.xsd',\n                    'ConstraintSet': {\n                        '@_id': 'id1',\n                        '@externalID': '1',\n                        '@id': '1',\n                        '@name': 'constraints'\n                    },\n                    'FormulaSet': {\n                        '@_id': 'id2',\n                        '@externalID': '2',\n                        '@id': '2',\n                        '@name': 'formulaSet'\n                    },\n                    'Space': {\n                        '@_id': 'id3',\n                        '@decomposition': 'true',\n                        '@externalID': '3',\n                        '@id': '3',\n                        '@name': 'DesignSpace',\n                        'Element': [ {\n                            '@_id': 'id4',\n                            '@decomposition': 'true',\n                            '@externalID': '4',\n                            '@id': '4',\n                            '@name': rootContainer.name,\n                            'Element': []\n                        } ]\n                    }\n                }\n            };\n            populateDataRec( rootContainer, desertSystem.DesertSystem.Space.Element[ 0 ] );\n\n            return {\n                desertSystem: desertSystem,\n                idMap: idMap\n            };\n        };\n\n        CMDSTR = [\n            ':: Runs <-DesertTools.exe-> desertInput.xml /m',\n            'ECHO off',\n            'pushd %~dp0',\n            '%SystemRoot%\\\\SysWoW64\\\\REG.exe query \"HKLM\\\\software\\\\META\" /v \"META_PATH\"',\n            'SET QUERY_ERRORLEVEL=%ERRORLEVEL%',\n            'IF %QUERY_ERRORLEVEL% == 0 (',\n            '        FOR /F \"skip=2 tokens=2,*\" %%A IN (\\'%SystemRoot%\\\\SysWoW64\\\\REG.exe query \"HKLM\\\\software\\\\META\" /v \"META_PATH\"\\') DO SET META_PATH=%%B)',\n            'SET DESERT_EXE=\"%META_PATH%\\\\bin\\\\DesertTool.exe\"',\n            '   IF EXIST %DESERT_EXE% (',\n            '       REM Installer machine.',\n            '       %DESERT_EXE% desertInput.xml /c \"applyAll\"',\n            '   ) ELSE IF EXIST \"%META_PATH%\\\\src\\\\bin\\\\DesertTool.exe\" (',\n            '       REM Developer machine.',\n            '       \"%META_PATH%\\\\src\\\\bin\\\\DesertTool.exe\" desertInput.xml /c \"applyAll\"',\n            '   ) ELSE (',\n            '       ECHO on',\n            '       ECHO Could not find DesertTool.exe!',\n            '       EXIT /B 3',\n            '   )',\n            ')',\n            'IF %QUERY_ERRORLEVEL% == 1 (',\n            '    ECHO on',\n            'ECHO \"META tools not installed.\" >> _FAILED.txt',\n            'ECHO \"See Error Log: _FAILED.txt\"',\n            'EXIT /b %QUERY_ERRORLEVEL%',\n            ')',\n            'popd'\n        ].join( '\\n' );\n    } );","/*globals angular*/\n\n/**\n * @author pmeijer / https://github.com/pmeijer\n */\n\n'use strict';\n\nangular.module('cyphy.services')\n    .service('designLayoutService', function ($q, $timeout, nodeService, baseCyPhyService, $log) {\n\n        var self = this,\n            watchers,\n            typesWithConnectordsInside;\n\n        typesWithConnectordsInside = [\n            'AVMComponentModel',\n            'Container'\n        ];\n\n        $log.debug('IN design layout service');\n\n        watchers = {};\n\n        this.setWireSegments = function (context, nodeId, segments, msg) {\n\n            nodeService.loadNode(context, nodeId)\n                .then(function (node) {\n                    node.setRegistry('wireSegments', segments, msg);\n                });\n\n        };\n\n        this.setPosition = function (context, nodeId, position, msg) {\n\n            nodeService.loadNode(context, nodeId)\n                .then(function (node) {\n                    node.setRegistry('position', position, msg);\n                });\n\n        };\n\n        this.setRotation = function (context, nodeId, angle, msg) {\n\n            nodeService.loadNode(context, nodeId)\n                .then(function (node) {\n                    node.setRegistry('rotation', angle, msg);\n                });\n\n        };\n\n        this.setRotation = function (context, nodeId, rotation, msg) {\n\n            nodeService.loadNode(context, nodeId)\n                .then(function (node) {\n                    node.setRegistry('rotation', rotation, msg);\n                });\n\n        };\n\n        this.watchDiagramElements = function (parentContext, containerId, updateListener) {\n\n            var deferred,\n                regionId,\n                context,\n\n                data,\n\n                meta,\n\n                onChildUnload,\n                onChildUpdate,\n\n                deleteInElementsById,\n\n                getConnectorCompositionDetails,\n                parseNewChild,\n                findChildForNode,\n\n                triggerUpdateListener;\n\n            deferred = $q.defer();\n            regionId = parentContext.regionId + '_watchDiagramElements_' + containerId;\n            context = {\n                db: parentContext.db,\n                regionId: regionId\n            };\n\n            data = {\n                regionId: regionId,\n                elements: {}\n            };\n\n\n            triggerUpdateListener = function (id, data, eventType, updateType) {\n\n                $timeout(function () {\n                    updateListener({\n                        id: id,\n                        type: eventType,\n                        updateType: updateType,\n                        data: data\n                    });\n                });\n\n            };\n\n            findChildForNode = function (node) {\n\n                var baseName,\n                    child;\n\n                baseName = node.getMetaTypeName(meta);\n\n                if (baseName) {\n\n                    data.elements[baseName] = data.elements[baseName] || {};\n                    child = data.elements[baseName][node.getId()];\n                }\n\n                return child;\n\n            };\n\n            getConnectorCompositionDetails = function (connectorCompositionNode) {\n\n                var details,\n                    sourcePtr,\n                    destinationPtr,\n\n                    sourceId,\n                    destinationId,\n                    wireSegments;\n\n                sourcePtr = connectorCompositionNode.getPointer('src');\n                destinationPtr = connectorCompositionNode.getPointer('dst');\n                wireSegments = connectorCompositionNode.getRegistry('wireSegments');\n\n                if (angular.isObject(sourcePtr)) {\n                    sourceId = sourcePtr.to;\n                }\n\n                if (angular.isObject(destinationPtr)) {\n                    destinationId = destinationPtr.to;\n                }\n\n                details = {\n                    sourceId: sourceId,\n                    destinationId: destinationId,\n                    wireSegments: wireSegments\n                };\n\n                return details;\n\n            };\n\n            onChildUpdate = function () {\n\n                var newName,\n                    newDetails,\n                    newPos,\n                    newRotation,\n                    hadChanges,\n                    child,\n                    updateType;\n\n                // BaseName never changes, does it?\n\n                child = findChildForNode(this);\n\n                if (child) {\n\n                    newName = this.getAttribute('name');\n                    newPos = this.getRegistry('position');\n                    newRotation = this.getRegistry('rotation') || 0;\n\n                    hadChanges = false;\n\n                    if (newName !== child.name) {\n                        child.name = newName;\n                        hadChanges = true;\n\n                    }\n\n                    if (newPos.x !== child.position.x || newPos.y !== child.position.y) {\n                        child.position = newPos;\n\n                        hadChanges = true;\n                        updateType = 'positionChange';\n\n                    }\n\n                    if ( !(child.rotation === undefined && newRotation === 0) && newRotation !== child.rotation ) {\n\n                        child.rotation = newRotation;\n\n                        hadChanges = true;\n                        updateType = 'rotationChange';\n\n                    }\n\n                    if (child.baseName === 'ConnectorComposition') {\n\n                        newDetails = getConnectorCompositionDetails(this);\n\n                        if (!angular.equals(newDetails, child.details)) {\n\n                            child.details = newDetails;\n                            hadChanges = true;\n\n                            updateType = 'detailsChange';\n\n                        }\n\n                    }\n\n                    if (hadChanges) {\n\n                        triggerUpdateListener(child.id, child, 'update', updateType);\n\n                    }\n\n\n                }\n\n            };\n\n            deleteInElementsById = function (id) {\n\n                angular.forEach(data.elements, function (category) {\n\n                    delete category[id];\n\n                });\n\n            };\n\n\n            onChildUnload = function (id) {\n\n                deleteInElementsById(id);\n\n                triggerUpdateListener(id, null, 'unload');\n\n            };\n\n            parseNewChild = function (node) {\n\n                var deferredParseResult,\n                    parsePromises,\n\n                    getInterfacesPromise,\n\n                    child;\n\n                deferredParseResult = $q.defer();\n                parsePromises = [];\n\n                child = {\n                    id: node.getId(),\n                    name: node.getAttribute('name'),\n                    position: node.getRegistry('position'),\n                    rotation: node.getRegistry('rotation'),\n                    baseId: node.getBaseId()\n                };\n\n                child.baseName = node.getMetaTypeName(meta);\n\n                if (child.baseName) {\n\n                    data.elements[child.baseName] = data.elements[child.baseName] || {};\n                    data.elements[child.baseName][child.id] = child;\n\n                }\n\n                node.onUpdate(onChildUpdate);\n                node.onUnload(onChildUnload);\n\n\n                // Getting connectors from inside where needed\n\n                if (typesWithConnectordsInside.indexOf(child.baseName) > -1) {\n\n                    getInterfacesPromise = self.watchInterfaces(context, child.id, function (/*interfaceUpdateData*/) {\n                        //TODO: see if anything has to be done with this\n                    });\n\n                    getInterfacesPromise.then(function (interfaces) {\n                        child.interfaces = interfaces;\n                    });\n\n                    parsePromises.push(getInterfacesPromise);\n                }\n\n                if (child.baseName === 'ConnectorComposition') {\n\n                    child.details = getConnectorCompositionDetails(node);\n                }\n\n\n                $q.all(parsePromises)\n                    .then(function () {\n                        deferredParseResult.resolve(child);\n                    });\n\n                return deferredParseResult.promise;\n\n            };\n\n            watchers[parentContext.regionId] = watchers[parentContext.regionId] || {};\n            watchers[parentContext.regionId][regionId] = context;\n\n            nodeService.getMetaNodes(context)\n                .then(function (metaNodes) {\n\n                    meta = metaNodes;\n\n                    nodeService.loadNode(context, containerId)\n\n                        .then(function (rootNode) {\n                            rootNode.loadChildren(context)\n                                .then(function (childNodes) {\n\n                                    var i,\n                                        childPromises;\n\n                                    childPromises = [];\n\n                                    for (i = 0; i < childNodes.length; i += 1) {\n                                        childPromises.push(parseNewChild(childNodes[i]));\n                                    }\n\n                                    rootNode.onNewChildLoaded(function (newNode) {\n\n                                        parseNewChild(newNode)\n                                            .then(function (newChild) {\n\n                                                triggerUpdateListener(\n                                                    newChild.id,\n                                                    newChild,\n                                                    'load',\n                                                    'newChild'\n                                                );\n                                            });\n\n                                    });\n\n                                    $q.all(childPromises)\n                                        .then(function () {\n\n                                            deferred.resolve(data);\n                                        });\n\n                                });\n                        });\n                });\n\n            return deferred.promise;\n        };\n\n        /**\n         * See baseCyPhyService.watchInterfaces.\n         */\n        this.watchInterfaces = function (parentContext, id, updateListener) {\n            return baseCyPhyService.watchInterfaces(watchers, parentContext, id, updateListener);\n        };\n\n        /**\n         * See baseCyPhyService.cleanUpAllRegions.\n         */\n        this.cleanUpAllRegions = function (parentContext) {\n            baseCyPhyService.cleanUpAllRegions(watchers, parentContext);\n        };\n\n        /**\n         * See baseCyPhyService.cleanUpRegion.\n         */\n        this.cleanUpRegion = function (parentContext, regionId) {\n            baseCyPhyService.cleanUpRegion(watchers, parentContext, regionId);\n        };\n\n        /**\n         * See baseCyPhyService.registerWatcher.\n         */\n        this.registerWatcher = function (parentContext, fn) {\n            baseCyPhyService.registerWatcher(watchers, parentContext, fn);\n        };\n    });\n","/*globals angular, console*/\n\n/**\n * @author pmeijer / https://github.com/pmeijer\n * @author lattmann / https://github.com/lattmann\n */\n\n\nangular.module( 'cyphy.services' )\n    .service( 'designService', function ( $q, $timeout, $location, $modal, growl, nodeService, baseCyPhyService,\n        pluginService, fileService ) {\n        'use strict';\n        var self = this,\n            watchers = {};\n\n        this.editDesignFn = function ( data ) {\n            var modalInstance = $modal.open( {\n                templateUrl: '/cyphy-components/templates/DesignEdit.html',\n                controller: 'DesignEditController',\n                //size: size,\n                resolve: {\n                    data: function () {\n                        return data;\n                    }\n                }\n            } );\n\n            modalInstance.result.then( function ( editedData ) {\n                var attrs = {\n                    'name': editedData.name,\n                    'INFO': editedData.description\n                };\n                self.setDesignAttributes( data.context, data.id, attrs )\n                    .then( function () {\n                        console.log( 'Attribute updated' );\n                    } );\n            }, function () {\n                console.log( 'Modal dismissed at: ' + new Date() );\n            } );\n        };\n\n        this.exportAsAdmFn = function ( data ) {\n            self.exportDesign( data.context, data.id )\n                .then( function ( downloadUrl ) {\n                    growl.success( 'ADM file for <a href=\"' + downloadUrl + '\">' + data.name + '</a> exported.' );\n                } )\n                .\n            catch ( function ( reason ) {\n                console.error( reason );\n                growl.error( 'Export failed, see console for details.' );\n            } );\n        };\n\n        this.deleteFn = function ( data ) {\n            var modalInstance = $modal.open( {\n                templateUrl: '/cyphy-components/templates/SimpleModal.html',\n                controller: 'SimpleModalController',\n                resolve: {\n                    data: function () {\n                        return {\n                            title: 'Delete Design Space',\n                            details: 'This will delete ' + data.name + ' from the workspace.'\n                        };\n                    }\n                }\n            } );\n\n            modalInstance.result.then( function () {\n                self.deleteDesign( data.context, data.id );\n            }, function () {\n                console.log( 'Modal dismissed at: ' + new Date() );\n            } );\n        };\n\n        /**\n         * Removes the design from the context.\n         * @param {object} context - context of controller.\n         * @param {string} context.db - data-base connection.\n         * @param {string} designId - Path to design-space.\n         * @param [msg] - Commit message.\n         */\n        this.deleteDesign = function ( context, designId, msg ) {\n            var message = msg || 'designService.deleteDesign ' + designId;\n            nodeService.destroyNode( context, designId, message );\n        };\n\n        /**\n         * Updates the given attributes\n         * @param {object} context - Must exist within watchers and contain the design.\n         * @param {string} context.db - Must exist within watchers and contain the design.\n         * @param {string} context.regionId - Must exist within watchers and contain the design.\n         * @param {string} designId - Path to design-space.\n         * @param {object} attrs - Keys are names of attributes and values are the wanted value.\n         */\n        this.setDesignAttributes = function ( context, designId, attrs ) {\n            return baseCyPhyService.setNodeAttributes( context, designId, attrs );\n        };\n\n        /**\n         * Calls AdmExporter.\n         * @param {object} context - Context for plugin.\n         * @param {string} context.db - Database connection to pull model from.\n         * @param {string} designId\n         * @param {string} [desertCfgPath] - Path to configuration if only one is to be exported.\n         * @returns {Promise} - resolves to {string} if successful.\n         */\n        this.exportDesign = function ( context, designId, desertCfgPath ) {\n            var deferred = $q.defer(),\n                config = {\n                    activeNode: designId,\n                    runOnServer: false,\n                    pluginConfig: {\n                        acms: false,\n                        desertCfg: desertCfgPath || ''\n                    }\n                };\n\n            pluginService.runPlugin( context, 'AdmExporter', config )\n                .then( function ( result ) {\n                    //\"{\"success\":true,\"messages\":[],\"artifacts\":[],\"pluginName\":\"ADM Importer\",\n                    // \"startTime\":\"2014-11-08T02:51:21.383Z\",\"finishTime\":\"2014-11-08T02:51:21.939Z\",\"error\":null}\"\n                    if ( result.success ) {\n                        console.log( result );\n                        deferred.resolve( fileService.getDownloadUrl( result.artifacts[ 0 ] ) );\n                    } else {\n                        if ( result.error ) {\n                            deferred.reject( result.error + ' messages: ' + angular.toJson( result.messages ) );\n                        } else {\n                            deferred.reject( angular.toJson( result.messages ) );\n                        }\n                    }\n                } )\n                .\n            catch ( function ( reason ) {\n                deferred.reject( 'Something went terribly wrong ' + reason );\n            } );\n\n            return deferred.promise;\n\n        };\n\n        this.generateDashboard = function ( context, designId, resultIds ) {\n            var deferred = $q.defer(),\n                config = {\n                    activeNode: designId,\n                    runOnServer: false,\n                    pluginConfig: {\n                        resultIDs: resultIds.join( ';' )\n                    }\n                };\n            console.log( JSON.stringify( config ) );\n            pluginService.runPlugin( context, 'GenerateDashboard', config )\n                .then( function ( result ) {\n                    var resultLight = {\n                        success: result.success,\n                        artifactsHtml: '',\n                        messages: result.messages\n                    };\n                    console.log( 'Result', result );\n                    pluginService.getPluginArtifactsHtml( result.artifacts )\n                        .then( function ( artifactsHtml ) {\n                            resultLight.artifactsHtml = artifactsHtml;\n                            deferred.resolve( resultLight );\n                        } );\n                } )\n                .\n            catch ( function ( reason ) {\n                deferred.reject( 'Something went terribly wrong, ' + reason );\n            } );\n\n            return deferred.promise;\n        };\n\n        this.watchDesignNode = function ( parentContext, designId, updateListener ) {\n            var deferred = $q.defer(),\n                regionId = parentContext.regionId + '_watchDesign',\n                context = {\n                    db: parentContext.db,\n                    regionId: regionId\n                },\n                data = {\n                    regionId: regionId,\n                    meta: null, // META nodes - needed when creating new nodes...\n                    design: {} // design {id: <string>, name: <string>, description: <string>, node <NodeObj>}\n                },\n                onUpdate = function ( id ) {\n                    var newName = this.getAttribute( 'name' ),\n                        newDesc = this.getAttribute( 'INFO' ),\n                        hadChanges = false;\n                    if ( newName !== data.design.name ) {\n                        data.design.name = newName;\n                        hadChanges = true;\n                    }\n                    if ( newDesc !== data.design.description ) {\n                        data.design.description = newDesc;\n                        hadChanges = true;\n                    }\n                    if ( hadChanges ) {\n                        $timeout( function () {\n                            updateListener( {\n                                id: id,\n                                type: 'update',\n                                data: data.design\n                            } );\n                        } );\n                    }\n                },\n                onUnload = function ( id ) {\n                    $timeout( function () {\n                        updateListener( {\n                            id: id,\n                            type: 'unload',\n                            data: null\n                        } );\n                    } );\n                };\n            watchers[ parentContext.regionId ] = watchers[ parentContext.regionId ] || {};\n            watchers[ parentContext.regionId ][ context.regionId ] = context;\n            nodeService.getMetaNodes( context )\n                .then( function ( meta ) {\n                    nodeService.loadNode( context, designId )\n                        .then( function ( designNode ) {\n                            data.meta = meta;\n                            data.design = {\n                                id: designId,\n                                name: designNode.getAttribute( 'name' ),\n                                description: designNode.getAttribute( 'INFO' ),\n                                node: designNode\n                            };\n                            designNode.onUpdate( onUpdate );\n                            designNode.onUnload( onUnload );\n                            deferred.resolve( data );\n                        } );\n                } );\n\n            return deferred.promise;\n        };\n\n        /**\n         *  Watches all containers (existence and their attributes) of a workspace.\n         * @param parentContext - context of controller.\n         * @param workspaceId\n         * @param updateListener - invoked when there are (filtered) changes in data. Data is an object in data.designs.\n         * @returns {Promise} - Returns data when resolved.\n         */\n        this.watchDesigns = function ( parentContext, workspaceId, updateListener ) {\n            var deferred = $q.defer(),\n                regionId = parentContext.regionId + '_watchDesigns',\n                context = {\n                    db: parentContext.db,\n                    regionId: regionId\n                },\n                data = {\n                    regionId: regionId,\n                    designs: {} // design {id: <string>, name: <string>, description: <string>}\n                },\n                onUpdate = function ( id ) {\n                    var newName = this.getAttribute( 'name' ),\n                        newDesc = this.getAttribute( 'INFO' ),\n                        hadChanges = false;\n                    if ( newName !== data.designs[ id ].name ) {\n                        data.designs[ id ].name = newName;\n                        hadChanges = true;\n                    }\n                    if ( newDesc !== data.designs[ id ].description ) {\n                        data.designs[ id ].description = newDesc;\n                        hadChanges = true;\n                    }\n                    if ( hadChanges ) {\n                        $timeout( function () {\n                            updateListener( {\n                                id: id,\n                                type: 'update',\n                                data: data.designs[ id ]\n                            } );\n                        } );\n                    }\n                },\n                onUnload = function ( id ) {\n                    delete data.designs[ id ];\n                    $timeout( function () {\n                        updateListener( {\n                            id: id,\n                            type: 'unload',\n                            data: null\n                        } );\n                    } );\n                },\n                watchFromFolderRec = function ( folderNode, meta ) {\n                    var recDeferred = $q.defer();\n                    folderNode.loadChildren()\n                        .then( function ( children ) {\n                            var i,\n                                designId,\n                                queueList = [],\n                                childNode;\n                            for ( i = 0; i < children.length; i += 1 ) {\n                                childNode = children[ i ];\n                                if ( childNode.isMetaTypeOf( meta.byName.ADMFolder ) ) {\n                                    queueList.push( watchFromFolderRec( childNode, meta ) );\n                                } else if ( childNode.isMetaTypeOf( meta.byName.Container ) ) {\n                                    designId = childNode.getId();\n                                    data.designs[ designId ] = {\n                                        id: designId,\n                                        name: childNode.getAttribute( 'name' ),\n                                        description: childNode.getAttribute( 'INFO' )\n                                    };\n                                    childNode.onUnload( onUnload );\n                                    childNode.onUpdate( onUpdate );\n                                }\n                            }\n\n                            folderNode.onNewChildLoaded( function ( newChild ) {\n                                if ( newChild.isMetaTypeOf( meta.byName.ADMFolder ) ) {\n                                    watchFromFolderRec( newChild, meta );\n                                } else if ( newChild.isMetaTypeOf( meta.byName.Container ) ) {\n                                    designId = newChild.getId();\n                                    data.designs[ designId ] = {\n                                        id: designId,\n                                        name: newChild.getAttribute( 'name' ),\n                                        description: newChild.getAttribute( 'INFO' )\n                                    };\n                                    newChild.onUnload( onUnload );\n                                    newChild.onUpdate( onUpdate );\n                                    $timeout( function () {\n                                        updateListener( {\n                                            id: designId,\n                                            type: 'load',\n                                            data: data.designs[ designId ]\n                                        } );\n                                    } );\n                                }\n                            } );\n                            if ( queueList.length === 0 ) {\n                                recDeferred.resolve();\n                            } else {\n                                $q.all( queueList )\n                                    .then( function () {\n                                        recDeferred.resolve();\n                                    } );\n                            }\n                        } );\n\n                    return recDeferred.promise;\n                };\n\n            watchers[ parentContext.regionId ] = watchers[ parentContext.regionId ] || {};\n            watchers[ parentContext.regionId ][ context.regionId ] = context;\n            nodeService.getMetaNodes( context )\n                .then( function ( meta ) {\n                    nodeService.loadNode( context, workspaceId )\n                        .then( function ( workspaceNode ) {\n                            workspaceNode.loadChildren()\n                                .then( function ( children ) {\n                                    var i,\n                                        queueList = [],\n                                        childNode;\n                                    for ( i = 0; i < children.length; i += 1 ) {\n                                        childNode = children[ i ];\n                                        if ( childNode.isMetaTypeOf( meta.byName.ADMFolder ) ) {\n                                            queueList.push( watchFromFolderRec( childNode, meta ) );\n                                        }\n                                    }\n                                    workspaceNode.onNewChildLoaded( function ( newChild ) {\n                                        if ( newChild.isMetaTypeOf( meta.byName.ADMFolder ) ) {\n                                            watchFromFolderRec( newChild, meta );\n                                        }\n                                    } );\n                                    if ( queueList.length === 0 ) {\n                                        deferred.resolve( data );\n                                    } else {\n                                        $q.all( queueList )\n                                            .then( function () {\n                                                deferred.resolve( data );\n                                            } );\n                                    }\n                                } );\n                        } );\n                } );\n\n            return deferred.promise;\n        };\n\n        /**\n         *  Watches all containers (existence and their attributes) of a workspace.\n         * @param {object} parentContext - context of controller.\n         * @param {string} designId\n         * @param {function} updateListener - invoked when there are (filtered) changes in data.\n         * @returns {Promise} - Returns data when resolved.\n         */\n        this.watchNbrOfConfigurations = function ( parentContext, designId, updateListener ) {\n            var deferred = $q.defer(),\n                regionId = parentContext.regionId + '_watchNbrOfConfigurations_' + designId,\n                context = {\n                    db: parentContext.db,\n                    regionId: regionId\n                },\n                data = {\n                    regionId: regionId,\n                    counters: {\n                        sets: 0,\n                        configurations: 0,\n                        results: 0\n                    }\n                },\n                watchConfiguration = function ( cfgNode, meta, wasCreated ) {\n                    var cfgDeferred = $q.defer(),\n                        resultOnUnload = function ( id ) {\n                            data.counters.results -= 1;\n                            $timeout( function () {\n                                updateListener( {\n                                    id: id,\n                                    type: 'unload',\n                                    data: data\n                                } );\n                            } );\n                        };\n                    // Count this set and add an unload handle.\n                    data.counters.configurations += 1;\n                    if ( wasCreated ) {\n                        $timeout( function () {\n                            updateListener( {\n                                id: cfgNode.getId(),\n                                type: 'load',\n                                data: data\n                            } );\n                        } );\n                    }\n                    cfgNode.onUnload( function ( id ) {\n                        data.counters.configurations -= 1;\n                        $timeout( function () {\n                            updateListener( {\n                                id: id,\n                                type: 'unload',\n                                data: data\n                            } );\n                        } );\n                    } );\n                    cfgNode.loadChildren()\n                        .then( function ( children ) {\n                            var i,\n                                childNode;\n                            for ( i = 0; i < children.length; i += 1 ) {\n                                childNode = children[ i ];\n                                if ( childNode.isMetaTypeOf( meta.byName.Result ) ) {\n                                    data.counters.results += 1;\n                                    childNode.onUnload( resultOnUnload );\n                                }\n                            }\n                            cfgNode.onNewChildLoaded( function ( newChild ) {\n                                if ( newChild.isMetaTypeOf( meta.byName.Result ) ) {\n                                    data.counters.results += 1;\n                                    $timeout( function () {\n                                        updateListener( {\n                                            id: newChild.getId(),\n                                            type: 'load',\n                                            data: data\n                                        } );\n                                    } );\n                                    newChild.onUnload( resultOnUnload );\n                                }\n                            } );\n                            cfgDeferred.resolve();\n                        } );\n\n                    return cfgDeferred.promise;\n                },\n                watchConfigurationSet = function ( setNode, meta, wasCreated ) {\n                    var setDeferred = $q.defer();\n                    // Count this set and add an unload handle.\n                    data.counters.sets += 1;\n                    if ( wasCreated ) {\n                        $timeout( function () {\n                            updateListener( {\n                                id: setNode.getId(),\n                                type: 'load',\n                                data: data\n                            } );\n                        } );\n                    }\n                    setNode.onUnload( function ( id ) {\n                        data.counters.sets -= 1;\n                        $timeout( function () {\n                            updateListener( {\n                                id: id,\n                                type: 'unload',\n                                data: data\n                            } );\n                        } );\n                    } );\n                    setNode.loadChildren()\n                        .then( function ( children ) {\n                            var i,\n                                queueList = [],\n                                childNode;\n                            for ( i = 0; i < children.length; i += 1 ) {\n                                childNode = children[ i ];\n                                if ( childNode.isMetaTypeOf( meta.byName.DesertConfiguration ) ) {\n                                    queueList.push( watchConfiguration( childNode, meta ) );\n                                }\n                            }\n                            setNode.onNewChildLoaded( function ( newChild ) {\n                                if ( newChild.isMetaTypeOf( meta.byName.DesertConfiguration ) ) {\n                                    watchConfiguration( newChild, meta, true );\n                                }\n                            } );\n                            if ( queueList.length === 0 ) {\n                                setDeferred.resolve();\n                            } else {\n                                $q.all( queueList )\n                                    .then( function () {\n                                        setDeferred.resolve();\n                                    } );\n                            }\n                        } );\n\n                    return setDeferred.promise;\n                };\n\n            watchers[ parentContext.regionId ] = watchers[ parentContext.regionId ] || {};\n            watchers[ parentContext.regionId ][ context.regionId ] = context;\n            nodeService.getMetaNodes( context )\n                .then( function ( meta ) {\n                    nodeService.loadNode( context, designId )\n                        .then( function ( designNode ) {\n                            designNode.loadChildren()\n                                .then( function ( children ) {\n                                    var i,\n                                        queueList = [],\n                                        childNode;\n                                    for ( i = 0; i < children.length; i += 1 ) {\n                                        childNode = children[ i ];\n                                        if ( childNode.isMetaTypeOf( meta.byName.DesertConfigurationSet ) ) {\n                                            queueList.push( watchConfigurationSet( childNode, meta ) );\n                                        }\n                                    }\n                                    designNode.onNewChildLoaded( function ( newChild ) {\n                                        if ( newChild.isMetaTypeOf( meta.byName.DesertConfigurationSet ) ) {\n                                            watchConfigurationSet( newChild, meta, true );\n                                        }\n                                    } );\n                                    if ( queueList.length === 0 ) {\n                                        deferred.resolve( data );\n                                    } else {\n                                        $q.all( queueList )\n                                            .then( function () {\n                                                deferred.resolve( data );\n                                            } );\n                                    }\n                                } );\n                        } );\n                } );\n\n            return deferred.promise;\n        };\n\n        /**\n         *  Watches a design(space) w.r.t. interfaces.\n         * @param parentContext - context of controller.\n         * @param designId\n         * @param updateListener - invoked when there are (filtered) changes in data.\n         */\n        this.watchInterfaces = function ( parentContext, designId, updateListener ) {\n            return baseCyPhyService.watchInterfaces( watchers, parentContext, designId, updateListener );\n        };\n\n        /**\n         *  Watches the full hierarchy of a design w.r.t. containers and components.\n         * @param {object} parentContext - context of controller.\n         * @param {string} designId - path to root container.\n         * @param {function} updateListener - invoked when there are (filtered) changes in data.\n         * @returns {Promise} - Returns data when resolved.\n         */\n        this.watchDesignStructure = function ( parentContext, designId ) {\n            var deferred = $q.defer(),\n                regionId = parentContext.regionId + '_watchDesignStructure_' + designId,\n                context = {\n                    db: parentContext.db,\n                    regionId: regionId\n                },\n                data = {\n                    regionId: regionId,\n                    rootId: designId,\n                    containers: {}, // container: {id: <string>, name: <string>, parentId: <string>, type: <string>,\n                    //             subContainers: {id:<string>: <container>},\n                    //             components:    {id:<string>: <container>}}\n                    components: {} // component: {id: <string>, name: <string>, parentId: <string>,\n                    //             , avmId: <string> }\n                },\n                getComponentInfo = function ( node, parentId ) {\n                    return {\n                        id: node.getId(),\n                        name: node.getAttribute( 'name' ),\n                        parentId: parentId,\n                        avmId: node.getAttribute( 'ID' )\n                    };\n                },\n                watchFromContainerRec = function ( containerNode, rootContainer, meta ) {\n                    var recDeferred = $q.defer();\n                    containerNode.loadChildren()\n                        .then( function ( children ) {\n                            var i,\n                                queueList = [],\n                                childNode,\n                                container = {\n                                    id: containerNode.getId(),\n                                    name: containerNode.getAttribute( 'name' ),\n                                    type: containerNode.getAttribute( 'Type' ),\n                                    subContainers: {},\n                                    components: {}\n                                },\n                                component;\n\n                            rootContainer.subContainers[ containerNode.getId() ] = container;\n                            data.containers[ containerNode.getId() ] = container;\n\n                            for ( i = 0; i < children.length; i += 1 ) {\n                                childNode = children[ i ];\n                                if ( childNode.isMetaTypeOf( meta.byName.Container ) ) {\n                                    queueList.push( watchFromContainerRec( childNode, container, meta ) );\n                                } else if ( childNode.isMetaTypeOf( meta.byName.AVMComponentModel ) ) {\n                                    component = getComponentInfo( childNode, container.id );\n                                    container.components[ childNode.getId() ] = component;\n                                    data.components[ childNode.getId() ] = component;\n                                }\n                            }\n\n                            //                        containerNode.onNewChildLoaded(function (newChild) {\n                            //                            if (newChild.isMetaTypeOf(meta.Container)) {\n                            //                                watchFromContainerRec(newChild, container, meta).then(function () {\n                            //                                    updateListener({id: newChild.getId(), type: 'load', data: data});\n                            //                                });\n                            //                            } else if (childNode.isMetaTypeOf(meta.AVMComponentModel)) {\n                            //                                container[childNode.getId()] = getComponentInfo(childNode, container.id);\n                            //                                updateListener({id: newChild.getId(), type: 'load', data: data});\n                            //                            }\n                            //                        });\n\n                            if ( queueList.length === 0 ) {\n                                recDeferred.resolve();\n                            } else {\n                                $q.all( queueList )\n                                    .then( function () {\n                                        recDeferred.resolve();\n                                    } );\n                            }\n                        } );\n\n                    return recDeferred.promise;\n                };\n\n            watchers[ parentContext.regionId ] = watchers[ parentContext.regionId ] || {};\n            watchers[ parentContext.regionId ][ context.regionId ] = context;\n            nodeService.getMetaNodes( context )\n                .then( function ( meta ) {\n                    nodeService.loadNode( context, designId )\n                        .then( function ( rootNode ) {\n                            rootNode.loadChildren()\n                                .then( function ( children ) {\n                                    var i,\n                                        queueList = [],\n                                        childNode,\n                                        rootContainer = {\n                                            id: rootNode.getId(),\n                                            name: rootNode.getAttribute( 'name' ),\n                                            type: rootNode.getAttribute( 'Type' ),\n                                            subContainers: {},\n                                            components: {}\n                                        },\n                                        component;\n\n                                    data.containers[ rootContainer.id ] = rootContainer;\n                                    data.containers[ rootContainer.id ] = rootContainer;\n                                    for ( i = 0; i < children.length; i += 1 ) {\n                                        childNode = children[ i ];\n                                        if ( childNode.isMetaTypeOf( meta.byName.Container ) ) {\n                                            queueList.push( watchFromContainerRec( childNode,\n                                                rootContainer, meta ) );\n                                        } else if ( childNode.isMetaTypeOf( meta.byName.AVMComponentModel ) ) {\n                                            component = getComponentInfo( childNode, rootContainer.id );\n                                            rootContainer.components[ childNode.getId() ] = component;\n                                            data.components[ childNode.getId() ] = component;\n                                        }\n                                    }\n                                    //                            rootNode.onNewChildLoaded(function (newChild) {\n                                    //                                if (newChild.isMetaTypeOf(meta.Container)) {\n                                    //                                    watchFromContainerRec(newChild, rootContainer, meta).then(function () {\n                                    //                                        updateListener({id: newChild.getId(), type: 'load', data: data});\n                                    //                                    });\n                                    //                                } else if (childNode.isMetaTypeOf(meta.AVMComponentModel)) {\n                                    //                                    rootContainer.components[childNode.getId()] = getComponentInfo(childNode, rootContainer.id);\n                                    //                                    updateListener({id: newChild.getId(), type: 'load', data: data});\n                                    //                                }\n                                    //\n                                    //                            });\n                                    if ( queueList.length === 0 ) {\n                                        deferred.resolve( data );\n                                    } else {\n                                        $q.all( queueList )\n                                            .then( function () {\n                                                deferred.resolve( data );\n                                            } );\n                                    }\n                                } );\n                        } );\n                } );\n\n            return deferred.promise;\n        };\n\n        /**\n         *  Watches the generated DesertConfigurationSets inside a Design.\n         * @param {object} parentContext - context of controller.\n         * @param {string} designId - path to design of which to watch.\n         * @param {function} updateListener - invoked when there are (filtered) changes in data.\n         * @returns {Promise} - Returns data when resolved.\n         */\n        this.watchConfigurationSets = function ( parentContext, designId, updateListener ) {\n            var deferred = $q.defer(),\n                regionId = parentContext.regionId + '_watchConfigurationSets_' + designId,\n                data = {\n                    regionId: regionId,\n                    configurationSets: {} //configurationSet {id: <string>, name: <string>, description: <string>}\n                },\n                context = {\n                    db: parentContext.db,\n                    regionId: regionId\n                };\n\n            watchers[ parentContext.regionId ] = watchers[ parentContext.regionId ] || {};\n            watchers[ parentContext.regionId ][ regionId ] = context;\n            nodeService.getMetaNodes( context )\n                .then( function ( meta ) {\n                    nodeService.loadNode( context, designId )\n                        .then( function ( designNode ) {\n                            data.name = designNode.getAttribute( 'name' );\n                            designNode.loadChildren( context )\n                                .then( function ( childNodes ) {\n                                    var i,\n                                        childId,\n                                        onUpdate = function ( id ) {\n                                            var newName = this.getAttribute( 'name' );\n                                            if ( newName !== data.configurationSets[ id ].name ) {\n                                                data.configurationSets[ id ].name = newName;\n                                                $timeout( function () {\n                                                    updateListener( {\n                                                        id: id,\n                                                        type: 'update',\n                                                        data: data\n                                                    } );\n                                                } );\n                                            }\n                                        },\n                                        onUnload = function ( id ) {\n                                            delete data.configurationSets[ id ];\n                                            $timeout( function () {\n                                                updateListener( {\n                                                    id: id,\n                                                    type: 'unload',\n                                                    data: data\n                                                } );\n                                            } );\n                                        };\n                                    for ( i = 0; i < childNodes.length; i += 1 ) {\n                                        if ( childNodes[ i ].isMetaTypeOf( meta.byName.DesertConfigurationSet ) ) {\n                                            childId = childNodes[ i ].getId();\n                                            data.configurationSets[ childId ] = {\n                                                id: childId,\n                                                name: childNodes[ i ].getAttribute( 'name' ),\n                                                description: childNodes[ i ].getAttribute( 'INFO' )\n                                            };\n                                            childNodes[ i ].onUpdate( onUpdate );\n                                            childNodes[ i ].onUnload( onUnload );\n                                        }\n                                    }\n\n                                    designNode.onNewChildLoaded( function ( newNode ) {\n                                        if ( newNode.isMetaTypeOf( meta.byName.DesertConfigurationSet ) ) {\n                                            childId = newNode.getId();\n                                            data.configurationSets[ childId ] = {\n                                                id: childId,\n                                                name: newNode.getAttribute( 'name' ),\n                                                description: newNode.getAttribute( 'INFO' )\n                                            };\n                                            newNode.onUpdate( onUpdate );\n                                            newNode.onUnload( onUnload );\n                                            $timeout( function () {\n                                                updateListener( {\n                                                    id: childId,\n                                                    type: 'load',\n                                                    data: data\n                                                } );\n                                            } );\n                                        }\n                                    } );\n                                    deferred.resolve( data );\n                                } );\n                        } );\n                } );\n            return deferred.promise;\n        };\n\n        /**\n         *  Watches the generated DesertConfigurations inside a DesertConfigurationSets.\n         * @param {object} parentContext - context of controller.\n         * @param {string} configurationSetId - path to DesertConfigurationSet of which to watch.\n         * @param {function} updateListener - invoked when there are (filtered) changes in data.\n         * @returns {Promise} - Returns data when resolved.\n         */\n        this.watchConfigurations = function ( parentContext, configurationSetId, updateListener ) {\n            var deferred = $q.defer(),\n                regionId = parentContext.regionId + '_watchConfigurations_' + configurationSetId,\n                data = {\n                    regionId: regionId,\n                    configurations: {} //configuration {id: <string>, name: <string>, alternativeAssignments: <string>}\n                },\n                context = {\n                    db: parentContext.db,\n                    regionId: regionId\n                };\n\n            watchers[ parentContext.regionId ] = watchers[ parentContext.regionId ] || {};\n            watchers[ parentContext.regionId ][ regionId ] = context;\n\n            nodeService.getMetaNodes( context )\n                .then( function ( meta ) {\n                    nodeService.loadNode( context, configurationSetId )\n                        .then( function ( cfgSetNode ) {\n                            cfgSetNode.loadChildren( context )\n                                .then( function ( childNodes ) {\n                                    var i,\n                                        childId,\n                                        onUpdate = function ( id ) {\n                                            var newName = this.getAttribute( 'name' ),\n                                                newAltAss = this.getAttribute( 'AlternativeAssignments' ),\n                                                hadChanges = false;\n\n                                            if ( newName !== data.configurations[ id ].name ) {\n                                                data.configurations[ id ].name = newName;\n                                                hadChanges = true;\n                                            }\n                                            if ( newAltAss !== data.configurations[ id ].alternativeAssignments ) {\n                                                data.configurations[ id ].alternativeAssignments =\n                                                    newAltAss;\n                                                hadChanges = true;\n                                            }\n\n                                            if ( hadChanges ) {\n                                                $timeout( function () {\n                                                    updateListener( {\n                                                        id: id,\n                                                        type: 'update',\n                                                        data: data.configurations[ id ]\n                                                    } );\n                                                } );\n                                            }\n                                        },\n                                        onUnload = function ( id ) {\n                                            if ( data.configurations[ id ] ) {\n                                                delete data.configurations[ id ];\n                                            }\n                                            $timeout( function () {\n                                                updateListener( {\n                                                    id: id,\n                                                    type: 'unload',\n                                                    data: null\n                                                } );\n                                            } );\n                                        };\n                                    for ( i = 0; i < childNodes.length; i += 1 ) {\n                                        childId = childNodes[ i ].getId();\n                                        if ( childNodes[ i ].isMetaTypeOf( meta.byName.DesertConfiguration ) ) {\n                                            data.configurations[ childId ] = {\n                                                id: childId,\n                                                name: childNodes[ i ].getAttribute( 'name' ),\n                                                alternativeAssignments: childNodes[ i ].getAttribute(\n                                                    'AlternativeAssignments' )\n                                            };\n                                            childNodes[ i ].onUpdate( onUpdate );\n                                            childNodes[ i ].onUnload( onUnload );\n                                        }\n                                    }\n\n                                    cfgSetNode.onNewChildLoaded( function ( newNode ) {\n                                        if ( newNode.isMetaTypeOf( meta.byName.DesertConfiguration ) ) {\n                                            childId = newNode.getId();\n                                            data.configurations[ childId ] = {\n                                                id: childId,\n                                                name: newNode.getAttribute( 'name' ),\n                                                alternativeAssignments: newNode.getAttribute(\n                                                    'AlternativeAssignments' )\n                                            };\n                                            newNode.onUpdate( onUpdate );\n                                            newNode.onUnload( onUnload );\n                                            $timeout( function () {\n                                                updateListener( {\n                                                    id: childId,\n                                                    type: 'load',\n                                                    data: data.configurations[ childId ]\n                                                } );\n                                            } );\n                                        }\n                                    } );\n\n                                    deferred.resolve( data );\n                                } );\n                        } );\n                } );\n            return deferred.promise;\n        };\n\n        /**\n         *  Watches the generated DesertConfigurationSets inside a Design.\n         * @param {object} parentContext - context of controller.\n         * @param {object} configuration - Configuration of which to watch.\n         * @param {string} configuration.id - path to Configuration of which to watch.\n         * @param {function} updateListener - invoked when there are (filtered) changes in data.\n         */\n        this.appendWatchResults = function ( parentContext, configuration ) {\n            var deferred = $q.defer(),\n                regionId = parentContext.regionId + '_watchResults_' + configuration.id,\n                context = {\n                    db: parentContext.db,\n                    regionId: regionId\n                };\n\n            watchers[ parentContext.regionId ] = watchers[ parentContext.regionId ] || {};\n            watchers[ parentContext.regionId ][ regionId ] = context;\n            configuration.regionId = regionId;\n            configuration.results = {};\n\n            nodeService.getMetaNodes( context )\n                .then( function ( meta ) {\n                    nodeService.loadNode( context, configuration.id )\n                        .then( function ( cfgNode ) {\n                            cfgNode.loadChildren( context )\n                                .then( function ( childNodes ) {\n                                    var i,\n                                        childId,\n                                        hasResults = false,\n                                        onUnload = function ( id ) {\n                                            $timeout( function () {\n                                                if ( configuration.results[ id ] ) {\n                                                    delete configuration.results[ id ];\n                                                }\n                                            } );\n                                        };\n                                    for ( i = 0; i < childNodes.length; i += 1 ) {\n                                        childId = childNodes[ i ].getId();\n                                        if ( childNodes[ i ].isMetaTypeOf( meta.byName.Result ) ) {\n                                            configuration.results[ childId ] = {\n                                                id: childId\n                                                //name: childNodes[i].getAttribute('name'),\n                                            };\n                                            //childNodes[i].onUpdate(onUpdate); TODO: When attributes are watch add this.\n                                            childNodes[ i ].onUnload( onUnload );\n                                            hasResults = true;\n                                        }\n                                    }\n\n                                    cfgNode.onNewChildLoaded( function ( newNode ) {\n                                        if ( newNode.isMetaTypeOf( meta.byName.Result ) ) {\n                                            childId = newNode.getId();\n                                            $timeout( function () {\n                                                configuration.results[ childId ] = {\n                                                    id: childId\n                                                };\n                                            } );\n                                        }\n                                    } );\n\n                                    deferred.resolve( hasResults );\n                                } );\n                        } );\n                } );\n\n            return deferred.promise;\n        };\n\n        this.callSaveDesertConfigurations = function ( context, setName, setDesc, configurations, designId ) {\n            var deferred = $q.defer(),\n                config = {\n                    activeNode: designId,\n                    runOnServer: false,\n                    pluginConfig: {\n                        setData: angular.toJson( {\n                            name: setName,\n                            description: setDesc || ''\n                        } ),\n                        configurations: angular.toJson( configurations )\n                    }\n                };\n\n            pluginService.runPlugin( context, 'SaveDesertConfigurations', config )\n                .then( function ( result ) {\n                    if ( result.success ) {\n                        deferred.resolve();\n                    } else {\n                        deferred.reject();\n                    }\n                } )\n                .\n            catch ( function ( reason ) {\n                deferred.reject( 'Something went terribly wrong, ' + reason );\n            } );\n\n            return deferred.promise;\n        };\n\n        /*\n        this.saveConfigurationSet = function ( setName, setDesc, configurations, designNode, meta ) {\n            var deferred = $q.defer(),\n                context = designNode.context;\n            nodeService.createNode( context, designNode, meta.DesertConfigurationSet,\n                'web-cyphy saveConfigurationSet' )\n                .then( function ( setNode ) {\n                    var counter = configurations.length,\n                        createConfig = function () {\n                            var cfgNode;\n                            counter -= 1;\n                            nodeService.createNode( context, setNode, meta.DesertConfiguration,\n                                'web-cyphy saveConfigurationSet' )\n                                .then( function ( newNode ) {\n                                    var name = configurations[ counter ].name;\n                                    cfgNode = newNode;\n                                    return cfgNode.setAttribute( 'name', name, 'web-cyphy set name to ' +\n                                        name );\n                                } )\n                                .then( function () {\n                                    var aaStr = JSON.stringify( configurations[ counter ].alternativeAssignments );\n                                    return cfgNode.setAttribute( 'AlternativeAssignments', aaStr,\n                                        'web-cyphy set AlternativeAssignments to ' + aaStr );\n                                } )\n                                .then( function () {\n                                    if ( counter > 0 ) {\n                                        createConfig();\n                                    } else {\n                                        deferred.resolve();\n                                    }\n                                } )\n                                .\n                            catch ( function ( reason ) {\n                                deferred.reject( 'Problems creating configurations nodes' + reason.toString() );\n                            } );\n\n                        };\n\n                    setNode.setAttribute( 'name', setName, 'web-cyphy set name to ' + setName )\n                        .then( function () {\n                            if ( setDesc ) {\n                                setNode.setAttribute( 'INFO', setDesc, 'web-cyphy set INFO to ' + setDesc )\n                                    .\n                                then( function () {\n                                    if ( counter > 0 ) {\n                                        createConfig();\n                                    } else {\n                                        deferred.reject( 'No configurations given!' );\n                                    }\n                                } );\n                            } else {\n                                if ( counter > 0 ) {\n                                    createConfig();\n                                } else {\n                                    deferred.reject( 'No configurations given!' );\n                                }\n                            }\n                        } );\n                } );\n\n            return deferred.promise;\n        };\n        */\n        /**\n         * See baseCyPhyService.cleanUpAllRegions.\n         */\n        this.cleanUpAllRegions = function ( parentContext ) {\n            baseCyPhyService.cleanUpAllRegions( watchers, parentContext );\n        };\n\n        /**\n         * See baseCyPhyService.cleanUpRegion.\n         */\n        this.cleanUpRegion = function ( parentContext, regionId ) {\n            baseCyPhyService.cleanUpRegion( watchers, parentContext, regionId );\n        };\n\n        /**\n         * See baseCyPhyService.registerWatcher.\n         */\n        this.registerWatcher = function ( parentContext, fn ) {\n            baseCyPhyService.registerWatcher( watchers, parentContext, fn );\n        };\n    } );","/*globals angular, GME*/\n\n/**\n * @author pmeijer / https://github.com/pmeijer\n */\n\nangular.module( 'cyphy.services' )\n    .service( 'executorService', function ( $q ) {\n        'use strict';\n        var executorClient = new GME.classes.ExecutorClient();\n\n        this.createJob = function ( jobData ) {\n            var deferred = $q.defer();\n            executorClient.createJob( jobData, function ( err, jobInfo ) {\n                if ( err ) {\n                    deferred.reject( err );\n                } else {\n                    deferred.resolve( jobInfo );\n                }\n            } );\n\n            return deferred.promise;\n        };\n\n        this.getInfo = function ( jobHash ) {\n            var deferred = $q.defer();\n            executorClient.getInfo( jobHash, function ( err, jobInfo ) {\n                if ( err ) {\n                    deferred.reject( err );\n                } else {\n                    deferred.resolve( jobInfo );\n                }\n            } );\n\n            return deferred.promise;\n        };\n\n        this.getWorkersInfo = function () {\n            var deferred = $q.defer();\n            executorClient.getWorkersInfo( function ( err, response ) {\n                if ( err ) {\n                    deferred.reject( err );\n                } else {\n                    deferred.resolve( response );\n                }\n            } );\n\n            return deferred.promise;\n        };\n    } );","/*globals angular, GME, console*/\n\n\n/**\n * @author pmeijer / https://github.com/pmeijer\n */\n\nangular.module( 'cyphy.services' )\n    .service( 'fileService', function ( $q ) {\n        'use strict';\n        var self = this,\n            blobClient = new GME.classes.BlobClient();\n\n        //TODO: Consider making an Artifact 'Class'.\n        this.createArtifact = function ( name ) {\n            return blobClient.createArtifact( name );\n        };\n\n        this.saveArtifact = function ( artifact ) {\n            var deferred = $q.defer();\n            artifact.save( function ( err, artieHash ) {\n                if ( err ) {\n                    deferred.reject( err );\n                } else {\n                    deferred.resolve( artieHash );\n                }\n            } );\n\n            return deferred.promise;\n        };\n\n        this.getArtifact = function ( hash ) {\n            var deferred = $q.defer();\n            blobClient.getArtifact( hash, function ( err, artifact ) {\n                if ( err ) {\n                    deferred.reject( err );\n                    return;\n                }\n                deferred.resolve( {\n                    artifact: artifact,\n                    hash: hash\n                } );\n            } );\n            return deferred.promise;\n        };\n\n        this.addFileToArtifact = function ( artifact, fileName, content ) {\n            var deferred = $q.defer();\n            artifact.addFile( fileName, content, function ( err, hashes ) {\n                if ( err ) {\n                    deferred.reject( err );\n                } else {\n                    deferred.resolve( hashes );\n                }\n            } );\n\n            return deferred.promise;\n        };\n\n        /**\n         * Adds multiple files to given artifact.\n         */\n        this.addFilesToArtifact = function ( artifact, files ) {\n            var deferred = $q.defer();\n            artifact.addFiles( files, function ( err, hashes ) {\n                if ( err ) {\n                    deferred.reject( err );\n                } else {\n                    deferred.resolve( hashes );\n                }\n            } );\n\n            return deferred.promise;\n        };\n\n        this.addFileAsSoftLinkToArtifact = function ( artifact, fileName, content ) {\n            var deferred = $q.defer();\n\n            artifact.addFileAsSoftLink( fileName, content, function ( err, hash ) {\n                if ( err ) {\n                    deferred.reject( err );\n                } else {\n                    deferred.resolve( hash );\n                }\n            } );\n\n            return deferred.promise;\n        };\n\n        this.getMetadata = function ( hash ) {\n            //        Example of returned data.\n            //        {\n            //            \"name\": \"tbAsset.zip\",\n            //            \"size\": 103854,\n            //            \"mime\": \"application/zip\",\n            //            \"isPublic\": false,\n            //            \"tags\": [],\n            //            \"content\": \"2357fbd673bec6e9590ee8ba34ec8df8a85ddaf8\",\n            //            \"contentType\": \"object\",\n            //            \"lastModified\": \"2014-11-09T00:21:22.000Z\"\n            //        }\n            var deferred = $q.defer();\n            blobClient.getMetadata( hash, function ( err, metaData ) {\n                if ( err ) {\n                    deferred.reject( err );\n                } else {\n                    deferred.resolve( metaData );\n                }\n            } );\n\n            return deferred.promise;\n        };\n\n        this.getObject = function ( hash ) {\n            var deferred = $q.defer();\n            blobClient.getObject( hash, function ( err, content ) {\n                if ( err ) {\n                    deferred.reject( err );\n                } else {\n                    deferred.resolve( content );\n                }\n            } );\n\n            return deferred.promise;\n        };\n\n        /**\n         * Returns the download url for the given hash.\n         * @param {string} hash - hash to blob file.\n         * @returns {string} - the download url (null if hash is empty).\n         */\n        this.getDownloadUrl = function ( hash ) {\n            var url;\n            if ( hash ) {\n                url = blobClient.getDownloadURL( hash );\n            } else {\n                console.warn( 'No hash to blob file given' );\n                url = null;\n            }\n\n            return url;\n        };\n\n        /**\n         * Returns the file extension of the given filename.\n         * @param {string} filename\n         * @returns {string} - the resulting file extension.\n         */\n        this.getFileExtension = function ( filename ) {\n            var a = filename.split( '.' );\n            if ( a.length === 1 || ( a[ 0 ] === '' && a.length === 2 ) ) {\n                return '';\n            }\n            return a.pop()\n                .toLowerCase();\n        };\n\n        /**\n         * Formats the size into a human readable string.\n         * @param {number} bytes - size in bytes.\n         * @param {boolean} si - return result in SIUnits or not.\n         * @returns {string} - formatted file size.\n         */\n        this.humanFileSize = function ( bytes, si ) {\n            var thresh = si ? 1000 : 1024,\n                units,\n                u;\n            if ( bytes < thresh ) {\n                return bytes + ' B';\n            }\n\n            units = si ? [ 'kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB' ] : [ 'KiB', 'MiB', 'GiB', 'TiB', 'PiB',\n                'EiB', 'ZiB', 'YiB'\n            ];\n            u = -1;\n\n            do {\n                bytes = bytes / thresh;\n                u += 1;\n            } while ( bytes >= thresh );\n\n            return bytes.toFixed( 1 ) + ' ' + units[ u ];\n        };\n\n        // WebCyPhySpecific functions.\n\n        /**\n         * TODO: This method should use promises internally!\n         * @param files\n         * @param validExtensions\n         * @returns {*}\n         */\n        this.saveDroppedFiles = function ( files, validExtensions ) {\n            var deferred = $q.defer(),\n                i,\n                counter = files.length,\n                artie = blobClient.createArtifact( 'droppedFiles' ),\n                addFile,\n                addedFiles = [],\n                fileExtensionToIcon = {\n                    'zip': 'fa fa-puzzle-piece',\n                    'adm': 'fa fa-cubes',\n                    'atm': 'glyphicon glyphicon-saved'\n                },\n                updateCounter = function () {\n                    counter -= 1;\n                    if ( counter <= 0 ) {\n                        deferred.resolve( addedFiles );\n                    }\n                };\n\n            counter = files.length;\n\n            addFile = function ( file ) {\n                var fileExtension = self.getFileExtension( file.name );\n                if ( !validExtensions || validExtensions[ fileExtension ] ) {\n                    artie.addFileAsSoftLink( file.name, file, function ( err, hash ) {\n                        if ( err ) {\n                            console.error( 'Could not add file \"' + file.name + '\" to blob, err: ' + err );\n                            updateCounter();\n                            return;\n                        }\n                        addedFiles.push( {\n                            hash: hash,\n                            name: file.name,\n                            type: fileExtension,\n                            size: self.humanFileSize( file.size, true ),\n                            url: blobClient.getDownloadURL( hash ),\n                            icon: fileExtensionToIcon[ fileExtension ] || ''\n                        } );\n                        updateCounter();\n                    } );\n                } else {\n                    updateCounter();\n                }\n            };\n            for ( i = 0; i < files.length; i += 1 ) {\n                addFile( files[ i ] );\n            }\n\n            return deferred.promise;\n        };\n    } );","/*globals angular, GME*/\n\n\n/**\n * @author pmeijer / https://github.com/pmeijer\n */\n\nangular.module( 'cyphy.services' )\n    .service( 'pluginService', function ( $q, dataStoreService, fileService ) {\n        'use strict';\n\n        /**\n         *\n         * @param {object} context\n         * @param {string} context.db\n         * @param {string} pluginName - Name of plugin to execute.\n         * @param {object} config - Object with plugin configuration.\n         * @param {object.string} config.activeNode - Path to activeNode.\n         * @param {object.Array.<string>} config.activeSelection - Paths to nodes in activeSelection.\n         * @param {object.boolean} config.runOnServer - Whether to run the plugin on the server or not.\n         * @param {object.object} config.pluginConfig - Plugin specific options.\n         */\n        this.runPlugin = function ( context, pluginName, config ) {\n            var deferred = $q.defer(),\n                dbConn = dataStoreService.getDatabaseConnection( context.db ),\n                interpreterManager = new GME.classes.InterpreterManager( dbConn.client );\n\n            interpreterManager.run( pluginName, config, function ( result ) {\n                if ( result ) {\n                    deferred.resolve( result );\n                } else {\n                    deferred.reject( 'No Result was return from plugin execution!' );\n                }\n            } );\n\n            return deferred.promise;\n        };\n\n        this.getPluginArtifactsHtml = function ( artieHashes ) {\n            var deferred = $q.defer(),\n                queueList = [],\n                i;\n\n            for ( i = 0; i < artieHashes.length; i += 1 ) {\n                queueList.push( fileService.getArtifact( artieHashes[ i ] ) );\n            }\n\n            if ( queueList.length === 0 ) {\n                deferred.resolve( '' );\n            } else {\n                $q.all( queueList )\n                    .then( function ( artifactsInfo ) {\n                        var j,\n                            downloadUrl,\n                            artieName,\n                            artifactsHtml = '';\n                        for ( j = 0; j < artifactsInfo.length; j += 1 ) {\n                            downloadUrl = fileService.getDownloadUrl( artifactsInfo[ j ].hash );\n                            artieName = artifactsInfo[ j ].artifact.name;\n                            artifactsHtml += '<br> <a href=\"' + downloadUrl + '\">' + artieName + '</a>';\n                        }\n                        deferred.resolve( artifactsHtml );\n                    } );\n            }\n\n            return deferred.promise;\n        };\n\n        this.getPluginArtifacts = function ( artieHashes ) {\n            var deferred = $q.defer(),\n                queueList = [],\n                i;\n\n            for ( i = 0; i < artieHashes.length; i += 1 ) {\n                queueList.push( fileService.getArtifact( artieHashes[ i ] ) );\n            }\n\n            if ( queueList.length === 0 ) {\n                deferred.resolve( '' );\n            } else {\n                $q.all( queueList )\n                    .then( function ( artifactsInfo ) {\n                        var j,\n                            downloadUrl,\n                            artieName,\n                            artifactsByName;\n\n                        artifactsByName = {};\n\n                        for ( j = 0; j < artifactsInfo.length; j += 1 ) {\n\n                            downloadUrl = fileService.getDownloadUrl( artifactsInfo[ j ].hash );\n                            artieName = artifactsInfo[ j ].artifact.name;\n\n                            artifactsByName[ artieName ] = angular.copy(artifactsInfo[ j ]);\n                            artifactsByName[ artieName].downloadUrl = downloadUrl;\n\n                        }\n                        deferred.resolve( artifactsByName );\n                    } );\n            }\n\n            return deferred.promise;\n        };\n\n    } );\n","/*globals angular, console*/\n\n/**\n * @author pmeijer / https://github.com/pmeijer\n * @author lattmann / https://github.com/lattmann\n */\n\nangular.module( 'cyphy.services' )\n    .service( 'testBenchService', function ( $q, $timeout, nodeService, baseCyPhyService, pluginService ) {\n        'use strict';\n        var self = this,\n            watchers = {};\n\n        this.editTestBenchFn = function ( data ) {\n            var modalInstance = data.modal.open( {\n                templateUrl: '/cyphy-components/templates/TestBenchEdit.html',\n                controller: 'TestBenchEditController',\n                //size: size,\n                resolve: {\n                    data: function () {\n                        return data;\n                    }\n                }\n            } );\n\n            modalInstance.result.then( function ( editedData ) {\n                var attrs = {};\n                if ( editedData.description !== data.testBench.description ) {\n                    attrs.INFO = editedData.description;\n                }\n                if ( editedData.name !== data.testBench.title ) {\n                    attrs.name = editedData.name;\n                }\n                if ( editedData.fileInfo.hash !== data.testBench.data.files ) {\n                    attrs.TestBenchFiles = editedData.fileInfo.hash;\n                }\n                if ( editedData.path !== data.testBench.data.path ) {\n                    attrs.ID = editedData.path;\n                }\n\n                self.setTestBenchAttributes( data.editContext, data.id, attrs )\n                    .then( function () {\n                        console.log( 'Attribute(s) updated' );\n                    } );\n            }, function () {\n                console.log( 'Modal dismissed at: ' + new Date() );\n            } );\n        };\n\n        this.deleteFn = function ( data ) {\n            var modalInstance = data.modal.open( {\n                templateUrl: '/cyphy-components/templates/SimpleModal.html',\n                controller: 'SimpleModalController',\n                resolve: {\n                    data: function () {\n                        return {\n                            title: 'Delete Test Bench',\n                            details: 'This will delete ' + data.name + ' from the workspace.'\n                        };\n                    }\n                }\n            } );\n\n            modalInstance.result.then( function () {\n                self.deleteTestBench( data.context, data.id );\n            }, function () {\n                console.log( 'Modal dismissed at: ' + new Date() );\n            } );\n        };\n\n        /**\n         * Removes the test bench from the context.\n         * @param {object} context - context of controller.\n         * @param {string} context.db - data-base connection.\n         * @param {string} testBenchId - Path to design-space.\n         * @param [msg] - Commit message.\n         */\n        this.deleteTestBench = function ( context, testBenchId, msg ) {\n            var message = msg || 'testBenchService.deleteTestBench ' + testBenchId;\n            nodeService.destroyNode( context, testBenchId, message );\n        };\n\n        this.exportTestBench = function ( /*testBenchId*/) {\n            throw new Error( 'Not implemented.' );\n        };\n\n        /**\n         * Updates the given attributes\n         * @param {object} context - Must exist within watchers and contain the test bench.\n         * @param {string} context.db - Must exist within watchers and contain the test bench.\n         * @param {string} context.regionId - Must exist within watchers and contain the test bench.\n         * @param {string} testBenchId - Path to test bench.\n         * @param {object} attrs - Keys are names of attributes and values are the wanted value.\n         */\n        this.setTestBenchAttributes = function ( context, testBenchId, attrs ) {\n            return baseCyPhyService.setNodeAttributes( context, testBenchId, attrs );\n        };\n\n        this.runTestBench = function ( context, testBenchId, configurationId ) {\n            var deferred = $q.defer(),\n                config = {\n                    activeNode: testBenchId,\n                    runOnServer: true,\n                    pluginConfig: {\n                        run: true,\n                        save: true,\n                        configurationPath: configurationId\n                    }\n                };\n            //console.log(JSON.stringify(config));\n            pluginService.runPlugin( context, 'TestBenchRunner', config )\n                .then( function ( result ) {\n                    var extendedResult = {\n                        success: result.success,\n                        messages: result.messages,\n                        unparsedResult: result\n                    };\n                    //console.log( 'Result', result );\n                    pluginService.getPluginArtifacts( result.artifacts )\n                        .then( function ( artifactsByName ) {\n                            extendedResult.artifacts = artifactsByName;\n                            deferred.resolve( extendedResult );\n                        } );\n                } )\n                .\n            catch ( function ( reason ) {\n                deferred.reject( 'Something went terribly wrong, ' + reason );\n            } );\n\n            return deferred.promise;\n        };\n\n        this.watchTestBenchNode = function ( parentContext, testBenchId, updateListener ) {\n            var deferred = $q.defer(),\n                regionId = parentContext.regionId + '_watchTestBench',\n                context = {\n                    db: parentContext.db,\n                    regionId: regionId\n                },\n                data = {\n                    regionId: regionId,\n                    meta: null, // META nodes - needed when creating new nodes...\n                    testBench: {} // {id: <string>, name: <string>, description: <string>, node <NodeObj>,\n                    //  tlsutId: <string>, path: <string>, results: <string>, file: <string>}\n                },\n                onUpdate = function ( id ) {\n                    var keyToAttr = {\n                        name: 'name',\n                        description: 'INFO',\n                        path: 'ID',\n                        results: 'Results',\n                        file: 'TestBenchFiles'\n                    },\n                        newTlsut = this.getPointer( 'TopLevelSystemUnderTest' )\n                            .to,\n                        tlsutChanged = false,\n                        hadChanges = self.checkForAttributeUpdates( data.testBench, this, keyToAttr );\n\n                    if ( newTlsut !== data.testBench.tlsutId ) {\n                        data.testBench.tlsutId = newTlsut;\n                        hadChanges = true;\n                        tlsutChanged = true;\n                    }\n                    if ( hadChanges ) {\n                        $timeout( function () {\n                            updateListener( {\n                                id: id,\n                                type: 'update',\n                                data: data.testBench,\n                                tlsutChanged: tlsutChanged\n                            } );\n                        } );\n                    }\n                },\n                onUnload = function ( id ) {\n                    $timeout( function () {\n                        updateListener( {\n                            id: id,\n                            type: 'unload',\n                            data: null\n                        } );\n                    } );\n                };\n            watchers[ parentContext.regionId ] = watchers[ parentContext.regionId ] || {};\n            watchers[ parentContext.regionId ][ context.regionId ] = context;\n            nodeService.getMetaNodes( context )\n                .then( function ( meta ) {\n                    nodeService.loadNode( context, testBenchId )\n                        .then( function ( testBenchNode ) {\n                            data.meta = meta;\n                            data.testBench = {\n                                id: testBenchId,\n                                name: testBenchNode.getAttribute( 'name' ),\n                                description: testBenchNode.getAttribute( 'INFO' ),\n                                path: testBenchNode.getAttribute( 'ID' ),\n                                results: testBenchNode.getAttribute( 'Results' ),\n                                files: testBenchNode.getAttribute( 'TestBenchFiles' ),\n                                tlsutId: testBenchNode.getPointer( 'TopLevelSystemUnderTest' )\n                                    .to,\n                                node: testBenchNode\n                            };\n                            testBenchNode.onUpdate( onUpdate );\n                            testBenchNode.onUnload( onUnload );\n                            deferred.resolve( data );\n                        } );\n                } );\n\n            return deferred.promise;\n        };\n\n        /**\n         *  Watches all test-benches (existence and their attributes) of a workspace.\n         * @param {object} parentContext - context of controller.\n         * @param {string} workspaceId - Path to workspace that should be watched.\n         * @param {function} updateListener - invoked when there are (filtered) changes in data. Data is an object in data.testBenches.\n         * @returns {Promise} - Returns data when resolved.\n         */\n        this.watchTestBenches = function ( parentContext, workspaceId, updateListener ) {\n            var deferred = $q.defer(),\n                regionId = parentContext.regionId + '_watchTestBenches',\n                context = {\n                    db: parentContext.db,\n                    projectId: parentContext.projectId,\n                    branchId: parentContext.branchId,\n                    regionId: regionId\n                },\n                data = {\n                    regionId: regionId,\n                    testBenches: {} // testBench {id: <string>, name: <string>, description: <string>,\n                    //            path: <string>, results: <hash|string>, files: <hash|string> }\n                },\n                triggerUpdateListener = function ( id, data, eventType ) {\n                    $timeout( function () {\n                        updateListener( {\n                            id: id,\n                            data: data,\n                            type: eventType\n                        } );\n                    } );\n                },\n                addNewTestBench = function ( id, node ) {\n                    data.testBenches[ id ] = {\n                        id: id,\n                        name: node.getAttribute( 'name' ),\n                        description: node.getAttribute( 'INFO' ),\n                        path: node.getAttribute( 'ID' ),\n                        results: node.getAttribute( 'Results' ),\n                        files: node.getAttribute( 'TestBenchFiles' )\n                    };\n                    node.onUnload( onUnload );\n                    node.onUpdate( onUpdate );\n                },\n                onUpdate = function ( id ) {\n                    var keyToAttr = {\n                        name: 'name',\n                        description: 'INFO',\n                        path: 'ID',\n                        results: 'Results',\n                        file: 'TestBenchFiles'\n                    },\n                        hadChanges = self.checkForAttributeUpdates( data.testBenches[ id ], this, keyToAttr );\n\n                    if ( hadChanges ) {\n                        triggerUpdateListener( id, data.testBenches[ id ], 'update' );\n                    }\n                },\n                onUnload = function ( id ) {\n                    delete data.testBenches[ id ];\n                    triggerUpdateListener( id, null, 'unload' );\n                },\n                watchFromFolderRec = function ( folderNode, meta ) {\n                    var recDeferred = $q.defer();\n                    folderNode.loadChildren()\n                        .then( function ( children ) {\n                            var i,\n                                testBenchId,\n                                queueList = [],\n                                childNode;\n                            for ( i = 0; i < children.length; i += 1 ) {\n                                childNode = children[ i ];\n                                if ( childNode.isMetaTypeOf( meta.byName.ATMFolder ) ) {\n                                    queueList.push( watchFromFolderRec( childNode, meta ) );\n                                } else if ( childNode.isMetaTypeOf( meta.byName.AVMTestBenchModel ) ) {\n                                    testBenchId = childNode.getId();\n                                    addNewTestBench( testBenchId, childNode );\n                                }\n                            }\n\n                            folderNode.onNewChildLoaded( function ( newChild ) {\n                                if ( newChild.isMetaTypeOf( meta.byName.ATMFolder ) ) {\n                                    watchFromFolderRec( newChild, meta );\n                                } else if ( newChild.isMetaTypeOf( meta.byName.AVMTestBenchModel ) ) {\n                                    testBenchId = newChild.getId();\n                                    addNewTestBench( testBenchId, newChild );\n                                    triggerUpdateListener( testBenchId, data.testBenches[ testBenchId ],\n                                        'load' );\n                                }\n                            } );\n                            if ( queueList.length === 0 ) {\n                                recDeferred.resolve();\n                            } else {\n                                $q.all( queueList )\n                                    .then( function () {\n                                        recDeferred.resolve();\n                                    } );\n                            }\n                        } );\n\n                    return recDeferred.promise;\n                };\n\n            watchers[ parentContext.regionId ] = watchers[ parentContext.regionId ] || {};\n            watchers[ parentContext.regionId ][ context.regionId ] = context;\n            nodeService.getMetaNodes( context )\n                .then( function ( meta ) {\n                    nodeService.loadNode( context, workspaceId )\n                        .then( function ( workspaceNode ) {\n                            workspaceNode.loadChildren()\n                                .then( function ( children ) {\n                                    var i,\n                                        queueList = [],\n                                        childNode;\n                                    for ( i = 0; i < children.length; i += 1 ) {\n                                        childNode = children[ i ];\n                                        if ( childNode.isMetaTypeOf( meta.byName.ATMFolder ) ) {\n                                            queueList.push( watchFromFolderRec( childNode, meta ) );\n                                        }\n                                    }\n                                    workspaceNode.onNewChildLoaded( function ( newChild ) {\n                                        if ( newChild.isMetaTypeOf( meta.byName.ATMFolder ) ) {\n                                            watchFromFolderRec( newChild, meta );\n                                        }\n                                    } );\n                                    if ( queueList.length === 0 ) {\n                                        deferred.resolve( data );\n                                    } else {\n                                        $q.all( queueList )\n                                            .then( function () {\n                                                deferred.resolve( data );\n                                            } );\n                                    }\n                                } );\n                        } );\n                } );\n\n            return deferred.promise;\n        };\n\n        /**\n         *  Watches a test-bench w.r.t. interfaces.\n         * @param parentContext - context of controller.\n         * @param testBenchId\n         * @param updateListener - invoked when there are (filtered) changes in data.\n         */\n        this.watchTestBenchDetails = function ( parentContext, testBenchId, updateListener ) {\n            var deferred = $q.defer(),\n                regionId = parentContext.regionId + '_watchTestBenchDetails_' + testBenchId,\n                context = {\n                    db: parentContext.db,\n                    regionId: regionId\n                },\n                data = {\n                    regionId: regionId,\n                    containerIds: [],\n                    tlsut: null\n                },\n                onUnload = function ( id ) {\n                    var index = data.containerIds.indexOf( id );\n                    if ( index > -1 ) {\n                        data.containerIds.splice( index, 1 );\n                        $timeout( function () {\n                            updateListener( {\n                                id: id,\n                                type: 'unload',\n                                data: data\n                            } );\n                        } );\n                    }\n                };\n            watchers[ parentContext.regionId ] = watchers[ parentContext.regionId ] || {};\n            watchers[ parentContext.regionId ][ context.regionId ] = context;\n            nodeService.getMetaNodes( context )\n                .then( function ( meta ) {\n                    nodeService.loadNode( context, testBenchId )\n                        .then( function ( testBenchNode ) {\n                            testBenchNode.loadChildren()\n                                .then( function ( children ) {\n                                    var i;\n                                    for ( i = 0; i < children.length; i += 1 ) {\n                                        if ( children[ i ].isMetaTypeOf( meta.byName.Container ) ) {\n                                            data.containerIds.push( children[ i ].getId() );\n                                            children[ i ].onUnload( onUnload );\n                                        }\n                                    }\n                                    testBenchNode.onNewChildLoaded( function ( newChild ) {\n                                        data.containerIds.push( newChild.getId() );\n                                        newChild.onUnload( onUnload );\n                                        $timeout( function () {\n                                            updateListener( {\n                                                id: newChild.getId(),\n                                                type: 'load',\n                                                data: data\n                                            } );\n                                        } );\n                                    } );\n                                    deferred.resolve( data );\n                                } );\n                        } );\n                } );\n\n            return deferred.promise;\n        };\n\n        this.checkForAttributeUpdates = function ( data, node, keyToAttr ) {\n            return baseCyPhyService.checkForAttributeUpdates( data, node, keyToAttr );\n        };\n\n        /**\n         *  Watches a test-bench w.r.t. interfaces.\n         * @param parentContext - context of controller.\n         * @param containerId\n         * @param updateListener - invoked when there are (filtered) changes in data.\n         */\n        this.watchInterfaces = function ( parentContext, containerId, updateListener ) {\n            return baseCyPhyService.watchInterfaces( watchers, parentContext, containerId, updateListener );\n        };\n\n        /**\n         * See baseCyPhyService.cleanUpAllRegions.\n         */\n        this.cleanUpAllRegions = function ( parentContext ) {\n            baseCyPhyService.cleanUpAllRegions( watchers, parentContext );\n        };\n\n        /**\n         * See baseCyPhyService.cleanUpRegion.\n         */\n        this.cleanUpRegion = function ( parentContext, regionId ) {\n            baseCyPhyService.cleanUpRegion( watchers, parentContext, regionId );\n        };\n\n        /**\n         * See baseCyPhyService.registerWatcher.\n         */\n        this.registerWatcher = function ( parentContext, fn ) {\n            baseCyPhyService.registerWatcher( watchers, parentContext, fn );\n        };\n    } );\n","/*globals angular, console*/\n\n/**\n * @author pmeijer / https://github.com/pmeijer\n * @author lattmann / https://github.com/lattmann\n */\n\n\nangular.module( 'cyphy.services' )\n    .service( 'workspaceService', function ( $q, $timeout, nodeService, baseCyPhyService, pluginService, fileService ) {\n        'use strict';\n        var self = this,\n            watchers = {};\n\n        this.callCreateWorkspace = function ( /*context, name, desc*/) {\n\n        };\n\n        this.createWorkspace = function ( context, name, desc ) {\n            var deferred = $q.defer(),\n                meta;\n            nodeService.getMetaNodes( context )\n                .then( function ( metaNodes ) {\n                    meta = metaNodes;\n                    return nodeService.createNode( context, '', meta.byName.WorkSpace,\n                        '[WebCyPhy] - WorkspaceService.createWorkspace' );\n                } )\n                .then( function ( wsNode ) {\n                    var acmFolderId,\n                        admFolderId,\n                        atmFolderId,\n                        createFolderNodes = function () {\n                            var parentId = wsNode.getId(),\n                                baseId = meta.byName.ACMFolder.getId();\n                            nodeService.createNode( context, parentId, baseId, '[WebCyPhy] - create ACMFolder' )\n                                .then( function ( acmNode ) {\n                                    acmFolderId = acmNode.getId();\n                                    baseId = meta.byName.ADMFolder.getId();\n                                    return nodeService.createNode( context, parentId, baseId,\n                                        '[WebCyPhy] - create ADMFolder' );\n                                } )\n                                .then( function ( admNode ) {\n                                    admFolderId = admNode.getId();\n                                    baseId = meta.byName.ATMFolder.getId();\n                                    return nodeService.createNode( context, parentId, baseId,\n                                        '[WebCyPhy] - create ATMFolder' );\n                                } )\n                                .then( function ( atmNode ) {\n                                    atmFolderId = atmNode.getId();\n                                    deferred.resolve( {\n                                        acm: acmFolderId,\n                                        adm: admFolderId,\n                                        atm: atmFolderId\n                                    } );\n                                } )\n                                .\n                            catch ( function ( reason ) {\n                                deferred.reject( reason );\n                            } );\n                        };\n\n                    wsNode.setAttribute( 'name', name, '[WebCyPhy] - set name to ' + name );\n                    if ( desc ) {\n                        wsNode.setAttribute( 'INFO', desc, '[WebCyPhy] - set INFO to ' + desc );\n                    }\n                    createFolderNodes();\n                } )\n                .\n            catch ( function ( reason ) {\n                deferred.reject( reason );\n            } );\n\n            return deferred.promise;\n        };\n\n        this.importFiles = function ( context, folderIds, files ) {\n            var deferred = $q.defer(),\n                i,\n                counter,\n                total,\n                fs = {\n                    acms: [],\n                    adms: [],\n                    atms: []\n                },\n                importAcmRec,\n                importAdmRec,\n                importAtmRec,\n                getNotify;\n\n            importAcmRec = function () {\n                counter -= 1;\n                if ( counter >= 0 ) {\n                    self.callAcmImporter( context, folderIds.acm, fs.acms[ counter ] )\n                        .then( getNotify( fs.acms[ counter ], 'acm' ), getNotify( fs.acms[ counter ] ), 'acm' );\n                } else {\n                    total = fs.adms.length;\n                    counter = total;\n                    importAdmRec();\n                }\n            };\n            importAdmRec = function () {\n                counter -= 1;\n                if ( counter >= 0 ) {\n                    self.callAdmImporter( context, folderIds.adm, fs.adms[ counter ] )\n                        .then( getNotify( fs.adms[ counter ], 'adm' ), getNotify( fs.adms[ counter ] ), 'adm' );\n                } else {\n                    total = fs.atms.length;\n                    counter = total;\n                    importAtmRec();\n                }\n            };\n            importAtmRec = function () {\n                counter -= 1;\n                if ( counter >= 0 ) {\n                    self.callAtmImporter( context, folderIds.atm, fs.atms[ counter ] )\n                        .then( getNotify( fs.atms[ counter ], 'atm' ), getNotify( fs.atms[ counter ], 'atm' ) );\n                } else {\n                    deferred.resolve();\n                }\n            };\n            getNotify = function ( fInfo, type ) {\n                return function ( result ) {\n                    if ( angular.isString( result ) === false && result.success === true ) {\n                        deferred.notify( {\n                            type: 'success',\n                            message: '<a href=\"' + fInfo.url + '\">' + fInfo.name +\n                                '</a>' + ' imported. ' + '[' + ( total - counter ) + '/' + total + ']'\n                        } );\n                    } else {\n                        deferred.notify( {\n                            type: 'error',\n                            message: '<a href=\"' + fInfo.url + '\">' + fInfo.name +\n                                '</a>' + ' failed to be imported, see console details.' +\n                                '[' + ( total - counter ) + '/' + total + ']'\n                        } );\n                        if ( angular.isString( result ) ) {\n                            console.error( result );\n                        } else {\n                            console.error( angular.toJson( result.messages, true ) );\n                        }\n                    }\n                    if ( type === 'acm' ) {\n                        importAcmRec();\n                    } else if ( type === 'adm' ) {\n                        importAdmRec();\n                    } else if ( type === 'atm' ) {\n                        importAtmRec();\n                    } else {\n                        deferred.reject( 'Unexpected import type ' + type );\n                    }\n                };\n            };\n            // hash: \"3636ead0785ca166f3b11193c4b2e5a670801eb1\" name: \"Damper.zip\" size: \"1.4 kB\" type: \"zip\"\n            // url: \"/rest/blob/download/3636ead0785ca166f3b11193c4b2e5a670801eb1\"\n            for ( i = 0; i < files.length; i += 1 ) {\n                if ( files[ i ].type === 'zip' ) {\n                    fs.acms.push( files[ i ] );\n                } else if ( files[ i ].type === 'adm' ) {\n                    fs.adms.push( files[ i ] );\n                } else if ( files[ i ].type === 'atm' ) {\n                    fs.atms.push( files[ i ] );\n                }\n            }\n\n            total = fs.acms.length;\n            counter = total;\n            importAcmRec();\n\n            return deferred.promise;\n        };\n\n        this.callAcmImporter = function ( context, folderId, fileInfo ) {\n            var deferred = $q.defer(),\n                config = {\n                    activeNode: folderId,\n                    runOnServer: false,\n                    pluginConfig: {\n                        UploadedFile: fileInfo.hash,\n                        DeleteExisting: true\n                    }\n                };\n\n            pluginService.runPlugin( context, 'AcmImporter', config )\n                .then( function ( result ) {\n                    //\"{\"success\":true,\"messages\":[],\"artifacts\":[],\"pluginName\":\"ACM Importer\",\n                    // \"startTime\":\"2014-11-08T02:51:21.383Z\",\"finishTime\":\"2014-11-08T02:51:21.939Z\",\"error\":null}\"\n                    deferred.resolve( result );\n                } )\n                .\n            catch ( function ( reason ) {\n                deferred.reject( 'Something went terribly wrong, ' + reason );\n            } );\n\n            return deferred.promise;\n        };\n\n        this.callAdmImporter = function ( context, folderId, fileInfo ) {\n            var deferred = $q.defer(),\n                config = {\n                    activeNode: folderId,\n                    runOnServer: false,\n                    pluginConfig: {\n                        admFile: fileInfo.hash\n                    }\n                };\n\n            pluginService.runPlugin( context, 'AdmImporter', config )\n                .then( function ( result ) {\n                    //\"{\"success\":true,\"messages\":[],\"artifacts\":[],\"pluginName\":\"ADM Importer\",\n                    // \"startTime\":\"2014-11-08T02:51:21.383Z\",\"finishTime\":\"2014-11-08T02:51:21.939Z\",\"error\":null}\"\n                    deferred.resolve( result );\n                } )\n                .\n            catch ( function ( reason ) {\n                deferred.reject( 'Something went terribly wrong, ' + reason );\n            } );\n\n            return deferred.promise;\n        };\n\n        this.callAtmImporter = function ( context, folderId, fileInfo ) {\n            var deferred = $q.defer(),\n                config = {\n                    activeNode: folderId,\n                    runOnServer: false,\n                    pluginConfig: {\n                        atmFile: fileInfo.hash\n                    }\n                };\n\n            pluginService.runPlugin( context, 'AtmImporter', config )\n                .then( function ( result ) {\n                    //\"{\"success\":true,\"messages\":[],\"artifacts\":[],\"pluginName\":\"ATM Importer\",\n                    // \"startTime\":\"2014-11-08T02:51:21.383Z\",\"finishTime\":\"2014-11-08T02:51:21.939Z\",\"error\":null}\"\n                    deferred.resolve( result );\n                } )\n                .\n            catch ( function ( reason ) {\n                deferred.reject( 'Something went terribly wrong, ' + reason );\n            } );\n\n            return deferred.promise;\n        };\n\n        /**\n         * Calls ExportWorkspace.\n         * @param {object} context - Context for plugin.\n         * @param {string} context.db - Database connection to pull model from.\n         * @param {string} workspaceId\n         * @returns {Promise} - resolves to download url if successful.\n         */\n        this.exportWorkspace = function ( context, workspaceId ) {\n            var deferred = $q.defer(),\n                config = {\n                    activeNode: workspaceId,\n                    runOnServer: false,\n                    pluginConfig: {}\n                };\n\n            pluginService.runPlugin( context, 'ExportWorkspace', config )\n                .then( function ( result ) {\n                    //\"{\"success\":true,\"messages\":[],\"artifacts\":[],\"pluginName\":\"ADM Importer\",\n                    // \"startTime\":\"2014-11-08T02:51:21.383Z\",\"finishTime\":\"2014-11-08T02:51:21.939Z\",\"error\":null}\"\n                    if ( result.success ) {\n                        console.log( result );\n                        deferred.resolve( fileService.getDownloadUrl( result.artifacts[ 0 ] ) );\n                    } else {\n                        if ( result.error ) {\n                            deferred.reject( result.error + ' messages: ' + angular.toJson( result.messages ) );\n                        } else {\n                            deferred.reject( angular.toJson( result.messages ) );\n                        }\n                    }\n                } )\n                .\n            catch ( function ( reason ) {\n                deferred.reject( 'Something went terribly wrong ' + reason );\n            } );\n\n            return deferred.promise;\n\n        };\n\n        /**\n         * Updates the given attributes\n         * @param {object} context - Must exist within watchers and contain the design.\n         * @param {string} context.db - Must exist within watchers and contain the design.\n         * @param {string} context.regionId - Must exist within watchers and contain the design.\n         * @param {string} workspaceId - Path to workspace.\n         * @param {object} attrs - Keys are names of attributes and values are the wanted value.\n         */\n        this.setWorkspaceAttributes = function ( context, workspaceId, attrs ) {\n            return baseCyPhyService.setNodeAttributes( context, workspaceId, attrs );\n        };\n\n        /**\n         * Removes the workspace from the context.\n         * @param {object} context - context of controller.\n         * @param {string} context.db - data-base connection.\n         * @param {string} workspaceId - Path to workspace.\n         * @param [msg] - Commit message.\n         */\n        this.deleteWorkspace = function ( context, workspaceId, msg ) {\n            var message = msg || 'WorkspaceService.deleteWorkspace ' + workspaceId;\n            nodeService.destroyNode( context, workspaceId, message );\n        };\n\n        // TODO: make sure the methods below gets resolved at error too.\n        /**\n         * Keeps track of the work-spaces defined in the root-node w.r.t. existence and attributes.\n         * @param {object} parentContext - context of controller (must have a regionId defined).\n         * @param {string} parentContext.db - data-base connection.\n         * @param {string} parentContext.regionId - regionId (of group).\n         * @param {function} updateListener - called on (filtered) changes in data-base. Data is an object in data.workspaces.\n         * @returns {Promise} - Returns data when resolved.\n         */\n        this.watchWorkspaces = function ( parentContext, updateListener ) {\n            var deferred = $q.defer(),\n                regionId = parentContext.regionId + '_watchWorkspaces',\n                context = {\n                    db: parentContext.db,\n                    regionId: regionId\n                },\n                data = {\n                    regionId: regionId,\n                    workspaces: {} // workspace = {id: <string>, name: <string>, description: <string>}\n                },\n                triggerUpdateListener = function ( id, data, eventType ) {\n                    $timeout( function () {\n                        updateListener( {\n                            id: id,\n                            data: data,\n                            type: eventType\n                        } );\n                    } );\n                },\n                addNewWorkspace = function ( id, node ) {\n                    data.workspaces[ id ] = {\n                        id: id,\n                        name: node.getAttribute( 'name' ),\n                        description: node.getAttribute( 'INFO' )\n                    };\n                    node.onUpdate( onUpdate );\n                    node.onUnload( onUnload );\n                },\n                onUpdate = function ( id ) {\n                    var keyToAttr = {\n                        name: 'name',\n                        description: 'INFO'\n                    },\n                        hadChanges = self.checkForAttributeUpdates( data.workspaces[ id ], this, keyToAttr );\n\n                    if ( hadChanges ) {\n                        triggerUpdateListener( id, data.workspaces[ id ], 'update' );\n                    }\n                },\n                onUnload = function ( id ) {\n                    delete data.workspaces[ id ];\n                    triggerUpdateListener( id, null, 'unload' );\n                };\n\n            watchers[ parentContext.regionId ] = watchers[ parentContext.regionId ] || {};\n            watchers[ parentContext.regionId ][ context.regionId ] = context;\n            nodeService.getMetaNodes( context )\n                .then( function ( meta ) {\n                    nodeService.loadNode( context, '' )\n                        .then( function ( rootNode ) {\n                            rootNode.loadChildren()\n                                .then( function ( children ) {\n                                    var i,\n                                        childNode,\n                                        wsId;\n                                    for ( i = 0; i < children.length; i += 1 ) {\n                                        childNode = children[ i ];\n                                        if ( childNode.isMetaTypeOf( meta.byName.WorkSpace ) ) {\n                                            wsId = childNode.getId();\n                                            addNewWorkspace( wsId, childNode );\n                                        }\n                                    }\n                                    rootNode.onNewChildLoaded( function ( newChild ) {\n                                        if ( newChild.isMetaTypeOf( meta.byName.WorkSpace ) ) {\n                                            wsId = newChild.getId();\n                                            addNewWorkspace( wsId, newChild );\n                                            triggerUpdateListener( wsId, data.workspaces[ wsId ],\n                                                'load' );\n                                        }\n                                    } );\n                                    deferred.resolve( data );\n                                } );\n                        } );\n                } );\n\n            return deferred.promise;\n        };\n\n        /**\n         * Keeps track of the number of components (defined in ACMFolders) in the workspace.\n         * @param {object} parentContext - context of controller (must have a regionId defined).\n         * @param {string} workspaceId\n         * @param {function} updateListener - called on (filtered) changes in data-base. Data is the updated data.count.\n         * @returns {Promise} - Returns data when resolved.\n         */\n        this.watchNumberOfComponents = function ( parentContext, workspaceId, updateListener ) {\n            var deferred = $q.defer(),\n                regionId = parentContext.regionId + '_watchNumberOfComponents_' + workspaceId,\n                context = {\n                    db: parentContext.db,\n                    regionId: regionId\n                },\n                data = {\n                    regionId: regionId,\n                    count: 0\n                },\n                watchFromFolderRec = function ( folderNode, meta ) {\n                    var recDeferred = $q.defer();\n                    folderNode.loadChildren()\n                        .then( function ( children ) {\n                            var i,\n                                queueList = [],\n                                childNode,\n                                onUnload = function ( id ) {\n                                    data.count -= 1;\n                                    $timeout( function () {\n                                        updateListener( {\n                                            id: id,\n                                            type: 'unload',\n                                            data: data.count\n                                        } );\n                                    } );\n                                };\n                            for ( i = 0; i < children.length; i += 1 ) {\n                                childNode = children[ i ];\n                                if ( childNode.isMetaTypeOf( meta.byName.ACMFolder ) ) {\n                                    queueList.push( watchFromFolderRec( childNode, meta ) );\n                                } else if ( childNode.isMetaTypeOf( meta.byName.AVMComponentModel ) ) {\n                                    data.count += 1;\n                                    childNode.onUnload( onUnload );\n                                }\n                            }\n\n                            folderNode.onNewChildLoaded( function ( newChild ) {\n                                if ( newChild.isMetaTypeOf( meta.byName.ACMFolder ) ) {\n                                    watchFromFolderRec( newChild, meta )\n                                        .then( function () {\n                                            $timeout( function () {\n                                                updateListener( {\n                                                    id: newChild.getId(),\n                                                    type: 'load',\n                                                    data: data.count\n                                                } );\n                                            } );\n                                        } );\n                                } else if ( newChild.isMetaTypeOf( meta.byName.AVMComponentModel ) ) {\n                                    data.count += 1;\n                                    newChild.onUnload( onUnload );\n                                    $timeout( function () {\n                                        updateListener( {\n                                            id: newChild.getId(),\n                                            type: 'load',\n                                            data: data.count\n                                        } );\n                                    } );\n                                }\n                            } );\n                            if ( queueList.length === 0 ) {\n                                recDeferred.resolve();\n                            } else {\n                                $q.all( queueList )\n                                    .then( function () {\n                                        recDeferred.resolve();\n                                    } );\n                            }\n                        } );\n\n                    return recDeferred.promise;\n                };\n\n            watchers[ parentContext.regionId ] = watchers[ parentContext.regionId ] || {};\n            watchers[ parentContext.regionId ][ context.regionId ] = context;\n            nodeService.getMetaNodes( context )\n                .then( function ( meta ) {\n                    nodeService.loadNode( context, workspaceId )\n                        .then( function ( workspaceNode ) {\n                            workspaceNode.loadChildren()\n                                .then( function ( children ) {\n                                    var i,\n                                        queueList = [],\n                                        childNode;\n                                    for ( i = 0; i < children.length; i += 1 ) {\n                                        childNode = children[ i ];\n                                        if ( childNode.isMetaTypeOf( meta.byName.ACMFolder ) ) {\n                                            queueList.push( watchFromFolderRec( childNode, meta ) );\n                                        }\n                                    }\n                                    workspaceNode.onNewChildLoaded( function ( newChild ) {\n                                        if ( newChild.isMetaTypeOf( meta.byName.ACMFolder ) ) {\n                                            watchFromFolderRec( newChild, meta )\n                                                .then( function () {\n                                                    $timeout( function () {\n                                                        updateListener( {\n                                                            id: newChild.getId(),\n                                                            type: 'load',\n                                                            data: data.count\n                                                        } );\n                                                    } );\n                                                } );\n                                        }\n                                    } );\n                                    if ( queueList.length === 0 ) {\n                                        deferred.resolve( data );\n                                    } else {\n                                        $q.all( queueList )\n                                            .then( function () {\n                                                deferred.resolve( data );\n                                            } );\n                                    }\n                                } );\n                        } );\n                } );\n\n            return deferred.promise;\n        };\n\n        /**\n         * Keeps track of the number of containers (defined in ADMFolders) in the workspace.\n         * @param {object} parentContext - context of controller (must have a regionId defined).\n         * @param {string} workspaceId\n         * @param {function} updateListener - called on (filtered) changes in data-base. Data is the updated data.count.\n         * @returns {Promise} - Returns data when resolved.\n         */\n        this.watchNumberOfDesigns = function ( parentContext, workspaceId, updateListener ) {\n            var deferred = $q.defer(),\n                regionId = parentContext.regionId + '_watchNumberOfDesigns_' + workspaceId,\n                context = {\n                    db: parentContext.db,\n                    regionId: regionId\n                },\n                data = {\n                    regionId: regionId,\n                    count: 0\n                },\n                watchFromFolderRec = function ( folderNode, meta ) {\n                    var recDeferred = $q.defer();\n                    folderNode.loadChildren()\n                        .then( function ( children ) {\n                            var i,\n                                queueList = [],\n                                childNode,\n                                onUnload = function ( id ) {\n                                    data.count -= 1;\n                                    $timeout( function () {\n                                        updateListener( {\n                                            id: id,\n                                            type: 'unload',\n                                            data: data.count\n                                        } );\n                                    } );\n                                };\n                            for ( i = 0; i < children.length; i += 1 ) {\n                                childNode = children[ i ];\n                                if ( childNode.isMetaTypeOf( meta.byName.ADMFolder ) ) {\n                                    queueList.push( watchFromFolderRec( childNode, meta ) );\n                                } else if ( childNode.isMetaTypeOf( meta.byName.Container ) ) {\n                                    data.count += 1;\n                                    childNode.onUnload( onUnload );\n                                }\n                            }\n\n                            folderNode.onNewChildLoaded( function ( newChild ) {\n                                if ( newChild.isMetaTypeOf( meta.byName.ADMFolder ) ) {\n                                    watchFromFolderRec( newChild, meta )\n                                        .then( function () {\n                                            $timeout( function () {\n                                                updateListener( {\n                                                    id: newChild.getId(),\n                                                    type: 'load',\n                                                    data: data.count\n                                                } );\n                                            } );\n                                        } );\n                                } else if ( newChild.isMetaTypeOf( meta.byName.Container ) ) {\n                                    data.count += 1;\n                                    newChild.onUnload( onUnload );\n                                    $timeout( function () {\n                                        updateListener( {\n                                            id: newChild.getId(),\n                                            type: 'load',\n                                            data: data.count\n                                        } );\n                                    } );\n                                }\n                            } );\n                            if ( queueList.length === 0 ) {\n                                recDeferred.resolve();\n                            } else {\n                                $q.all( queueList )\n                                    .then( function () {\n                                        recDeferred.resolve();\n                                    } );\n                            }\n                        } );\n\n                    return recDeferred.promise;\n                };\n\n            if ( watchers.hasOwnProperty( parentContext.regionId ) === false ) {\n                console.error( parentContext.regionId + ' is not a registered watcher! ' +\n                    'Use \"this.registerWatcher\" before trying to access Node Objects.' );\n            }\n            watchers[ parentContext.regionId ][ context.regionId ] = context;\n            nodeService.getMetaNodes( context )\n                .then( function ( meta ) {\n                    nodeService.loadNode( context, workspaceId )\n                        .then( function ( workspaceNode ) {\n                            workspaceNode.loadChildren()\n                                .then( function ( children ) {\n                                    var i,\n                                        queueList = [],\n                                        childNode;\n                                    for ( i = 0; i < children.length; i += 1 ) {\n                                        childNode = children[ i ];\n                                        if ( childNode.isMetaTypeOf( meta.byName.ADMFolder ) ) {\n                                            queueList.push( watchFromFolderRec( childNode, meta ) );\n                                        }\n                                    }\n                                    workspaceNode.onNewChildLoaded( function ( newChild ) {\n                                        if ( newChild.isMetaTypeOf( meta.byName.ADMFolder ) ) {\n                                            watchFromFolderRec( newChild, meta )\n                                                .then( function () {\n                                                    $timeout( function () {\n                                                        updateListener( {\n                                                            id: newChild.getId(),\n                                                            type: 'load',\n                                                            data: data.count\n                                                        } );\n                                                    } );\n                                                } );\n                                        }\n                                    } );\n                                    if ( queueList.length === 0 ) {\n                                        deferred.resolve( data );\n                                    } else {\n                                        $q.all( queueList )\n                                            .then( function () {\n                                                deferred.resolve( data );\n                                            } );\n                                    }\n                                } );\n                        } );\n                } );\n\n            return deferred.promise;\n        };\n\n        /**\n         * Keeps track of the number of test-benches (defined in ATMFolders) in the workspace.\n         * @param {object} parentContext - context of controller (must have a regionId defined).\n         * @param {string} workspaceId\n         * @param {function} updateListener - called on (filtered) changes in data-base. Data is the updated data.count.\n         * @returns {Promise} - Returns data when resolved.\n         */\n        this.watchNumberOfTestBenches = function ( parentContext, workspaceId, updateListener ) {\n            var deferred = $q.defer(),\n                regionId = parentContext.regionId + '_watchNumberOfTestBenches_' + workspaceId,\n                context = {\n                    db: parentContext.db,\n                    regionId: regionId\n                },\n                data = {\n                    regionId: regionId,\n                    count: 0\n                },\n                watchFromFolderRec = function ( folderNode, meta ) {\n                    var recDeferred = $q.defer();\n                    folderNode.loadChildren()\n                        .then( function ( children ) {\n                            var i,\n                                queueList = [],\n                                childNode,\n                                onUnload = function ( id ) {\n                                    data.count -= 1;\n                                    $timeout( function () {\n                                        updateListener( {\n                                            id: id,\n                                            type: 'unload',\n                                            data: data.count\n                                        } );\n                                    } );\n                                };\n                            for ( i = 0; i < children.length; i += 1 ) {\n                                childNode = children[ i ];\n                                if ( childNode.isMetaTypeOf( meta.byName.ATMFolder ) ) {\n                                    queueList.push( watchFromFolderRec( childNode, meta ) );\n                                } else if ( childNode.isMetaTypeOf( meta.byName.AVMTestBenchModel ) ) {\n                                    data.count += 1;\n                                    childNode.onUnload( onUnload );\n                                }\n                            }\n\n                            folderNode.onNewChildLoaded( function ( newChild ) {\n                                if ( newChild.isMetaTypeOf( meta.byName.ATMFolder ) ) {\n                                    watchFromFolderRec( newChild, meta )\n                                        .then( function () {\n                                            $timeout( function () {\n                                                updateListener( {\n                                                    id: newChild.getId(),\n                                                    type: 'load',\n                                                    data: data.count\n                                                } );\n                                            } );\n                                        } );\n                                } else if ( newChild.isMetaTypeOf( meta.byName.AVMTestBenchModel ) ) {\n                                    data.count += 1;\n                                    newChild.onUnload( onUnload );\n                                    $timeout( function () {\n                                        updateListener( {\n                                            id: newChild.getId(),\n                                            type: 'load',\n                                            data: data.count\n                                        } );\n                                    } );\n                                }\n                            } );\n                            if ( queueList.length === 0 ) {\n                                recDeferred.resolve();\n                            } else {\n                                $q.all( queueList )\n                                    .then( function () {\n                                        recDeferred.resolve();\n                                    } );\n                            }\n                        } );\n\n                    return recDeferred.promise;\n                };\n\n            watchers[ parentContext.regionId ] = watchers[ parentContext.regionId ] || {};\n            watchers[ parentContext.regionId ][ context.regionId ] = context;\n            nodeService.getMetaNodes( context )\n                .then( function ( meta ) {\n                    nodeService.loadNode( context, workspaceId )\n                        .then( function ( workspaceNode ) {\n                            workspaceNode.loadChildren()\n                                .then( function ( children ) {\n                                    var i,\n                                        queueList = [],\n                                        childNode;\n                                    for ( i = 0; i < children.length; i += 1 ) {\n                                        childNode = children[ i ];\n                                        if ( childNode.isMetaTypeOf( meta.byName.ATMFolder ) ) {\n                                            queueList.push( watchFromFolderRec( childNode, meta ) );\n                                        }\n                                    }\n                                    workspaceNode.onNewChildLoaded( function ( newChild ) {\n                                        if ( newChild.isMetaTypeOf( meta.byName.ATMFolder ) ) {\n                                            watchFromFolderRec( newChild, meta )\n                                                .then( function () {\n                                                    $timeout( function () {\n                                                        updateListener( {\n                                                            id: newChild.getId(),\n                                                            type: 'load',\n                                                            data: data.count\n                                                        } );\n                                                    } );\n                                                } );\n                                        }\n                                    } );\n                                    if ( queueList.length === 0 ) {\n                                        deferred.resolve( data );\n                                    } else {\n                                        $q.all( queueList )\n                                            .then( function () {\n                                                deferred.resolve( data );\n                                            } );\n                                    }\n                                } );\n                        } );\n                } );\n\n            return deferred.promise;\n        };\n\n        this.checkForAttributeUpdates = function ( data, node, keyToAttr ) {\n            return baseCyPhyService.checkForAttributeUpdates( data, node, keyToAttr );\n        };\n\n        /**\n         * See baseCyPhyService.cleanUpAllRegions.\n         */\n        this.cleanUpAllRegions = function ( parentContext ) {\n            baseCyPhyService.cleanUpAllRegions( watchers, parentContext );\n        };\n\n        /**\n         * See baseCyPhyService.cleanUpRegion.\n         */\n        this.cleanUpRegion = function ( parentContext, regionId ) {\n            baseCyPhyService.cleanUpRegion( watchers, parentContext, regionId );\n        };\n\n        /**\n         * See baseCyPhyService.registerWatcher.\n         */\n        this.registerWatcher = function ( parentContext, fn ) {\n            baseCyPhyService.registerWatcher( watchers, parentContext, fn );\n        };\n\n        this.logContext = function ( context ) {\n            nodeService.logContext( context );\n        };\n    } );","/*globals require, angular */\n/**\n * @author lattmann / https://github.com/lattmann\n * @author pmeijer / https://github.com/pmeijer\n */\n\nangular.module( 'cyphy.services', [ 'gme.services' ] );\nrequire( './BaseCyPhyService' );\nrequire( './PluginService' );\nrequire( './FileService' );\nrequire( './ExecutorService' );\nrequire( './WorkspaceService' );\nrequire( './ComponentService' );\nrequire( './DesignService' );\nrequire( './TestBenchService' );\nrequire( './DesertService' );\nrequire( './DesignLayoutService' );"]}