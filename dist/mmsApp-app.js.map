{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/app/mmsApp/app.js","bower_components/Array.prototype.find/index.js","bower_components/angular-native-dragdrop/draganddrop.js","bower_components/gl-matrix/dist/gl-matrix-min.js","src/app/mmsApp/classes/GMEProjectInitializers.js","src/app/mmsApp/directives/busyCover/busyCover.js","src/app/mmsApp/directives/componentWire/componentWire.js","src/app/mmsApp/directives/componentWire/componentWireCorner.js","src/app/mmsApp/directives/componentWire/componentWireSegment.js","src/app/mmsApp/directives/designEditor/classes/RandomSymbolGenerator.js","src/app/mmsApp/directives/designEditor/designEditor.js","src/app/mmsApp/directives/diagramContainer/classes/ScrollHandler.js","src/app/mmsApp/directives/diagramContainer/diagramContainer.js","src/app/mmsApp/directives/drawingGrid/drawingGrid.js","src/app/mmsApp/directives/fabricCanvas/fabricCanvas.js","src/app/mmsApp/directives/headerButtons/headerButtons.js","src/app/mmsApp/directives/port/port.js","src/app/mmsApp/directives/processingCover/processingCover.js","src/app/mmsApp/directives/resizing/resizeToHeight.js","src/app/mmsApp/directives/resizing/resizeToWindow.js","src/app/mmsApp/directives/socialMediaButtons/socialMediaButtons.js","src/app/mmsApp/directives/svgDiagram/classes/ComponentDragHandler.js","src/app/mmsApp/directives/svgDiagram/classes/ComponentSelectionHandler.js","src/app/mmsApp/directives/svgDiagram/classes/WireDragHandler.js","src/app/mmsApp/directives/svgDiagram/classes/WireDrawHandler.js","src/app/mmsApp/directives/svgDiagram/classes/contextMenuHandler.js","src/app/mmsApp/directives/svgDiagram/svgDiagram.js","src/app/mmsApp/directives/symbols/box/box.js","src/app/mmsApp/directives/symbols/capacitor/capacitor.js","src/app/mmsApp/directives/symbols/componentSymbol.js","src/app/mmsApp/directives/symbols/diode/diode.js","src/app/mmsApp/directives/symbols/inductor/inductor.js","src/app/mmsApp/directives/symbols/jFetP/jFetP.js","src/app/mmsApp/directives/symbols/opAmp/opAmp.js","src/app/mmsApp/directives/symbols/resistor/resistor.js","src/app/mmsApp/directives/symbols/simpleConnector/simpleConnector.js","src/app/mmsApp/directives/symbols/tvsDiode/tvsDiode.js","src/app/mmsApp/directives/testbenchActions/testbenchActions.js","src/app/mmsApp/libraryIncludes.js","src/app/mmsApp/services/connectionHandling/connectionHandling.js","src/app/mmsApp/services/diagramService/classes/ComponentPort.js","src/app/mmsApp/services/diagramService/classes/CyPhyDiagramParser.js","src/app/mmsApp/services/diagramService/classes/Diagram.js","src/app/mmsApp/services/diagramService/classes/DiagramComponent.js","src/app/mmsApp/services/diagramService/classes/DummyDiagramGenerator.js","src/app/mmsApp/services/diagramService/classes/Wire.js","src/app/mmsApp/services/diagramService/diagramService.js","src/app/mmsApp/services/gridService/gridService.js","src/app/mmsApp/services/operationsManager/operationsManager.js","src/app/mmsApp/services/projectHandling/projectHandling.js","src/app/mmsApp/services/symbolServices/classes/SymbolTypesSearchIndex.js","src/app/mmsApp/services/symbolServices/symbolServices.js","src/app/mmsApp/services/wiringService/classes/ElbowRouter.js","src/app/mmsApp/services/wiringService/classes/SimpleRouter.js","src/app/mmsApp/services/wiringService/wiringService.js","src/app/mmsApp/utils.js"],"names":[],"mappingsxPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5XA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChhzzfdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACttCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvrzhjxtrUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACthvSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzfile":"mmsApp-app.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*globals angular, ga*/\n\n'use strict';\n\nrequire('./libraryIncludes.js');\n\nrequire('ngDragDrop');\n\n\n\nrequire('./utils.js');\n\nrequire('./services/projectHandling/projectHandling.js');\nrequire('./services/connectionHandling/connectionHandling.js');\n\nrequire('./services/operationsManager/operationsManager.js');\n\nrequire('./services/diagramService/diagramService.js');\nrequire('./services/gridService/gridService.js');\nrequire('./services/wiringService/wiringService.js');\n\nrequire('./directives/headerButtons/headerButtons.js');\nrequire('./directives/socialMediaButtons/socialMediaButtons.js');\n\nrequire('./directives/diagramContainer/diagramContainer.js');\nrequire('./directives/fabricCanvas/fabricCanvas.js');\nrequire('./directives/svgDiagram/svgDiagram.js');\n\nrequire('./directives/symbols/componentSymbol.js');\n\nrequire('./directives/resizing/resizeToHeight.js');\nrequire('./directives/resizing/resizeToWindow.js');\n\nrequire('./directives/busyCover/busyCover.js');\nrequire('./directives/processingCover/processingCover.js');\n\nrequire('./directives/designEditor/designEditor');\n\nvar CyPhyApp = angular.module('CyPhyApp', [\n    'ui.router',\n\n    'gme.services',\n\n    'isis.ui.components',\n\n    'cyphy.components',\n\n    // app specific templates\n    'cyphy.mmsApp.templates',\n\n    'ui.bootstrap',\n\n    'mms.connectionHandling',\n    'mms.projectHandling',\n    'mms.headerButtons',\n    'mms.socialMediaButtons',\n\n    'mms.designVisualization.operationsManager',\n    'mms.designVisualization.wiringService',\n    'mms.designVisualization.diagramService',\n\n    'mms.designVisualization.diagramContainer',\n    'mms.designVisualization.fabricCanvas',\n    'mms.designVisualization.svgDiagram',\n    'mms.designVisualization.symbols',\n    'mms.resizeToWindow',\n    'mms.designVisualization.busyCover',\n    'mms.designVisualization.processingCover',\n    'mms.designVisualization.designEditor',\n    'angucomplete-alt',\n    'ngTouch',\n    'ngMaterial',\n    'ang-drag-drop',\n    'ngCookies'\n]);\n\nCyPhyApp.config(function ($stateProvider, $urlRouterProvider) {\n\n    var GMEProjectInitializers,\n        gmeProjectInitializers;\n\n    window.gapi = undefined;\n\n    GMEProjectInitializers = require('./classes/GMEProjectInitializers');\n    gmeProjectInitializers = new GMEProjectInitializers();\n\n    $urlRouterProvider.otherwise('/404');\n\n    $stateProvider\n\n        .state('editor', {\n            templateUrl: '/mmsApp/templates/editor.html',\n            url: '/editor',\n            abstract: true\n        })\n        .state('editor.branch', {\n            url: '/:projectId/:branchId',\n            resolve: {\n                selectProjectBranchWorkspaceAndDesign: gmeProjectInitializers.selectProjectBranchWorkspaceAndDesign\n            },\n            controller: 'EditorViewController'\n        })\n        .state('createDesign', {\n            url: '/createDesign/:projectId',\n            resolve: {\n                selectProject: gmeProjectInitializers.selectProject\n            },\n            controller: 'CreateDesignController'\n        })\n        .state('404', {\n            url: '/404',\n            templateUrl: '/mmsApp/templates/404.html',\n            views: {\n              'onCover': {\n                  templateUrl: '/mmsApp/templates/404.html',\n                  controller: 'NotFoundController'\n              }\n            }\n        });\n});\n\n\n\nCyPhyApp.controller('MainNavigatorController', function ($rootScope, $scope, $window, $mdDialog) {\n\n    var defaultNavigatorItems;\n\n    defaultNavigatorItems = [\n        {\n            id: 'root',\n            label: '',\n            itemClass: 'cyphy-root',\n            action: function(item, ev) {\n\n                function DialogController($scope, $mdDialog) {\n                    $scope.hide = function() {\n                        $mdDialog.hide();\n                    };\n                    $scope.close = function() {\n                        $mdDialog.cancel();\n                    };\n                }\n\n                $mdDialog.show({\n                    controller: DialogController,\n                    templateUrl: '/mmsApp/templates/aboutDialog.html',\n                    targetEvent: ev\n                })\n                    .then(function() {});\n\n            }\n        }\n    ];\n\n    $scope.navigator = {\n        separator: true,\n        items: angular.copy(defaultNavigatorItems, [])\n    };\n\n    $rootScope.$watch('activeDesign', function (activeDesign) {\n\n        if (activeDesign && activeDesign.id) {\n\n\n            $scope.navigator.items = angular.copy(defaultNavigatorItems, []);\n\n            $scope.navigator.items.push({\n                id: 'design',\n                label: activeDesign.name\n                //action: function () {\n                //    $window.open('/?project=' + projectId);\n                //}\n            });\n\n        } else {\n            $scope.navigator.items = angular.copy(defaultNavigatorItems, []);\n        }\n\n    });\n\n});\n\nCyPhyApp.controller('AppController', function ($rootScope, $cookies) {\n\n    $rootScope.busy = true;\n\n    ga('create', 'UA-58522767-1', {\n        'userId': $cookies.webgmeSid\n    });\n\n    // ga('send', 'pageview'); disable this if you use angulartics\n\n\n    //window.dragStart = function(evt) {\n    //    console.log('--------------' + evt);\n    //    evt.dataTransfer.effectAllowed = 'copy';\n    //    evt.dataTransfer.dropEffect = 'copy';\n    //};\n\n});\n\nCyPhyApp.controller('EditorViewController', function () {\n});\n\nCyPhyApp.controller('NotFoundController', function ($rootScope) {\n\n    $rootScope.stopBusy();\n\n});\n\nCyPhyApp.controller('CreateDesignController', function (\n    $rootScope, $scope, $stateParams, $http, $log, $state, growl, projectHandling, workspaceService) {\n\n    $scope.projectId = $stateParams.projectId;\n    $scope.errored = false;\n    $rootScope.setProcessing();\n\n    if ($rootScope.wsContext) {\n\n        $log.debug('Cleaning up workspace regions');\n        workspaceService.cleanUpAllRegions($rootScope.wsContext);\n\n    }\n\n    $rootScope.$emit('$destroy');\n\n    $log.debug('New branch creation');\n\n        projectHandling.cloneMaster()\n            .then(function (data) {\n\n            $rootScope.stopProcessing();\n            $log.debug('New project creation successful', data);\n            $state.go('editor.branch', {\n                projectId: $scope.projectId,\n                branchId: data\n            });\n\n        })\n        .catch(function (data, status) {\n\n            $log.debug('New project creation failed', status);\n            $rootScope.stopProcessing();\n            growl.error('An error occured while project creation. Please retry later.');\n\n        });\n\n});\n","// Array.prototype.find - MIT License (c) 2013 Paul Miller <http://paulmillr.com>\n// For all details and docs: https://github.com/paulmillr/array.prototype.find\n// Fixes and tests supplied by Duncan Hall <http://duncanhall.net> \n(function(globals){\n  if (Array.prototype.find) return;\n\n  var find = function(predicate) {\n    var list = Object(this);\n    var length = list.length < 0 ? 0 : list.length >>> 0; // ES.ToUint32;\n    if (length === 0) return undefined;\n    if (typeof predicate !== 'function' || Object.prototype.toString.call(predicate) !== '[object Function]') {\n      throw new TypeError('Array#find: predicate must be a function');\n    }\n    var thisArg = arguments[1];\n    for (var i = 0, value; i < length; i++) {\n      value = list[i];\n      if (predicate.call(thisArg, value, i, list)) return value;\n    }\n    return undefined;\n  };\n\n  if (Object.defineProperty) {\n    try {\n      Object.defineProperty(Array.prototype, 'find', {\n        value: find, configurable: true, enumerable: false, writable: true\n      });\n    } catch(e) {}\n  }\n\n  if (!Array.prototype.find) {\n    Array.prototype.find = find;\n  }\n})(this);\n","/**\n * Created with IntelliJ IDEA.\n * User: Ganaraj.Pr\n * Date: 11/10/13\n * Time: 11:27\n * To change this template use File | Settings | File Templates.\n */\n\n(function(angular){\n\nfunction isDnDsSupported(){\n    return 'draggable' in document.createElement(\"span\");\n}\n\nif(!isDnDsSupported()){\n    return;\n}\n\nif (window.jQuery && (-1 == window.jQuery.event.props.indexOf(\"dataTransfer\"))) {\n    window.jQuery.event.props.push(\"dataTransfer\");\n}\n\nvar currentData;\n\nangular.module(\"ang-drag-drop\",[])\n    .directive(\"uiDraggable\", [\n        '$parse',\n        '$rootScope',\n        '$dragImage',\n        function ($parse, $rootScope, $dragImage) {\n            return function (scope, element, attrs) {\n                var dragData = \"\",\n                    isDragHandleUsed = false,\n                    dragHandleClass,\n                    draggingClass = attrs.draggingClass || \"on-dragging\",\n                    dragTarget;\n\n                element.attr(\"draggable\", false);\n\n                attrs.$observe(\"uiDraggable\", function (newValue) {\n                    if(newValue){\n                        element.attr(\"draggable\", newValue);\n                    }\n                    else{\n                        element.removeAttr(\"draggable\");\n                    }\n\n                });\n\n                if (attrs.drag) {\n                    scope.$watch(attrs.drag, function (newValue) {\n                        dragData = newValue || \"\";\n                    });\n                }\n\n                if (angular.isString(attrs.dragHandleClass)) {\n                    isDragHandleUsed = true;\n                    dragHandleClass = attrs.dragHandleClass.trim() || \"drag-handle\";\n\n                    element.bind(\"mousedown\", function (e) {\n                        dragTarget = e.target;\n                    });\n                }\n\n                function dragendHandler(e) {\n                    setTimeout(function() {\n                      element.unbind('$destroy', dragendHandler);\n                    }, 0);\n                    var sendChannel = attrs.dragChannel || \"defaultchannel\";\n                    $rootScope.$broadcast(\"ANGULAR_DRAG_END\", sendChannel);\n                    if (e.dataTransfer && e.dataTransfer.dropEffect !== \"none\") {\n                        if (attrs.onDropSuccess) {\n                            var fn = $parse(attrs.onDropSuccess);\n                            scope.$apply(function () {\n                                fn(scope, {$event: e});\n                            });\n                        } else {\n                            if (attrs.onDropFailure) {\n                                var fn = $parse(attrs.onDropFailure);\n                                scope.$apply(function () {\n                                    fn(scope, {$event: e});\n                                });\n                            }\n                        }\n                    }\n                    element.removeClass(draggingClass);\n                }\n\n                element.bind(\"dragend\", dragendHandler);\n\n                element.bind(\"dragstart\", function (e) {\n                    var isDragAllowed = !isDragHandleUsed || dragTarget.classList.contains(dragHandleClass);\n\n                    if (isDragAllowed) {\n                        var sendChannel = attrs.dragChannel || \"defaultchannel\";\n                        var sendData = angular.toJson({ data: dragData, channel: sendChannel });\n                        var dragImage = attrs.dragImage || null;\n\n                        element.addClass(draggingClass);\n                        element.bind('$destroy', dragendHandler);\n\n                        if (dragImage) {\n                            var dragImageFn = $parse(attrs.dragImage);\n                            scope.$apply(function() {\n                                var dragImageParameters = dragImageFn(scope, {$event: e});\n                                if (dragImageParameters) {\n                                    if (angular.isString(dragImageParameters)) {\n                                        dragImageParameters = $dragImage.generate(dragImageParameters);\n                                    }\n                                    if (dragImageParameters.image) {\n                                        var xOffset = dragImageParameters.xOffset || 0,\n                                            yOffset = dragImageParameters.yOffset || 0;\n                                        e.dataTransfer.setDragImage(dragImageParameters.image, xOffset, yOffset);\n                                    }\n                                }\n                            });\n                        }\n\n                        e.dataTransfer.setData(\"dataToSend\", sendData);\n                        currentData = angular.fromJson(sendData);\n                        e.dataTransfer.effectAllowed = \"copyMove\";\n                        $rootScope.$broadcast(\"ANGULAR_DRAG_START\", sendChannel, currentData.data);\n                    }\n                    else {\n                        e.preventDefault();\n                    }\n                });\n            };\n        }\n    ])\n    .directive(\"uiOnDrop\", [\n        '$parse',\n        '$rootScope',\n        function ($parse, $rootScope) {\n            return function (scope, element, attr) {\n                var dragging = 0; //Ref. http://stackoverflow.com/a/10906204\n                var dropChannel = attr.dropChannel || \"defaultchannel\" ;\n                var dragChannel = \"\";\n                var dragEnterClass = attr.dragEnterClass || \"on-drag-enter\";\n                var dragHoverClass = attr.dragHoverClass || \"on-drag-hover\";\n                var customDragEnterEvent = $parse(attr.onDragEnter);\n                var customDragLeaveEvent = $parse(attr.onDragLeave);\n\n                function onDragOver(e) {\n                    if (e.preventDefault) {\n                        e.preventDefault(); // Necessary. Allows us to drop.\n                    }\n\n                    if (e.stopPropagation) {\n                        e.stopPropagation();\n                    }\n\n                    var fn = $parse(attr.uiOnDragOver);\n                    scope.$apply(function () {\n                        fn(scope, {$event: e, $channel: dropChannel});\n                    });\n\n                    e.dataTransfer.dropEffect = e.shiftKey ? 'copy' : 'move';\n                    return false;\n                }\n\n                function onDragLeave(e) {\n                    if (e.preventDefault) {\n                        e.preventDefault();\n                    }\n\n                    if (e.stopPropagation) {\n                        e.stopPropagation();\n                    }\n                    dragging--;\n\n                    if (dragging == 0) {\n                        scope.$apply(function () {\n                            customDragEnterEvent(scope, {$event: e});\n                        });\n                        element.removeClass(dragHoverClass);\n                    }\n\n                    var fn = $parse(attr.uiOnDragLeave);\n                    scope.$apply(function () {\n                        fn(scope, {$event: e, $channel: dropChannel});\n                    });\n                }\n\n                function onDragEnter(e) {\n                    if (e.preventDefault) {\n                        e.preventDefault();\n                    }\n\n                    if (e.stopPropagation) {\n                        e.stopPropagation();\n                    }\n                    dragging++;\n\n                    var fn = $parse(attr.uiOnDragEnter);\n                    scope.$apply(function () {\n                        fn(scope, {$event: e, $channel: dropChannel});\n                    });\n\n                    $rootScope.$broadcast(\"ANGULAR_HOVER\", dragChannel);\n                    scope.$apply(function () {\n                        customDragLeaveEvent(scope, {$event: e});\n                    });\n                    element.addClass(dragHoverClass);\n                }\n\n                function onDrop(e) {\n                    if (e.preventDefault) {\n                        e.preventDefault(); // Necessary. Allows us to drop.\n                    }\n                    if (e.stopPropagation) {\n                        e.stopPropagation(); // Necessary. Allows us to drop.\n                    }\n\n                    var sendData = e.dataTransfer.getData(\"dataToSend\");\n                    sendData = angular.fromJson(sendData);\n\n                    var fn = $parse(attr.uiOnDrop);\n                    scope.$apply(function () {\n                        fn(scope, {$data: sendData.data, $event: e, $channel: sendData.channel});\n                    });\n                    element.removeClass(dragEnterClass);\n                    dragging = 0;\n                }\n\n                function isDragChannelAccepted(dragChannel, dropChannel) {\n                    if (dropChannel === \"*\") {\n                        return true;\n                    }\n\n                    var channelMatchPattern = new RegExp(\"(\\\\s|[,])+(\" + dragChannel + \")(\\\\s|[,])+\", \"i\");\n\n                    return channelMatchPattern.test(\",\" + dropChannel + \",\");\n                }\n\n                function preventNativeDnD(e) {\n                    if (e.preventDefault) {\n                        e.preventDefault();\n                    }\n                    if (e.stopPropagation) {\n                        e.stopPropagation();\n                    }\n                    e.dataTransfer.dropEffect = \"none\";\n                    return false;\n                }\n\n\t\t\tvar deregisterDragStart = $rootScope.$on(\"ANGULAR_DRAG_START\", function (event, channel) {\n                    dragChannel = channel;\n                    if (isDragChannelAccepted(channel, dropChannel)) {\n                        if (attr.dropValidate) {\n                            var validateFn = $parse(attr.dropValidate);\n                            var valid = validateFn(scope, {$data: currentData.data, $channel: currentData.channel});\n                            if (!valid) {\n                                element.bind(\"dragover\", preventNativeDnD);\n                                element.bind(\"dragenter\", preventNativeDnD);\n                                element.bind(\"dragleave\", preventNativeDnD);\n                                element.bind(\"drop\", preventNativeDnD);\n\t\t\t\t\t\t\t\treturn;\n                            }\n                        }\n\n                        element.bind(\"dragover\", onDragOver);\n                        element.bind(\"dragenter\", onDragEnter);\n                        element.bind(\"dragleave\", onDragLeave);\n\n                        element.bind(\"drop\", onDrop);\n                        element.addClass(dragEnterClass);\n                    }\n\t\t\t\t\telse {\n\t\t\t\t\t    element.bind(\"dragover\", preventNativeDnD);\n\t\t\t\t\t    element.bind(\"dragenter\", preventNativeDnD);\n\t\t\t\t\t    element.bind(\"dragleave\", preventNativeDnD);\n\t\t\t\t\t    element.bind(\"drop\", preventNativeDnD);\n\t\t\t\t\t}\n\n                });\n\n\n\n                var deregisterDragEnd = $rootScope.$on(\"ANGULAR_DRAG_END\", function (e, channel) {\n                    dragChannel = \"\";\n                    if (isDragChannelAccepted(channel, dropChannel)) {\n\n                        element.unbind(\"dragover\", onDragOver);\n                        element.unbind(\"dragenter\", onDragEnter);\n                        element.unbind(\"dragleave\", onDragLeave);\n\n                        element.unbind(\"drop\", onDrop);\n                        element.removeClass(dragHoverClass);\n                        element.removeClass(dragEnterClass);\n                    }\n\n\t\t\t\t\telement.unbind(\"dragover\", preventNativeDnD);\n\t\t\t\t\telement.unbind(\"dragenter\", preventNativeDnD);\n\t\t\t\t\telement.unbind(\"dragleave\", preventNativeDnD);\n\t\t\t\t\telement.unbind(\"drop\", preventNativeDnD);\n                });\n\n\n                var deregisterDragHover = $rootScope.$on(\"ANGULAR_HOVER\", function (e, channel) {\n                    if (isDragChannelAccepted(channel, dropChannel)) {\n                      element.removeClass(dragHoverClass);\n                    }\n                });\n\n\n                scope.$on('$destroy', function () {\n                    deregisterDragStart();\n                    deregisterDragEnd();\n                    deregisterDragHover();\n                });\n\n\n                attr.$observe('dropChannel', function (value) {\n                    if (value) {\n                        dropChannel = value;\n                    }\n                });\n\n\n            };\n        }\n    ])\n    .constant(\"$dragImageConfig\", {\n        height: 20,\n        width: 200,\n        padding: 10,\n        font: 'bold 11px Arial',\n        fontColor: '#eee8d5',\n        backgroundColor: '#93a1a1',\n        xOffset: 0,\n        yOffset: 0\n    })\n    .service(\"$dragImage\", [\n        '$dragImageConfig',\n        function (defaultConfig) {\n            var ELLIPSIS = '…';\n\n            function fitString(canvas, text, config) {\n                var width = canvas.measureText(text).width;\n                if (width < config.width) {\n                    return text;\n                }\n                while (width + config.padding > config.width) {\n                    text = text.substring(0, text.length - 1);\n                    width = canvas.measureText(text + ELLIPSIS).width;\n                }\n                return text + ELLIPSIS;\n            };\n\n            this.generate = function (text, options) {\n                var config = angular.extend({}, defaultConfig, options || {});\n                var el = document.createElement('canvas');\n\n                el.height = config.height;\n                el.width = config.width;\n\n                var canvas = el.getContext('2d');\n\n                canvas.fillStyle = config.backgroundColor;\n                canvas.fillRect(0, 0, config.width, config.height);\n                canvas.font = config.font;\n                canvas.fillStyle = config.fontColor;\n\n                var title = fitString(canvas, text, config);\n                canvas.fillText(title, 4, config.padding + 4);\n\n                var image = new Image();\n                image.src = el.toDataURL();\n\n                return {\n                    image: image,\n                    xOffset: config.xOffset,\n                    yOffset: config.yOffset\n                };\n            }\n        }\n    ]);\n\n}(angular));\n","/**\n * @fileoverview gl-matrix - High performance matrix and vector operations\n * @author Brandon Jones\n * @author Colin MacKenzie IV\n * @version 2.2.1\n */\n/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright notice, this\n    list of conditions and the following disclaimer.\n  * Redistributions in binary form must reproduce the above copyright notice,\n    this list of conditions and the following disclaimer in the documentation\n    and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */\n(function(e){\"use strict\";var t={};typeof exports==\"undefined\"?typeof define==\"function\"&&typeof define.amd==\"object\"&&define.amd?(t.exports={},define(function(){return t.exports})):t.exports=typeof window!=\"undefined\"?window:e:t.exports=exports,function(e){if(!t)var t=1e-6;if(!n)var n=typeof Float32Array!=\"undefined\"?Float32Array:Array;if(!r)var r=Math.random;var i={};i.setMatrixArrayType=function(e){n=e},typeof e!=\"undefined\"&&(e.glMatrix=i);var s=Math.PI/180;i.toRadian=function(e){return e*s};var o={};o.create=function(){var e=new n(2);return e[0]=0,e[1]=0,e},o.clone=function(e){var t=new n(2);return t[0]=e[0],t[1]=e[1],t},o.fromValues=function(e,t){var r=new n(2);return r[0]=e,r[1]=t,r},o.copy=function(e,t){return e[0]=t[0],e[1]=t[1],e},o.set=function(e,t,n){return e[0]=t,e[1]=n,e},o.add=function(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e},o.subtract=function(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e},o.sub=o.subtract,o.multiply=function(e,t,n){return e[0]=t[0]*n[0],e[1]=t[1]*n[1],e},o.mul=o.multiply,o.divide=function(e,t,n){return e[0]=t[0]/n[0],e[1]=t[1]/n[1],e},o.div=o.divide,o.min=function(e,t,n){return e[0]=Math.min(t[0],n[0]),e[1]=Math.min(t[1],n[1]),e},o.max=function(e,t,n){return e[0]=Math.max(t[0],n[0]),e[1]=Math.max(t[1],n[1]),e},o.scale=function(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e},o.scaleAndAdd=function(e,t,n,r){return e[0]=t[0]+n[0]*r,e[1]=t[1]+n[1]*r,e},o.distance=function(e,t){var n=t[0]-e[0],r=t[1]-e[1];return Math.sqrt(n*n+r*r)},o.dist=o.distance,o.squaredDistance=function(e,t){var n=t[0]-e[0],r=t[1]-e[1];return n*n+r*r},o.sqrDist=o.squaredDistance,o.length=function(e){var t=e[0],n=e[1];return Math.sqrt(t*t+n*n)},o.len=o.length,o.squaredLength=function(e){var t=e[0],n=e[1];return t*t+n*n},o.sqrLen=o.squaredLength,o.negate=function(e,t){return e[0]=-t[0],e[1]=-t[1],e},o.normalize=function(e,t){var n=t[0],r=t[1],i=n*n+r*r;return i>0&&(i=1/Math.sqrt(i),e[0]=t[0]*i,e[1]=t[1]*i),e},o.dot=function(e,t){return e[0]*t[0]+e[1]*t[1]},o.cross=function(e,t,n){var r=t[0]*n[1]-t[1]*n[0];return e[0]=e[1]=0,e[2]=r,e},o.lerp=function(e,t,n,r){var i=t[0],s=t[1];return e[0]=i+r*(n[0]-i),e[1]=s+r*(n[1]-s),e},o.random=function(e,t){t=t||1;var n=r()*2*Math.PI;return e[0]=Math.cos(n)*t,e[1]=Math.sin(n)*t,e},o.transformMat2=function(e,t,n){var r=t[0],i=t[1];return e[0]=n[0]*r+n[2]*i,e[1]=n[1]*r+n[3]*i,e},o.transformMat2d=function(e,t,n){var r=t[0],i=t[1];return e[0]=n[0]*r+n[2]*i+n[4],e[1]=n[1]*r+n[3]*i+n[5],e},o.transformMat3=function(e,t,n){var r=t[0],i=t[1];return e[0]=n[0]*r+n[3]*i+n[6],e[1]=n[1]*r+n[4]*i+n[7],e},o.transformMat4=function(e,t,n){var r=t[0],i=t[1];return e[0]=n[0]*r+n[4]*i+n[12],e[1]=n[1]*r+n[5]*i+n[13],e},o.forEach=function(){var e=o.create();return function(t,n,r,i,s,o){var u,a;n||(n=2),r||(r=0),i?a=Math.min(i*n+r,t.length):a=t.length;for(u=r;u<a;u+=n)e[0]=t[u],e[1]=t[u+1],s(e,e,o),t[u]=e[0],t[u+1]=e[1];return t}}(),o.str=function(e){return\"vec2(\"+e[0]+\", \"+e[1]+\")\"},typeof e!=\"undefined\"&&(e.vec2=o);var u={};u.create=function(){var e=new n(3);return e[0]=0,e[1]=0,e[2]=0,e},u.clone=function(e){var t=new n(3);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t},u.fromValues=function(e,t,r){var i=new n(3);return i[0]=e,i[1]=t,i[2]=r,i},u.copy=function(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e},u.set=function(e,t,n,r){return e[0]=t,e[1]=n,e[2]=r,e},u.add=function(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e},u.subtract=function(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e},u.sub=u.subtract,u.multiply=function(e,t,n){return e[0]=t[0]*n[0],e[1]=t[1]*n[1],e[2]=t[2]*n[2],e},u.mul=u.multiply,u.divide=function(e,t,n){return e[0]=t[0]/n[0],e[1]=t[1]/n[1],e[2]=t[2]/n[2],e},u.div=u.divide,u.min=function(e,t,n){return e[0]=Math.min(t[0],n[0]),e[1]=Math.min(t[1],n[1]),e[2]=Math.min(t[2],n[2]),e},u.max=function(e,t,n){return e[0]=Math.max(t[0],n[0]),e[1]=Math.max(t[1],n[1]),e[2]=Math.max(t[2],n[2]),e},u.scale=function(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e},u.scaleAndAdd=function(e,t,n,r){return e[0]=t[0]+n[0]*r,e[1]=t[1]+n[1]*r,e[2]=t[2]+n[2]*r,e},u.distance=function(e,t){var n=t[0]-e[0],r=t[1]-e[1],i=t[2]-e[2];return Math.sqrt(n*n+r*r+i*i)},u.dist=u.distance,u.squaredDistance=function(e,t){var n=t[0]-e[0],r=t[1]-e[1],i=t[2]-e[2];return n*n+r*r+i*i},u.sqrDist=u.squaredDistance,u.length=function(e){var t=e[0],n=e[1],r=e[2];return Math.sqrt(t*t+n*n+r*r)},u.len=u.length,u.squaredLength=function(e){var t=e[0],n=e[1],r=e[2];return t*t+n*n+r*r},u.sqrLen=u.squaredLength,u.negate=function(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e},u.normalize=function(e,t){var n=t[0],r=t[1],i=t[2],s=n*n+r*r+i*i;return s>0&&(s=1/Math.sqrt(s),e[0]=t[0]*s,e[1]=t[1]*s,e[2]=t[2]*s),e},u.dot=function(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]},u.cross=function(e,t,n){var r=t[0],i=t[1],s=t[2],o=n[0],u=n[1],a=n[2];return e[0]=i*a-s*u,e[1]=s*o-r*a,e[2]=r*u-i*o,e},u.lerp=function(e,t,n,r){var i=t[0],s=t[1],o=t[2];return e[0]=i+r*(n[0]-i),e[1]=s+r*(n[1]-s),e[2]=o+r*(n[2]-o),e},u.random=function(e,t){t=t||1;var n=r()*2*Math.PI,i=r()*2-1,s=Math.sqrt(1-i*i)*t;return e[0]=Math.cos(n)*s,e[1]=Math.sin(n)*s,e[2]=i*t,e},u.transformMat4=function(e,t,n){var r=t[0],i=t[1],s=t[2];return e[0]=n[0]*r+n[4]*i+n[8]*s+n[12],e[1]=n[1]*r+n[5]*i+n[9]*s+n[13],e[2]=n[2]*r+n[6]*i+n[10]*s+n[14],e},u.transformMat3=function(e,t,n){var r=t[0],i=t[1],s=t[2];return e[0]=r*n[0]+i*n[3]+s*n[6],e[1]=r*n[1]+i*n[4]+s*n[7],e[2]=r*n[2]+i*n[5]+s*n[8],e},u.transformQuat=function(e,t,n){var r=t[0],i=t[1],s=t[2],o=n[0],u=n[1],a=n[2],f=n[3],l=f*r+u*s-a*i,c=f*i+a*r-o*s,h=f*s+o*i-u*r,p=-o*r-u*i-a*s;return e[0]=l*f+p*-o+c*-a-h*-u,e[1]=c*f+p*-u+h*-o-l*-a,e[2]=h*f+p*-a+l*-u-c*-o,e},u.rotateX=function(e,t,n,r){var i=[],s=[];return i[0]=t[0]-n[0],i[1]=t[1]-n[1],i[2]=t[2]-n[2],s[0]=i[0],s[1]=i[1]*Math.cos(r)-i[2]*Math.sin(r),s[2]=i[1]*Math.sin(r)+i[2]*Math.cos(r),e[0]=s[0]+n[0],e[1]=s[1]+n[1],e[2]=s[2]+n[2],e},u.rotateY=function(e,t,n,r){var i=[],s=[];return i[0]=t[0]-n[0],i[1]=t[1]-n[1],i[2]=t[2]-n[2],s[0]=i[2]*Math.sin(r)+i[0]*Math.cos(r),s[1]=i[1],s[2]=i[2]*Math.cos(r)-i[0]*Math.sin(r),e[0]=s[0]+n[0],e[1]=s[1]+n[1],e[2]=s[2]+n[2],e},u.rotateZ=function(e,t,n,r){var i=[],s=[];return i[0]=t[0]-n[0],i[1]=t[1]-n[1],i[2]=t[2]-n[2],s[0]=i[0]*Math.cos(r)-i[1]*Math.sin(r),s[1]=i[0]*Math.sin(r)+i[1]*Math.cos(r),s[2]=i[2],e[0]=s[0]+n[0],e[1]=s[1]+n[1],e[2]=s[2]+n[2],e},u.forEach=function(){var e=u.create();return function(t,n,r,i,s,o){var u,a;n||(n=3),r||(r=0),i?a=Math.min(i*n+r,t.length):a=t.length;for(u=r;u<a;u+=n)e[0]=t[u],e[1]=t[u+1],e[2]=t[u+2],s(e,e,o),t[u]=e[0],t[u+1]=e[1],t[u+2]=e[2];return t}}(),u.str=function(e){return\"vec3(\"+e[0]+\", \"+e[1]+\", \"+e[2]+\")\"},typeof e!=\"undefined\"&&(e.vec3=u);var a={};a.create=function(){var e=new n(4);return e[0]=0,e[1]=0,e[2]=0,e[3]=0,e},a.clone=function(e){var t=new n(4);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t},a.fromValues=function(e,t,r,i){var s=new n(4);return s[0]=e,s[1]=t,s[2]=r,s[3]=i,s},a.copy=function(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e},a.set=function(e,t,n,r,i){return e[0]=t,e[1]=n,e[2]=r,e[3]=i,e},a.add=function(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e},a.subtract=function(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e[3]=t[3]-n[3],e},a.sub=a.subtract,a.multiply=function(e,t,n){return e[0]=t[0]*n[0],e[1]=t[1]*n[1],e[2]=t[2]*n[2],e[3]=t[3]*n[3],e},a.mul=a.multiply,a.divide=function(e,t,n){return e[0]=t[0]/n[0],e[1]=t[1]/n[1],e[2]=t[2]/n[2],e[3]=t[3]/n[3],e},a.div=a.divide,a.min=function(e,t,n){return e[0]=Math.min(t[0],n[0]),e[1]=Math.min(t[1],n[1]),e[2]=Math.min(t[2],n[2]),e[3]=Math.min(t[3],n[3]),e},a.max=function(e,t,n){return e[0]=Math.max(t[0],n[0]),e[1]=Math.max(t[1],n[1]),e[2]=Math.max(t[2],n[2]),e[3]=Math.max(t[3],n[3]),e},a.scale=function(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e},a.scaleAndAdd=function(e,t,n,r){return e[0]=t[0]+n[0]*r,e[1]=t[1]+n[1]*r,e[2]=t[2]+n[2]*r,e[3]=t[3]+n[3]*r,e},a.distance=function(e,t){var n=t[0]-e[0],r=t[1]-e[1],i=t[2]-e[2],s=t[3]-e[3];return Math.sqrt(n*n+r*r+i*i+s*s)},a.dist=a.distance,a.squaredDistance=function(e,t){var n=t[0]-e[0],r=t[1]-e[1],i=t[2]-e[2],s=t[3]-e[3];return n*n+r*r+i*i+s*s},a.sqrDist=a.squaredDistance,a.length=function(e){var t=e[0],n=e[1],r=e[2],i=e[3];return Math.sqrt(t*t+n*n+r*r+i*i)},a.len=a.length,a.squaredLength=function(e){var t=e[0],n=e[1],r=e[2],i=e[3];return t*t+n*n+r*r+i*i},a.sqrLen=a.squaredLength,a.negate=function(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=-t[3],e},a.normalize=function(e,t){var n=t[0],r=t[1],i=t[2],s=t[3],o=n*n+r*r+i*i+s*s;return o>0&&(o=1/Math.sqrt(o),e[0]=t[0]*o,e[1]=t[1]*o,e[2]=t[2]*o,e[3]=t[3]*o),e},a.dot=function(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]+e[3]*t[3]},a.lerp=function(e,t,n,r){var i=t[0],s=t[1],o=t[2],u=t[3];return e[0]=i+r*(n[0]-i),e[1]=s+r*(n[1]-s),e[2]=o+r*(n[2]-o),e[3]=u+r*(n[3]-u),e},a.random=function(e,t){return t=t||1,e[0]=r(),e[1]=r(),e[2]=r(),e[3]=r(),a.normalize(e,e),a.scale(e,e,t),e},a.transformMat4=function(e,t,n){var r=t[0],i=t[1],s=t[2],o=t[3];return e[0]=n[0]*r+n[4]*i+n[8]*s+n[12]*o,e[1]=n[1]*r+n[5]*i+n[9]*s+n[13]*o,e[2]=n[2]*r+n[6]*i+n[10]*s+n[14]*o,e[3]=n[3]*r+n[7]*i+n[11]*s+n[15]*o,e},a.transformQuat=function(e,t,n){var r=t[0],i=t[1],s=t[2],o=n[0],u=n[1],a=n[2],f=n[3],l=f*r+u*s-a*i,c=f*i+a*r-o*s,h=f*s+o*i-u*r,p=-o*r-u*i-a*s;return e[0]=l*f+p*-o+c*-a-h*-u,e[1]=c*f+p*-u+h*-o-l*-a,e[2]=h*f+p*-a+l*-u-c*-o,e},a.forEach=function(){var e=a.create();return function(t,n,r,i,s,o){var u,a;n||(n=4),r||(r=0),i?a=Math.min(i*n+r,t.length):a=t.length;for(u=r;u<a;u+=n)e[0]=t[u],e[1]=t[u+1],e[2]=t[u+2],e[3]=t[u+3],s(e,e,o),t[u]=e[0],t[u+1]=e[1],t[u+2]=e[2],t[u+3]=e[3];return t}}(),a.str=function(e){return\"vec4(\"+e[0]+\", \"+e[1]+\", \"+e[2]+\", \"+e[3]+\")\"},typeof e!=\"undefined\"&&(e.vec4=a);var f={};f.create=function(){var e=new n(4);return e[0]=1,e[1]=0,e[2]=0,e[3]=1,e},f.clone=function(e){var t=new n(4);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t},f.copy=function(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e},f.identity=function(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=1,e},f.transpose=function(e,t){if(e===t){var n=t[1];e[1]=t[2],e[2]=n}else e[0]=t[0],e[1]=t[2],e[2]=t[1],e[3]=t[3];return e},f.invert=function(e,t){var n=t[0],r=t[1],i=t[2],s=t[3],o=n*s-i*r;return o?(o=1/o,e[0]=s*o,e[1]=-r*o,e[2]=-i*o,e[3]=n*o,e):null},f.adjoint=function(e,t){var n=t[0];return e[0]=t[3],e[1]=-t[1],e[2]=-t[2],e[3]=n,e},f.determinant=function(e){return e[0]*e[3]-e[2]*e[1]},f.multiply=function(e,t,n){var r=t[0],i=t[1],s=t[2],o=t[3],u=n[0],a=n[1],f=n[2],l=n[3];return e[0]=r*u+s*a,e[1]=i*u+o*a,e[2]=r*f+s*l,e[3]=i*f+o*l,e},f.mul=f.multiply,f.rotate=function(e,t,n){var r=t[0],i=t[1],s=t[2],o=t[3],u=Math.sin(n),a=Math.cos(n);return e[0]=r*a+s*u,e[1]=i*a+o*u,e[2]=r*-u+s*a,e[3]=i*-u+o*a,e},f.scale=function(e,t,n){var r=t[0],i=t[1],s=t[2],o=t[3],u=n[0],a=n[1];return e[0]=r*u,e[1]=i*u,e[2]=s*a,e[3]=o*a,e},f.str=function(e){return\"mat2(\"+e[0]+\", \"+e[1]+\", \"+e[2]+\", \"+e[3]+\")\"},f.frob=function(e){return Math.sqrt(Math.pow(e[0],2)+Math.pow(e[1],2)+Math.pow(e[2],2)+Math.pow(e[3],2))},f.LDU=function(e,t,n,r){return e[2]=r[2]/r[0],n[0]=r[0],n[1]=r[1],n[3]=r[3]-e[2]*n[1],[e,t,n]},typeof e!=\"undefined\"&&(e.mat2=f);var l={};l.create=function(){var e=new n(6);return e[0]=1,e[1]=0,e[2]=0,e[3]=1,e[4]=0,e[5]=0,e},l.clone=function(e){var t=new n(6);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t},l.copy=function(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e},l.identity=function(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=1,e[4]=0,e[5]=0,e},l.invert=function(e,t){var n=t[0],r=t[1],i=t[2],s=t[3],o=t[4],u=t[5],a=n*s-r*i;return a?(a=1/a,e[0]=s*a,e[1]=-r*a,e[2]=-i*a,e[3]=n*a,e[4]=(i*u-s*o)*a,e[5]=(r*o-n*u)*a,e):null},l.determinant=function(e){return e[0]*e[3]-e[1]*e[2]},l.multiply=function(e,t,n){var r=t[0],i=t[1],s=t[2],o=t[3],u=t[4],a=t[5],f=n[0],l=n[1],c=n[2],h=n[3],p=n[4],d=n[5];return e[0]=r*f+s*l,e[1]=i*f+o*l,e[2]=r*c+s*h,e[3]=i*c+o*h,e[4]=r*p+s*d+u,e[5]=i*p+o*d+a,e},l.mul=l.multiply,l.rotate=function(e,t,n){var r=t[0],i=t[1],s=t[2],o=t[3],u=t[4],a=t[5],f=Math.sin(n),l=Math.cos(n);return e[0]=r*l+s*f,e[1]=i*l+o*f,e[2]=r*-f+s*l,e[3]=i*-f+o*l,e[4]=u,e[5]=a,e},l.scale=function(e,t,n){var r=t[0],i=t[1],s=t[2],o=t[3],u=t[4],a=t[5],f=n[0],l=n[1];return e[0]=r*f,e[1]=i*f,e[2]=s*l,e[3]=o*l,e[4]=u,e[5]=a,e},l.translate=function(e,t,n){var r=t[0],i=t[1],s=t[2],o=t[3],u=t[4],a=t[5],f=n[0],l=n[1];return e[0]=r,e[1]=i,e[2]=s,e[3]=o,e[4]=r*f+s*l+u,e[5]=i*f+o*l+a,e},l.str=function(e){return\"mat2d(\"+e[0]+\", \"+e[1]+\", \"+e[2]+\", \"+e[3]+\", \"+e[4]+\", \"+e[5]+\")\"},l.frob=function(e){return Math.sqrt(Math.pow(e[0],2)+Math.pow(e[1],2)+Math.pow(e[2],2)+Math.pow(e[3],2)+Math.pow(e[4],2)+Math.pow(e[5],2)+1)},typeof e!=\"undefined\"&&(e.mat2d=l);var c={};c.create=function(){var e=new n(9);return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=1,e[5]=0,e[6]=0,e[7]=0,e[8]=1,e},c.fromMat4=function(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[4],e[4]=t[5],e[5]=t[6],e[6]=t[8],e[7]=t[9],e[8]=t[10],e},c.clone=function(e){var t=new n(9);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t},c.copy=function(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e},c.identity=function(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=1,e[5]=0,e[6]=0,e[7]=0,e[8]=1,e},c.transpose=function(e,t){if(e===t){var n=t[1],r=t[2],i=t[5];e[1]=t[3],e[2]=t[6],e[3]=n,e[5]=t[7],e[6]=r,e[7]=i}else e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8];return e},c.invert=function(e,t){var n=t[0],r=t[1],i=t[2],s=t[3],o=t[4],u=t[5],a=t[6],f=t[7],l=t[8],c=l*o-u*f,h=-l*s+u*a,p=f*s-o*a,d=n*c+r*h+i*p;return d?(d=1/d,e[0]=c*d,e[1]=(-l*r+i*f)*d,e[2]=(u*r-i*o)*d,e[3]=h*d,e[4]=(l*n-i*a)*d,e[5]=(-u*n+i*s)*d,e[6]=p*d,e[7]=(-f*n+r*a)*d,e[8]=(o*n-r*s)*d,e):null},c.adjoint=function(e,t){var n=t[0],r=t[1],i=t[2],s=t[3],o=t[4],u=t[5],a=t[6],f=t[7],l=t[8];return e[0]=o*l-u*f,e[1]=i*f-r*l,e[2]=r*u-i*o,e[3]=u*a-s*l,e[4]=n*l-i*a,e[5]=i*s-n*u,e[6]=s*f-o*a,e[7]=r*a-n*f,e[8]=n*o-r*s,e},c.determinant=function(e){var t=e[0],n=e[1],r=e[2],i=e[3],s=e[4],o=e[5],u=e[6],a=e[7],f=e[8];return t*(f*s-o*a)+n*(-f*i+o*u)+r*(a*i-s*u)},c.multiply=function(e,t,n){var r=t[0],i=t[1],s=t[2],o=t[3],u=t[4],a=t[5],f=t[6],l=t[7],c=t[8],h=n[0],p=n[1],d=n[2],v=n[3],m=n[4],g=n[5],y=n[6],b=n[7],w=n[8];return e[0]=h*r+p*o+d*f,e[1]=h*i+p*u+d*l,e[2]=h*s+p*a+d*c,e[3]=v*r+m*o+g*f,e[4]=v*i+m*u+g*l,e[5]=v*s+m*a+g*c,e[6]=y*r+b*o+w*f,e[7]=y*i+b*u+w*l,e[8]=y*s+b*a+w*c,e},c.mul=c.multiply,c.translate=function(e,t,n){var r=t[0],i=t[1],s=t[2],o=t[3],u=t[4],a=t[5],f=t[6],l=t[7],c=t[8],h=n[0],p=n[1];return e[0]=r,e[1]=i,e[2]=s,e[3]=o,e[4]=u,e[5]=a,e[6]=h*r+p*o+f,e[7]=h*i+p*u+l,e[8]=h*s+p*a+c,e},c.rotate=function(e,t,n){var r=t[0],i=t[1],s=t[2],o=t[3],u=t[4],a=t[5],f=t[6],l=t[7],c=t[8],h=Math.sin(n),p=Math.cos(n);return e[0]=p*r+h*o,e[1]=p*i+h*u,e[2]=p*s+h*a,e[3]=p*o-h*r,e[4]=p*u-h*i,e[5]=p*a-h*s,e[6]=f,e[7]=l,e[8]=c,e},c.scale=function(e,t,n){var r=n[0],i=n[1];return e[0]=r*t[0],e[1]=r*t[1],e[2]=r*t[2],e[3]=i*t[3],e[4]=i*t[4],e[5]=i*t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e},c.fromMat2d=function(e,t){return e[0]=t[0],e[1]=t[1],e[2]=0,e[3]=t[2],e[4]=t[3],e[5]=0,e[6]=t[4],e[7]=t[5],e[8]=1,e},c.fromQuat=function(e,t){var n=t[0],r=t[1],i=t[2],s=t[3],o=n+n,u=r+r,a=i+i,f=n*o,l=r*o,c=r*u,h=i*o,p=i*u,d=i*a,v=s*o,m=s*u,g=s*a;return e[0]=1-c-d,e[3]=l-g,e[6]=h+m,e[1]=l+g,e[4]=1-f-d,e[7]=p-v,e[2]=h-m,e[5]=p+v,e[8]=1-f-c,e},c.normalFromMat4=function(e,t){var n=t[0],r=t[1],i=t[2],s=t[3],o=t[4],u=t[5],a=t[6],f=t[7],l=t[8],c=t[9],h=t[10],p=t[11],d=t[12],v=t[13],m=t[14],g=t[15],y=n*u-r*o,b=n*a-i*o,w=n*f-s*o,E=r*a-i*u,S=r*f-s*u,x=i*f-s*a,T=l*v-c*d,N=l*m-h*d,C=l*g-p*d,k=c*m-h*v,L=c*g-p*v,A=h*g-p*m,O=y*A-b*L+w*k+E*C-S*N+x*T;return O?(O=1/O,e[0]=(u*A-a*L+f*k)*O,e[1]=(a*C-o*A-f*N)*O,e[2]=(o*L-u*C+f*T)*O,e[3]=(i*L-r*A-s*k)*O,e[4]=(n*A-i*C+s*N)*O,e[5]=(r*C-n*L-s*T)*O,e[6]=(v*x-m*S+g*E)*O,e[7]=(m*w-d*x-g*b)*O,e[8]=(d*S-v*w+g*y)*O,e):null},c.str=function(e){return\"mat3(\"+e[0]+\", \"+e[1]+\", \"+e[2]+\", \"+e[3]+\", \"+e[4]+\", \"+e[5]+\", \"+e[6]+\", \"+e[7]+\", \"+e[8]+\")\"},c.frob=function(e){return Math.sqrt(Math.pow(e[0],2)+Math.pow(e[1],2)+Math.pow(e[2],2)+Math.pow(e[3],2)+Math.pow(e[4],2)+Math.pow(e[5],2)+Math.pow(e[6],2)+Math.pow(e[7],2)+Math.pow(e[8],2))},typeof e!=\"undefined\"&&(e.mat3=c);var h={};h.create=function(){var e=new n(16);return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},h.clone=function(e){var t=new n(16);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t},h.copy=function(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e},h.identity=function(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},h.transpose=function(e,t){if(e===t){var n=t[1],r=t[2],i=t[3],s=t[6],o=t[7],u=t[11];e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=n,e[6]=t[9],e[7]=t[13],e[8]=r,e[9]=s,e[11]=t[14],e[12]=i,e[13]=o,e[14]=u}else e[0]=t[0],e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=t[1],e[5]=t[5],e[6]=t[9],e[7]=t[13],e[8]=t[2],e[9]=t[6],e[10]=t[10],e[11]=t[14],e[12]=t[3],e[13]=t[7],e[14]=t[11],e[15]=t[15];return e},h.invert=function(e,t){var n=t[0],r=t[1],i=t[2],s=t[3],o=t[4],u=t[5],a=t[6],f=t[7],l=t[8],c=t[9],h=t[10],p=t[11],d=t[12],v=t[13],m=t[14],g=t[15],y=n*u-r*o,b=n*a-i*o,w=n*f-s*o,E=r*a-i*u,S=r*f-s*u,x=i*f-s*a,T=l*v-c*d,N=l*m-h*d,C=l*g-p*d,k=c*m-h*v,L=c*g-p*v,A=h*g-p*m,O=y*A-b*L+w*k+E*C-S*N+x*T;return O?(O=1/O,e[0]=(u*A-a*L+f*k)*O,e[1]=(i*L-r*A-s*k)*O,e[2]=(v*x-m*S+g*E)*O,e[3]=(h*S-c*x-p*E)*O,e[4]=(a*C-o*A-f*N)*O,e[5]=(n*A-i*C+s*N)*O,e[6]=(m*w-d*x-g*b)*O,e[7]=(l*x-h*w+p*b)*O,e[8]=(o*L-u*C+f*T)*O,e[9]=(r*C-n*L-s*T)*O,e[10]=(d*S-v*w+g*y)*O,e[11]=(c*w-l*S-p*y)*O,e[12]=(u*N-o*k-a*T)*O,e[13]=(n*k-r*N+i*T)*O,e[14]=(v*b-d*E-m*y)*O,e[15]=(l*E-c*b+h*y)*O,e):null},h.adjoint=function(e,t){var n=t[0],r=t[1],i=t[2],s=t[3],o=t[4],u=t[5],a=t[6],f=t[7],l=t[8],c=t[9],h=t[10],p=t[11],d=t[12],v=t[13],m=t[14],g=t[15];return e[0]=u*(h*g-p*m)-c*(a*g-f*m)+v*(a*p-f*h),e[1]=-(r*(h*g-p*m)-c*(i*g-s*m)+v*(i*p-s*h)),e[2]=r*(a*g-f*m)-u*(i*g-s*m)+v*(i*f-s*a),e[3]=-(r*(a*p-f*h)-u*(i*p-s*h)+c*(i*f-s*a)),e[4]=-(o*(h*g-p*m)-l*(a*g-f*m)+d*(a*p-f*h)),e[5]=n*(h*g-p*m)-l*(i*g-s*m)+d*(i*p-s*h),e[6]=-(n*(a*g-f*m)-o*(i*g-s*m)+d*(i*f-s*a)),e[7]=n*(a*p-f*h)-o*(i*p-s*h)+l*(i*f-s*a),e[8]=o*(c*g-p*v)-l*(u*g-f*v)+d*(u*p-f*c),e[9]=-(n*(c*g-p*v)-l*(r*g-s*v)+d*(r*p-s*c)),e[10]=n*(u*g-f*v)-o*(r*g-s*v)+d*(r*f-s*u),e[11]=-(n*(u*p-f*c)-o*(r*p-s*c)+l*(r*f-s*u)),e[12]=-(o*(c*m-h*v)-l*(u*m-a*v)+d*(u*h-a*c)),e[13]=n*(c*m-h*v)-l*(r*m-i*v)+d*(r*h-i*c),e[14]=-(n*(u*m-a*v)-o*(r*m-i*v)+d*(r*a-i*u)),e[15]=n*(u*h-a*c)-o*(r*h-i*c)+l*(r*a-i*u),e},h.determinant=function(e){var t=e[0],n=e[1],r=e[2],i=e[3],s=e[4],o=e[5],u=e[6],a=e[7],f=e[8],l=e[9],c=e[10],h=e[11],p=e[12],d=e[13],v=e[14],m=e[15],g=t*o-n*s,y=t*u-r*s,b=t*a-i*s,w=n*u-r*o,E=n*a-i*o,S=r*a-i*u,x=f*d-l*p,T=f*v-c*p,N=f*m-h*p,C=l*v-c*d,k=l*m-h*d,L=c*m-h*v;return g*L-y*k+b*C+w*N-E*T+S*x},h.multiply=function(e,t,n){var r=t[0],i=t[1],s=t[2],o=t[3],u=t[4],a=t[5],f=t[6],l=t[7],c=t[8],h=t[9],p=t[10],d=t[11],v=t[12],m=t[13],g=t[14],y=t[15],b=n[0],w=n[1],E=n[2],S=n[3];return e[0]=b*r+w*u+E*c+S*v,e[1]=b*i+w*a+E*h+S*m,e[2]=b*s+w*f+E*p+S*g,e[3]=b*o+w*l+E*d+S*y,b=n[4],w=n[5],E=n[6],S=n[7],e[4]=b*r+w*u+E*c+S*v,e[5]=b*i+w*a+E*h+S*m,e[6]=b*s+w*f+E*p+S*g,e[7]=b*o+w*l+E*d+S*y,b=n[8],w=n[9],E=n[10],S=n[11],e[8]=b*r+w*u+E*c+S*v,e[9]=b*i+w*a+E*h+S*m,e[10]=b*s+w*f+E*p+S*g,e[11]=b*o+w*l+E*d+S*y,b=n[12],w=n[13],E=n[14],S=n[15],e[12]=b*r+w*u+E*c+S*v,e[13]=b*i+w*a+E*h+S*m,e[14]=b*s+w*f+E*p+S*g,e[15]=b*o+w*l+E*d+S*y,e},h.mul=h.multiply,h.translate=function(e,t,n){var r=n[0],i=n[1],s=n[2],o,u,a,f,l,c,h,p,d,v,m,g;return t===e?(e[12]=t[0]*r+t[4]*i+t[8]*s+t[12],e[13]=t[1]*r+t[5]*i+t[9]*s+t[13],e[14]=t[2]*r+t[6]*i+t[10]*s+t[14],e[15]=t[3]*r+t[7]*i+t[11]*s+t[15]):(o=t[0],u=t[1],a=t[2],f=t[3],l=t[4],c=t[5],h=t[6],p=t[7],d=t[8],v=t[9],m=t[10],g=t[11],e[0]=o,e[1]=u,e[2]=a,e[3]=f,e[4]=l,e[5]=c,e[6]=h,e[7]=p,e[8]=d,e[9]=v,e[10]=m,e[11]=g,e[12]=o*r+l*i+d*s+t[12],e[13]=u*r+c*i+v*s+t[13],e[14]=a*r+h*i+m*s+t[14],e[15]=f*r+p*i+g*s+t[15]),e},h.scale=function(e,t,n){var r=n[0],i=n[1],s=n[2];return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e[4]=t[4]*i,e[5]=t[5]*i,e[6]=t[6]*i,e[7]=t[7]*i,e[8]=t[8]*s,e[9]=t[9]*s,e[10]=t[10]*s,e[11]=t[11]*s,e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e},h.rotate=function(e,n,r,i){var s=i[0],o=i[1],u=i[2],a=Math.sqrt(s*s+o*o+u*u),f,l,c,h,p,d,v,m,g,y,b,w,E,S,x,T,N,C,k,L,A,O,M,_;return Math.abs(a)<t?null:(a=1/a,s*=a,o*=a,u*=a,f=Math.sin(r),l=Math.cos(r),c=1-l,h=n[0],p=n[1],d=n[2],v=n[3],m=n[4],g=n[5],y=n[6],b=n[7],w=n[8],E=n[9],S=n[10],x=n[11],T=s*s*c+l,N=o*s*c+u*f,C=u*s*c-o*f,k=s*o*c-u*f,L=o*o*c+l,A=u*o*c+s*f,O=s*u*c+o*f,M=o*u*c-s*f,_=u*u*c+l,e[0]=h*T+m*N+w*C,e[1]=p*T+g*N+E*C,e[2]=d*T+y*N+S*C,e[3]=v*T+b*N+x*C,e[4]=h*k+m*L+w*A,e[5]=p*k+g*L+E*A,e[6]=d*k+y*L+S*A,e[7]=v*k+b*L+x*A,e[8]=h*O+m*M+w*_,e[9]=p*O+g*M+E*_,e[10]=d*O+y*M+S*_,e[11]=v*O+b*M+x*_,n!==e&&(e[12]=n[12],e[13]=n[13],e[14]=n[14],e[15]=n[15]),e)},h.rotateX=function(e,t,n){var r=Math.sin(n),i=Math.cos(n),s=t[4],o=t[5],u=t[6],a=t[7],f=t[8],l=t[9],c=t[10],h=t[11];return t!==e&&(e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[4]=s*i+f*r,e[5]=o*i+l*r,e[6]=u*i+c*r,e[7]=a*i+h*r,e[8]=f*i-s*r,e[9]=l*i-o*r,e[10]=c*i-u*r,e[11]=h*i-a*r,e},h.rotateY=function(e,t,n){var r=Math.sin(n),i=Math.cos(n),s=t[0],o=t[1],u=t[2],a=t[3],f=t[8],l=t[9],c=t[10],h=t[11];return t!==e&&(e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[0]=s*i-f*r,e[1]=o*i-l*r,e[2]=u*i-c*r,e[3]=a*i-h*r,e[8]=s*r+f*i,e[9]=o*r+l*i,e[10]=u*r+c*i,e[11]=a*r+h*i,e},h.rotateZ=function(e,t,n){var r=Math.sin(n),i=Math.cos(n),s=t[0],o=t[1],u=t[2],a=t[3],f=t[4],l=t[5],c=t[6],h=t[7];return t!==e&&(e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[0]=s*i+f*r,e[1]=o*i+l*r,e[2]=u*i+c*r,e[3]=a*i+h*r,e[4]=f*i-s*r,e[5]=l*i-o*r,e[6]=c*i-u*r,e[7]=h*i-a*r,e},h.fromRotationTranslation=function(e,t,n){var r=t[0],i=t[1],s=t[2],o=t[3],u=r+r,a=i+i,f=s+s,l=r*u,c=r*a,h=r*f,p=i*a,d=i*f,v=s*f,m=o*u,g=o*a,y=o*f;return e[0]=1-(p+v),e[1]=c+y,e[2]=h-g,e[3]=0,e[4]=c-y,e[5]=1-(l+v),e[6]=d+m,e[7]=0,e[8]=h+g,e[9]=d-m,e[10]=1-(l+p),e[11]=0,e[12]=n[0],e[13]=n[1],e[14]=n[2],e[15]=1,e},h.fromQuat=function(e,t){var n=t[0],r=t[1],i=t[2],s=t[3],o=n+n,u=r+r,a=i+i,f=n*o,l=r*o,c=r*u,h=i*o,p=i*u,d=i*a,v=s*o,m=s*u,g=s*a;return e[0]=1-c-d,e[1]=l+g,e[2]=h-m,e[3]=0,e[4]=l-g,e[5]=1-f-d,e[6]=p+v,e[7]=0,e[8]=h+m,e[9]=p-v,e[10]=1-f-c,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},h.frustum=function(e,t,n,r,i,s,o){var u=1/(n-t),a=1/(i-r),f=1/(s-o);return e[0]=s*2*u,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=s*2*a,e[6]=0,e[7]=0,e[8]=(n+t)*u,e[9]=(i+r)*a,e[10]=(o+s)*f,e[11]=-1,e[12]=0,e[13]=0,e[14]=o*s*2*f,e[15]=0,e},h.perspective=function(e,t,n,r,i){var s=1/Math.tan(t/2),o=1/(r-i);return e[0]=s/n,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=s,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=(i+r)*o,e[11]=-1,e[12]=0,e[13]=0,e[14]=2*i*r*o,e[15]=0,e},h.ortho=function(e,t,n,r,i,s,o){var u=1/(t-n),a=1/(r-i),f=1/(s-o);return e[0]=-2*u,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=-2*a,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=2*f,e[11]=0,e[12]=(t+n)*u,e[13]=(i+r)*a,e[14]=(o+s)*f,e[15]=1,e},h.lookAt=function(e,n,r,i){var s,o,u,a,f,l,c,p,d,v,m=n[0],g=n[1],y=n[2],b=i[0],w=i[1],E=i[2],S=r[0],x=r[1],T=r[2];return Math.abs(m-S)<t&&Math.abs(g-x)<t&&Math.abs(y-T)<t?h.identity(e):(c=m-S,p=g-x,d=y-T,v=1/Math.sqrt(c*c+p*p+d*d),c*=v,p*=v,d*=v,s=w*d-E*p,o=E*c-b*d,u=b*p-w*c,v=Math.sqrt(s*s+o*o+u*u),v?(v=1/v,s*=v,o*=v,u*=v):(s=0,o=0,u=0),a=p*u-d*o,f=d*s-c*u,l=c*o-p*s,v=Math.sqrt(a*a+f*f+l*l),v?(v=1/v,a*=v,f*=v,l*=v):(a=0,f=0,l=0),e[0]=s,e[1]=a,e[2]=c,e[3]=0,e[4]=o,e[5]=f,e[6]=p,e[7]=0,e[8]=u,e[9]=l,e[10]=d,e[11]=0,e[12]=-(s*m+o*g+u*y),e[13]=-(a*m+f*g+l*y),e[14]=-(c*m+p*g+d*y),e[15]=1,e)},h.str=function(e){return\"mat4(\"+e[0]+\", \"+e[1]+\", \"+e[2]+\", \"+e[3]+\", \"+e[4]+\", \"+e[5]+\", \"+e[6]+\", \"+e[7]+\", \"+e[8]+\", \"+e[9]+\", \"+e[10]+\", \"+e[11]+\", \"+e[12]+\", \"+e[13]+\", \"+e[14]+\", \"+e[15]+\")\"},h.frob=function(e){return Math.sqrt(Math.pow(e[0],2)+Math.pow(e[1],2)+Math.pow(e[2],2)+Math.pow(e[3],2)+Math.pow(e[4],2)+Math.pow(e[5],2)+Math.pow(e[6],2)+Math.pow(e[6],2)+Math.pow(e[7],2)+Math.pow(e[8],2)+Math.pow(e[9],2)+Math.pow(e[10],2)+Math.pow(e[11],2)+Math.pow(e[12],2)+Math.pow(e[13],2)+Math.pow(e[14],2)+Math.pow(e[15],2))},typeof e!=\"undefined\"&&(e.mat4=h);var p={};p.create=function(){var e=new n(4);return e[0]=0,e[1]=0,e[2]=0,e[3]=1,e},p.rotationTo=function(){var e=u.create(),t=u.fromValues(1,0,0),n=u.fromValues(0,1,0);return function(r,i,s){var o=u.dot(i,s);return o<-0.999999?(u.cross(e,t,i),u.length(e)<1e-6&&u.cross(e,n,i),u.normalize(e,e),p.setAxisAngle(r,e,Math.PI),r):o>.999999?(r[0]=0,r[1]=0,r[2]=0,r[3]=1,r):(u.cross(e,i,s),r[0]=e[0],r[1]=e[1],r[2]=e[2],r[3]=1+o,p.normalize(r,r))}}(),p.setAxes=function(){var e=c.create();return function(t,n,r,i){return e[0]=r[0],e[3]=r[1],e[6]=r[2],e[1]=i[0],e[4]=i[1],e[7]=i[2],e[2]=-n[0],e[5]=-n[1],e[8]=-n[2],p.normalize(t,p.fromMat3(t,e))}}(),p.clone=a.clone,p.fromValues=a.fromValues,p.copy=a.copy,p.set=a.set,p.identity=function(e){return e[0]=0,e[1]=0,e[2]=0,e[3]=1,e},p.setAxisAngle=function(e,t,n){n*=.5;var r=Math.sin(n);return e[0]=r*t[0],e[1]=r*t[1],e[2]=r*t[2],e[3]=Math.cos(n),e},p.add=a.add,p.multiply=function(e,t,n){var r=t[0],i=t[1],s=t[2],o=t[3],u=n[0],a=n[1],f=n[2],l=n[3];return e[0]=r*l+o*u+i*f-s*a,e[1]=i*l+o*a+s*u-r*f,e[2]=s*l+o*f+r*a-i*u,e[3]=o*l-r*u-i*a-s*f,e},p.mul=p.multiply,p.scale=a.scale,p.rotateX=function(e,t,n){n*=.5;var r=t[0],i=t[1],s=t[2],o=t[3],u=Math.sin(n),a=Math.cos(n);return e[0]=r*a+o*u,e[1]=i*a+s*u,e[2]=s*a-i*u,e[3]=o*a-r*u,e},p.rotateY=function(e,t,n){n*=.5;var r=t[0],i=t[1],s=t[2],o=t[3],u=Math.sin(n),a=Math.cos(n);return e[0]=r*a-s*u,e[1]=i*a+o*u,e[2]=s*a+r*u,e[3]=o*a-i*u,e},p.rotateZ=function(e,t,n){n*=.5;var r=t[0],i=t[1],s=t[2],o=t[3],u=Math.sin(n),a=Math.cos(n);return e[0]=r*a+i*u,e[1]=i*a-r*u,e[2]=s*a+o*u,e[3]=o*a-s*u,e},p.calculateW=function(e,t){var n=t[0],r=t[1],i=t[2];return e[0]=n,e[1]=r,e[2]=i,e[3]=-Math.sqrt(Math.abs(1-n*n-r*r-i*i)),e},p.dot=a.dot,p.lerp=a.lerp,p.slerp=function(e,t,n,r){var i=t[0],s=t[1],o=t[2],u=t[3],a=n[0],f=n[1],l=n[2],c=n[3],h,p,d,v,m;return p=i*a+s*f+o*l+u*c,p<0&&(p=-p,a=-a,f=-f,l=-l,c=-c),1-p>1e-6?(h=Math.acos(p),d=Math.sin(h),v=Math.sin((1-r)*h)/d,m=Math.sin(r*h)/d):(v=1-r,m=r),e[0]=v*i+m*a,e[1]=v*s+m*f,e[2]=v*o+m*l,e[3]=v*u+m*c,e},p.invert=function(e,t){var n=t[0],r=t[1],i=t[2],s=t[3],o=n*n+r*r+i*i+s*s,u=o?1/o:0;return e[0]=-n*u,e[1]=-r*u,e[2]=-i*u,e[3]=s*u,e},p.conjugate=function(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=t[3],e},p.length=a.length,p.len=p.length,p.squaredLength=a.squaredLength,p.sqrLen=p.squaredLength,p.normalize=a.normalize,p.fromMat3=function(e,t){var n=t[0]+t[4]+t[8],r;if(n>0)r=Math.sqrt(n+1),e[3]=.5*r,r=.5/r,e[0]=(t[7]-t[5])*r,e[1]=(t[2]-t[6])*r,e[2]=(t[3]-t[1])*r;else{var i=0;t[4]>t[0]&&(i=1),t[8]>t[i*3+i]&&(i=2);var s=(i+1)%3,o=(i+2)%3;r=Math.sqrt(t[i*3+i]-t[s*3+s]-t[o*3+o]+1),e[i]=.5*r,r=.5/r,e[3]=(t[o*3+s]-t[s*3+o])*r,e[s]=(t[s*3+i]+t[i*3+s])*r,e[o]=(t[o*3+i]+t[i*3+o])*r}return e},p.str=function(e){return\"quat(\"+e[0]+\", \"+e[1]+\", \"+e[2]+\", \"+e[3]+\")\"},typeof e!=\"undefined\"&&(e.quat=p)}(t.exports)})(this);\n","/*globals angular*/\n'use strict';\n\nmodule.exports = function () {\n\n    return {\n\n        selectDesign: function ($q) {\n\n            var deferred;\n\n            deferred = $q.defer();\n\n            return deferred.promise;\n        },\n\n        selectProjectBranchWorkspaceAndDesign: function (\n            $q, $stateParams, branchService, connectionHandling,\n            $log, $rootScope, projectHandling, $state, projectService,\n            workspaceService, designService, testBenchService) {\n\n            var deferred,\n                connectionId,\n\n                selectBranchWhenHaveOne;\n\n            $rootScope.loading = true;\n\n            deferred = $q.defer();\n\n            connectionId = connectionHandling.getMainGMEConnectionId();\n\n            selectBranchWhenHaveOne = function(branchId) {\n                branchService.selectBranch(connectionId, branchId)\n                    .then(function(branchId){\n\n                        var wsContext;\n\n                        $log.debug('Branch selected', branchId);\n                        $rootScope.branchId = branchId;\n\n                        wsContext = $rootScope.wsContext = {\n                            db: connectionId,\n                            regionId: 'WorkSpaces_' + ( new Date() )\n                                .toISOString()\n                        };\n\n                        $rootScope.$on('$destroy', function () {\n                            workspaceService.cleanUpAllRegions(wsContext);\n                        });\n\n\n                        workspaceService.registerWatcher(wsContext, function (destroyed) {\n\n                            $log.debug('WorkSpace watcher initialized, destroyed:', destroyed);\n\n                            if (destroyed !== true) {\n                                workspaceService.watchWorkspaces(wsContext, function (updateObject) {\n\n                                    if (updateObject.type === 'load') {\n                                        console.log('load', updateObject);\n                                    } else if (updateObject.type === 'update') {\n                                        console.log('update', updateObject);\n                                    } else if (updateObject.type === 'unload') {\n                                        console.log('unload', updateObject);\n                                    } else {\n                                        throw new Error(updateObject);\n\n                                    }\n\n                                }).then(function (data) {\n\n                                    var hasFoundFirstWorkspace,\n                                        hasFoundFirstDesign;\n\n                                    hasFoundFirstWorkspace = false;\n                                    hasFoundFirstDesign = false;\n\n\n                                    angular.forEach(data.workspaces, function (workSpace) {\n\n                                        if (!hasFoundFirstWorkspace) {\n\n                                            hasFoundFirstWorkspace = true;\n                                            $rootScope.activeWorkSpace = workSpace;\n                                            $log.debug('Active workspace:', $rootScope.activeWorkSpace);\n\n\n                                        }\n\n                                    });\n\n                                    if (hasFoundFirstWorkspace) {\n\n                                        designService.watchDesigns(wsContext, $rootScope.activeWorkSpace.id, function (/*designsUpdateObject*/) {\n\n                                        }).then(function (designsData) {\n\n                                            angular.forEach(designsData.designs, function (design) {\n\n                                                if (!hasFoundFirstDesign) {\n\n                                                    hasFoundFirstDesign = true;\n                                                    $rootScope.activeDesign = design;\n                                                    $log.debug('Active design:', $rootScope.activeDesign);\n\n                                                }\n\n                                            });\n\n\n                                            if (hasFoundFirstDesign) {\n\n                                                deferred.resolve();\n                                                $rootScope.loading = false;\n\n                                            } else {\n\n                                                $rootScope.loading = false;\n\n                                                $log.debug('Could not find designs in workspace.');\n                                                $state.go('404', {\n                                                    projectId: $stateParams.projectId\n                                                });\n\n                                                deferred.reject();\n                                            }\n\n                                        });\n\n                                        testBenchService.watchTestBenches(\n                                            wsContext,\n                                            $rootScope.activeWorkSpace.id,\n                                            function(){}\n                                        ).then(function(testbenchesData) {\n\n                                                var hasFoundFirstTestbench;\n\n                                                angular.forEach(testbenchesData.testBenches, function(testbench){\n\n                                                    if (!hasFoundFirstTestbench) {\n\n                                                        hasFoundFirstTestbench = true;\n                                                        $rootScope.activeTestbench = testbench;\n                                                        $log.debug('Active testbench:', testbench);\n\n                                                    }\n\n                                                });\n\n                                            });\n\n                                    } else {\n\n                                        $rootScope.loading = false;\n\n                                        $log.debug('Could not find workspaces in project.');\n                                        $state.go('404', {\n                                            projectId: $stateParams.projectId\n                                        });\n\n                                        deferred.reject();\n\n                                    }\n\n                                });\n\n                            } else {\n                                $log.debug('WokrspaceService destroyed...');\n                            }\n                        });\n\n                    })\n                    .catch(function (reason) {\n                        $rootScope.loading = false;\n                        $log.debug('Opening branch errored:', $stateParams.projectId, reason);\n                        $state.go('404', {\n                            projectId: $stateParams.projectId\n                        });\n                    });\n            };\n\n            connectionHandling.establishMainGMEConnection()\n                .then(function(){\n                projectService.selectProject(connectionHandling.getMainGMEConnectionId(), $stateParams.projectId)\n                    .then(function (projectId) {\n\n                        $log.debug('Project selected', projectId);\n                        $rootScope.projectId = projectId;\n\n                        selectBranchWhenHaveOne($stateParams.branchId);\n\n                    }).catch(function (reason) {\n                        $rootScope.loading = false;\n                        $log.debug('Opening project errored:', $stateParams.projectId, reason);\n                        $state.go('404', {\n                            projectId: $stateParams.projectId\n                        });\n                    });\n                });\n\n            return deferred.promise;\n        },\n\n        selectProject: function (\n            $q, projectService, connectionHandling, $stateParams, $log, $rootScope, projectHandling, $state) {\n\n            var deferred;\n\n            deferred = $q.defer();\n\n            $rootScope.loading = true;\n\n            connectionHandling.establishMainGMEConnection()\n                .then(function(){\n\n\n                    projectService.selectProject(connectionHandling.getMainGMEConnectionId(), $stateParams.projectId)\n                        .then(function (projectId) {\n\n                            $log.debug('Project selected', projectId);\n                            $rootScope.projectId = projectId;\n\n                            //projectHandling.findFirstBranch()\n                            //    .then(function(branchId){\n                            //\n                            //        $stateParams.branchId = branchId;\n                            //\n                            //        console.log('First branch', branchId);\n                            //\n                            //        deferred.resolve();\n                            //\n                            //        $timeout(function() {\n                            //            $state.go('editor.branch', {\n                            //                projectId: projectId,\n                            //                branchId: branchId\n                            //            });\n                            //        });\n                            //\n                            //\n                            //    });\n\n\n                            deferred.resolve(projectId);\n\n                        });\n                })\n                .catch(function (reason) {\n                    $rootScope.loading = false;\n                    $log.debug('Opening project errored:', $stateParams.projectId, reason);\n                    $state.go('404', {\n                        projectId: $stateParams.projectId\n                    });\n                });\n\n            return deferred.promise;\n        }\n\n\n    };\n\n};\n","/*globals angular*/\n\n'use strict';\n\n// Move this to GME eventually\n\nangular.module( 'mms.designVisualization.busyCover', [] )\n    .directive( 'busyCover', [ '$rootScope',\n        function ($rootScope) {\n\n            return {\n                restrict: 'E',\n                replace: true,\n                transclude: true,\n                templateUrl: '/mmsApp/templates/busyCover.html',\n                link: function (scope, element) {\n\n                    scope.$watch(function() {\n\n                        var isBusy;\n\n                        if ($rootScope.loading) {\n\n                            scope.busyMessage = 'Loading...';\n\n                        } else if ( $rootScope.initializing ){\n\n                            scope.busyMessage = 'Initializing...';\n\n                        } else if ( $rootScope.busy ){\n\n                            if (!scope.busyMessage) {\n                                scope.busyMessage = 'Just a second...';\n                            }\n\n                        } else {\n                            scope.busyMessage = '';\n                        }\n\n                        isBusy = $rootScope.loading ||\n                            $rootScope.initializing ||\n                            $rootScope.busy;\n\n                        return isBusy;\n\n                    }, function(isBusy) {\n\n                        scope.busy = isBusy;\n\n                        if (!isBusy) {\n\n                            element.removeClass('busy');\n\n                        } else {\n\n                            element.addClass('busy');\n\n                        }\n\n                    });\n\n                    scope.$watch(function() {\n\n                        var isCovered;\n\n                        isCovered = ( $rootScope.unCovered !== true );\n\n                        return isCovered;\n\n                    }, function(isCovered) {\n\n                        if (isCovered) {\n\n                            element.removeClass('off');\n\n                        } else {\n\n                            element.addClass('off');\n\n                        }\n\n                    });\n\n\n                    $rootScope.stopBusy = function() {\n\n                        $rootScope.loading = false;\n                        $rootScope.initializing = false;\n                        $rootScope.busy = false;\n\n                        //document.body.style.display = 'none';\n                        //document.body.offsetHeight = document.body.offsetHeight;\n                        //document.body.style.display = '';\n                    };\n\n                    $rootScope.unCover = function() {\n\n                        $rootScope.unCovered = true;\n\n                    };\n                }\n\n\n            };\n        }] );\n","/*globals angular*/\n\n'use strict';\n\nrequire( './componentWireSegment' );\nrequire( './componentWireCorner' );\n\nangular.module(\n    'mms.designVisualization.componentWire', [\n        'mms.designVisualization.componentWire.segment',\n        'mms.designVisualization.componentWire.corner'\n    ]\n)\n    .controller( 'ComponentWireController', function ( $scope ) {\n        $scope.getSegments = function () {\n            var endPositions,\n                x1, y1, x2, y2;\n\n            endPositions = $scope.wire.getEndPositions();\n\n            x1 = endPositions.x1;\n            x2 = endPositions.x2;\n            y1 = endPositions.y1;\n            y2 = endPositions.y2;\n\n            return [\n                endPositions\n            ];\n\n        };\n\n        //$scope.onSegmentClick = function ( wire, segment ) {\n        //    console.log( wire, segment );\n        //};\n\n\n        $scope.segments = $scope.getSegments();\n\n    } )\n    .directive(\n        'componentWire',\n\n        function () {\n\n            return {\n                scope: true,\n                controller: 'ComponentWireController',\n                restrict: 'E',\n                replace: true,\n                templateUrl: '/mmsApp/templates/componentWire.html',\n                templateNamespace: 'SVG',\n                require: '^svgDiagram',\n                link: function(scope, element, attributes, svgDiagramController) {\n\n                    scope.onMouseUp = function ( segment, $event ) {\n                        svgDiagramController.onWireMouseUp( scope.wire, segment, $event );\n                    };\n\n                    scope.onMouseDown = function ( segment, $event ) {\n                        svgDiagramController.onWireMouseDown( scope.wire, segment, $event );\n                        $event.stopPropagation();\n                    };\n\n                    scope.onCornerMouseUp = function ( segment, $event ) {\n                        svgDiagramController.onWireCornerMouseUp( scope.wire, segment, $event );\n                    };\n\n                    scope.onCornerMouseDown = function ( segment, $event ) {\n                        svgDiagramController.onWireCornerMouseDown( scope.wire, segment, $event );\n                        $event.stopPropagation();\n                    };\n\n                }\n            };\n        }\n);\n","/*globals angular*/\n\n'use strict';\n\nangular.module(\n    'mms.designVisualization.componentWire.corner', []\n)\n\n.directive(\n    'componentWireCorner',\n\n    function () {\n\n        return {\n            restrict: 'E',\n            replace: true,\n            templateUrl: '/mmsApp/templates/componentWireCorner.html',\n            templateNamespace: 'SVG'\n        };\n    }\n);\n","/*globals angular*/\n\n'use strict';\n\nangular.module(\n    'mms.designVisualization.componentWire.segment', []\n)\n\n.directive(\n    'componentWireSegment',\n\n    function () {\n\n        return {\n            restrict: 'E',\n            replace: true,\n            templateUrl: '/mmsApp/templates/componentWireSegment.html',\n            templateNamespace: 'SVG'\n        };\n    }\n);","'use strict';\n\nmodule.exports = function(symbolManagerProvider) {\n\n    var generateSymbols;\n\n    generateSymbols = function (count) {\n\n        var i,\n            portCount,\n            makeARandomSymbol,\n            makeSomePorts,\n            minPorts = 6,\n            maxPorts = 30,\n            placements = ['top', 'right', 'bottom', 'left'];\n\n        makeSomePorts = function (countOfPorts) {\n\n            var sides,\n                port,\n                placement,\n                j;\n\n            sides = {\n                top: [],\n                right: [],\n                bottom: [],\n                left: []\n            };\n\n            for (j = 0; j < countOfPorts; j++) {\n\n                port = {\n                    id: 'p_' + j,\n                    label: 'Port-' + j\n                };\n\n                placement = placements.getRandomElement();\n\n                sides[placement].push(port);\n            }\n\n            return sides;\n\n        };\n\n        makeARandomSymbol = function (idPostfix, countOfPorts) {\n\n            var portDescriptors,\n                descriptor;\n\n            portDescriptors = makeSomePorts(countOfPorts);\n\n            descriptor =  {\n                cssClass: 'random_' + idPostfix,\n                labelPrefix: 'RND_' + countOfPorts + '_' + idPostfix + ' '\n            };\n\n            symbolManagerProvider.makeBoxSymbol(\n                'random_' + idPostfix,\n                descriptor,\n                portDescriptors,\n                {\n                    justifyPorts: false\n                }\n            );\n\n        };\n\n        for (i = 0; i < count; i++) {\n\n            portCount = Math.max(\n                Math.floor(Math.random() * maxPorts),\n                minPorts\n            );\n\n            makeARandomSymbol(i, portCount);\n\n        }\n\n    };\n\n\n\n    this.generateSymbols = generateSymbols;\n\n};\n","/*globals angular*/\n\n'use strict';\n\n// Move this to GME eventually\n\nrequire('../testbenchActions/testbenchActions.js');\n\nangular.module('mms.designVisualization.designEditor', [\n    'mms.testbenchActions'\n])\n    .controller('DesignEditorController', function ($scope, $rootScope, diagramService, $log, connectionHandling,\n                                                    designService, $stateParams, designLayoutService, symbolManager, $timeout,\n                                                    nodeService, gridService, $cookies) {\n\n        var RandomSymbolGenerator,\n            randomSymbolGenerator,\n\n            designCtx,\n\n            setupDiagramEventHandlers,\n            eventHandlersAreSet,\n            lastComponentInstantiationPosition,\n\n            justCreatedWires;\n\n\n        justCreatedWires = [];\n\n        $scope.diagram = null;\n\n        $scope.mainGMEConnectionId = connectionHandling.getMainGMEConnectionId();\n\n        designCtx = {\n            db: $scope.mainGMEConnectionId,\n            regionId: 'Design_' + ( new Date() ).toISOString()\n        };\n\n        $scope.diagramContainerConfig = {};\n\n        $rootScope.$on('componentInstantiationMustBeDone', function ($event, componentData, position) {\n\n            var nodesToCopy;\n\n            $rootScope.setProcessing();\n\n            if (!position) {\n                position = gridService.getViewPortCenter($rootScope.activeDiagramId);\n            }\n\n            if (!position) {\n                position = {\n                    x: 0,\n                    y: 0\n                };\n            }\n\n            lastComponentInstantiationPosition = position;\n\n            if (componentData && componentData.id) {\n\n                nodesToCopy = {};\n\n                nodesToCopy[componentData.id] = {\n                    registry: {\n                        position: position,\n                        rotation: 0\n                    }\n                };\n\n                nodeService.copyMoreNodes(designCtx, $rootScope.activeContainerId, nodesToCopy);\n            }\n\n        });\n\n        $rootScope.$on('wireCreationMustBeDone', function ($event, wire, msg) {\n\n            $rootScope.setProcessing();\n\n            nodeService.getMetaNodes(designCtx)\n                .then(function(meta) {\n\n                    var metaId;\n\n                    metaId = meta.byName.ConnectorComposition.id;\n\n                    nodeService.createNode(designCtx, $rootScope.activeContainerId, metaId, msg || 'New wire' )\n                        .then(function(node){\n\n                            nodeService.startTransaction(designCtx, msg || 'New wire details');\n\n                            console.log(wire.segments);\n\n                            node.setRegistry('wireSegments', angular.copy(wire.segments));\n                            node.makePointer('src', wire.end1.port.id );\n                            node.makePointer('dst', wire.end2.port.id );\n\n                            nodeService.completeTransaction(designCtx);\n\n                            wire.id = node.id;\n                            diagramService.addWire( $rootScope.activeDiagramId, wire );\n                            gridService.invalidateVisibleDiagramComponents( $rootScope.activeDiagramId );\n\n\n                            $rootScope.stopProcessing();\n\n                        });\n\n                });\n\n        });\n\n        $rootScope.$on('wireSegmentsMustBeSaved', function ($event, wire, message) {\n            designLayoutService.setWireSegments(designCtx, wire.id, angular.copy(wire.segments), message || 'Updating wire');\n        });\n\n        $rootScope.$on('wireDeletionMustBeDone', function ($event, wire, message) {\n            $rootScope.setProcessing();\n            nodeService.destroyNode(designCtx, wire.id, message || 'Deleting wire');\n        });\n\n        $rootScope.$on('componentDeletionMustBeDone', function ($event, components, msg) {\n\n            var startDeletionOfComponent;\n\n            startDeletionOfComponent = function (component) {\n\n                var i,\n                    wires,\n                    deleteMessage,\n                    nodeIdsToDelete;\n\n\n                if (angular.isObject(component)) {\n\n                    nodeIdsToDelete = [];\n\n                    deleteMessage = 'Deleting design element';\n\n                    wires = diagramService.getWiresForComponents($rootScope.activeDiagramId, [component]);\n\n                    if (wires.length > 0) {\n\n                        deleteMessage += ' with wires';\n\n                        nodeIdsToDelete = wires.map(function (wire) {\n                            return wire.id;\n                        });\n\n                    }\n\n                    nodeIdsToDelete.unshift(component.id);\n\n                    for (i = 0; i < nodeIdsToDelete.length; i++) {\n                        nodeService.destroyNode(designCtx, nodeIdsToDelete[i], deleteMessage);\n                    }\n\n                }\n            };\n\n            $rootScope.setProcessing();\n\n            nodeService.startTransaction(designCtx, msg || 'Deleting design elements');\n\n            if (angular.isArray(components)) {\n\n                angular.forEach(components, function (component) {\n                    startDeletionOfComponent(component);\n                });\n\n            } else {\n                startDeletionOfComponent(components);\n            }\n\n            nodeService.completeTransaction(designCtx);\n\n        });\n\n        setupDiagramEventHandlers = function () {\n\n            if (!eventHandlersAreSet) {\n\n                eventHandlersAreSet = true;\n\n                $scope.$on('componentsPositionChange', function (e, data) {\n\n                    var i;\n\n                    i = 1;\n\n                    //nodeService.startTransaction(designCtx, data.message);\n\n                    angular.forEach(data.components, function (component) {\n\n                        $timeout(function () {\n\n                            designLayoutService.setPosition(\n                                designCtx,\n                                component.id,\n                                component.getPosition(),\n                                data.message\n                            );\n                        }, 10 * i);\n\n                        i++;\n\n                    });\n\n                    //nodeService.completeTransaction(designCtx);\n\n                });\n\n                $scope.$on('componentsRotationChange', function (e, data) {\n\n                    var i;\n\n                    i = 1;\n\n                    //nodeService.startTransaction(designCtx, data.message);\n\n                    angular.forEach(data.components, function (component) {\n\n                        $timeout(function () {\n\n                            designLayoutService.setRotation(\n                                designCtx,\n                                component.id,\n                                component.rotation,\n                                data.message\n                            );\n                        }, 10 * i);\n\n                        i++;\n\n                    });\n\n                    //nodeService.completeTransaction(designCtx);\n\n                });\n\n            }\n        };\n\n        if ($stateParams.containerId === 'dummy') {\n\n            RandomSymbolGenerator = require('./classes/RandomSymbolGenerator');\n            randomSymbolGenerator = new RandomSymbolGenerator(symbolManager);\n\n            randomSymbolGenerator.generateSymbols(7);\n\n\n            $scope.diagram = diagramService.addDummyDiagram('dummy', 100, 50, 3000, 3000);\n\n            $log.debug('Drawing dummy diagram:', $scope.diagram);\n            $rootScope.loading = false;\n\n        } else {\n\n            $scope.designCtx = designCtx;\n\n            designLayoutService.watchDiagramElements(designCtx, $rootScope.activeDesign.id, function (designStructureUpdateObject) {\n\n                $log.debug('DiagramElementsUpdate', designStructureUpdateObject);\n\n                switch (designStructureUpdateObject.type) {\n\n                    case 'load':\n\n                        $timeout(function() {\n\n                            if (!(designStructureUpdateObject.data.baseName === 'ConnectorComposition' &&\n                                justCreatedWires.indexOf(designStructureUpdateObject.data.id) > -1)) {\n\n                                diagramService.createNewComponentFromFromCyPhyElement(\n                                    $rootScope.activeDiagramId,\n                                    designStructureUpdateObject.data);\n\n                                gridService.invalidateVisibleDiagramComponents($rootScope.activeDiagramId);\n                            }\n                        });\n\n                        break;\n\n                    case 'unload':\n\n                        diagramService.deleteComponentOrWireById(\n                            $rootScope.activeDiagramId,\n                            designStructureUpdateObject.id);\n\n                        gridService.invalidateVisibleDiagramComponents($rootScope.activeDiagramId, true);\n\n                        break;\n\n                    default :\n                    case 'update':\n\n                        if (designStructureUpdateObject.updateType === 'positionChange') {\n\n                            diagramService.updateComponentsAndItsWiresPosition(\n                                $rootScope.activeDiagramId,\n                                designStructureUpdateObject.id,\n                                designStructureUpdateObject.data.position\n                            );\n                        }\n\n                        if (designStructureUpdateObject.updateType === 'rotationChange') {\n\n                            diagramService.updateComponentsAndItsWiresRotation(\n                                $rootScope.activeDiagramId,\n                                designStructureUpdateObject.id,\n                                designStructureUpdateObject.data.rotation\n                            );\n                        }\n\n                        if (designStructureUpdateObject.updateType === 'detailsChange') {\n\n                            diagramService.updateWireSegments(\n                                $rootScope.activeDiagramId,\n                                designStructureUpdateObject.id,\n                                angular.copy(designStructureUpdateObject.data.details.wireSegments)\n                            );\n                        }\n\n                        break;\n\n                }\n\n                $rootScope.stopProcessing();\n\n            }).then(function (cyPhyLayout) {\n\n                $log.debug('Diagram elements', cyPhyLayout);\n\n                $rootScope.activeContainerId = $stateParams.containerId || $rootScope.activeDesign.id;\n\n                $timeout(function () {\n\n                    $rootScope.activeDiagramId = $rootScope.activeContainerId + '_' + ( new Date() ).toISOString();\n\n                    $log.debug('Active diagram ID', $rootScope.activeDiagramId);\n\n                    $scope.diagram =\n                        diagramService.createDiagramFromCyPhyElements($rootScope.activeDiagramId, cyPhyLayout.elements);\n\n                });\n\n\n                $log.debug('Drawing diagram:', $scope.diagram);\n\n                setupDiagramEventHandlers();\n\n                $timeout(function () {\n                    $rootScope.stopBusy();\n                    $rootScope.unCover();\n\n                    if ($cookies.seenMMSWelcome !== 'true') {\n\n                        $rootScope.openHelpDialog();\n                        $cookies.seenMMSWelcome = 'true';\n\n                    }\n\n                }, 500);\n\n            });\n\n            $scope.fabClick = function () {\n\n                $log.debug('Fab was clicked');\n\n            };\n\n            $scope.$on('$destroy', function () {\n\n                $rootScope.unCovered = false;\n\n                if ($scope.designCtx) {\n                    $log.debug('Celaning up designLayout watchers');\n                    designLayoutService.cleanUpAllRegions($scope.designCtx);\n                }\n\n            });\n\n\n        }\n\n    })\n    .directive('designEditor', [\n        function () {\n\n            return {\n                restrict: 'E',\n                controller: 'DesignEditorController',\n                $scope: true,\n                replace: true,\n                transclude: true,\n                templateUrl: '/mmsApp/templates/designEditor.html'\n\n            };\n        }]);\n","/*globals angular*/\n\n'use strict';\n\nmodule.exports = function ($scope, $timeout, $log) {\n\n    var jsp,\n        jspReinit,\n        jspPane,\n\n        scrollPositionX,\n        scrollPositionY,\n\n        updateVisibleArea,\n        updatePromise,\n\n        timedJSPReinit,\n        jspReinitChillPeriod,\n        jspReinitPromise,\n\n        onWindowResize;\n\n\n    updateVisibleArea = function () {\n\n        var left,\n            top,\n            _updateVisibleArea;\n\n        _updateVisibleArea = function(){\n\n            $scope.visibleArea = {\n                left: left || 0,\n                top: top || 0,\n                right: left + $scope.$contentPane.width(),\n                bottom: top + $scope.$contentPane.height()\n            };\n\n        };\n\n        if (jspPane) {\n\n            left = scrollPositionX || 0;\n            top = scrollPositionY || 0;\n\n            if (updatePromise) {\n                $timeout.cancel(updatePromise);\n                updatePromise = null;\n            }\n\n            updatePromise = $timeout(_updateVisibleArea, 100);\n        }\n    };\n\n    jspReinitChillPeriod = 200;\n\n    timedJSPReinit = function() {\n\n        if (angular.isObject(jsp)) {\n\n            $log.debug('Reinitializing JSP.');\n            jsp.reinitialise();\n\n        }\n\n    };\n\n    jspReinit = function () {\n\n        $timeout.cancel(jspReinitPromise);\n\n        jspReinitPromise = $timeout(timedJSPReinit, jspReinitChillPeriod);\n\n    };\n\n    $scope.$on('DiagramContainerInitialized', function () {\n\n        $scope.$contentPane\n\n            .bind('jsp-initialised',\n            function () {\n                jspPane = $scope.$contentPane.find('.jspPane');\n                updateVisibleArea();\n            }\n        )\n            .bind('jsp-scroll-y', function (event, aScrollPositionY) {\n\n                scrollPositionY = aScrollPositionY;\n\n                updateVisibleArea();\n            }\n        )\n            .bind('jsp-scroll-x', function (event, aScrollPositionX) {\n\n                scrollPositionX = aScrollPositionX;\n\n                updateVisibleArea();\n            }\n        )\n//            .bind(\n//            'jsp-arrow-change',\n//            function (event, isAtTop, isAtBottom, isAtLeft, isAtRight) {\n//                console.log('Handle jsp-arrow-change', this,\n//                    'isAtTop=', isAtTop,\n//                    'isAtBottom=', isAtBottom,\n//                    'isAtLeft=', isAtLeft,\n//                    'isAtRight=', isAtRight);\n//            }\n//        )\n            .jScrollPane(\n            {\n                verticalDragMinHeight: 60,\n                verticalDragMaxHeight: 60,\n                horizontalDragMinWidth: 60,\n                horizontalDragMaxWidth: 60,\n                animateScroll: true\n            }\n        );\n\n        jsp = $scope.$contentPane.data('jsp');\n\n        jspReinit();\n    });\n\n    $scope.$on('DiagramInitialized', function () {\n        jspReinit();\n    });\n\n\n    onWindowResize = function() {\n        jspReinit();\n    };\n\n    this.onWindowResize = onWindowResize;\n\n    return this;\n\n};\n","/*globals angular, ga, $*/\n\n'use strict';\n\n// Move this to GME eventually\n\nrequire('../drawingGrid/drawingGrid.js');\n\nangular.module('mms.designVisualization.diagramContainer', [\n        'mms.designVisualization.drawingGrid',\n        'panzoom',\n        'panzoomwidget',\n        'isis.ui.contextmenu'\n    ])\n    .controller('DiagramContainerController', [\n        '$scope',\n        '$timeout',\n        '$log',\n        'PanZoomService',\n        '$window',\n        'componentBrowserService',\n        '$rootScope',\n        function ($scope, $timeout, $log, PanZoomService, $window, componentBrowserService, $rootScope) {\n\n            var self = this,\n\n                $windowElement,\n\n                compiledDirectives,\n\n                ScrollHandler,\n                scrollHandler;\n\n            compiledDirectives = {};\n\n            ScrollHandler = require('./classes/ScrollHandler');\n            scrollHandler = new ScrollHandler($scope, $timeout, $log);\n\n\n            $scope.panzoomId = 'panzoomId'; //scope.id + '-panzoomed';\n\n            $scope.zoomLevel = 4;\n\n            $scope.panzoomModel = {}; // always pass empty object\n\n            $scope.panzoomConfig = {\n                zoomLevels: 10,\n                neutralZoomLevel: $scope.zoomLevel,\n                scalePerZoomLevel: 1.25,\n                friction: 50,\n                haltSpeed: 50,\n\n                modelChangedCallback: function (val) {\n                    PanZoomService.getAPI($scope.panzoomId)\n                        .then(function (api) {\n\n                            var topLeftCorner, bottomRightCorner;\n\n                            $scope.zoomLevel = val.zoomLevel;\n\n                            topLeftCorner = api.getModelPosition({\n                                x: 0,\n                                y: 0\n                            });\n\n                            bottomRightCorner = api.getModelPosition({\n                                x: $scope.canvasWidth,\n                                y: $scope.canvasHeight\n                            });\n\n                            $scope.visibleArea = {\n                                top: topLeftCorner.y,\n                                left: topLeftCorner.x,\n                                right: bottomRightCorner.x,\n                                bottom: bottomRightCorner.y\n                            };\n\n                        });\n\n                }\n            };\n\n            $windowElement = angular.element($window);\n\n            $windowElement.bind(\n                'resize', scrollHandler.onWindowResize\n            );\n\n\n            $scope.getCssClass = function () {\n\n                var classString;\n\n                classString = 'diagram-container';\n\n                classString += ' zoom-level-' + $scope.zoomLevel;\n\n                classString += self.isEditable() ? ' editable' : 'readonly';\n\n                return classString;\n            };\n\n\n            $scope.somethingWasDroppedOnMe = function($event, $data) {\n\n                var component,\n                    position,\n                    x,\n                    y;\n\n                component = componentBrowserService.getComponentById($data);\n\n                if (component) {\n\n                    if ($event && $event.originalEvent) {\n\n                        x = $event.originalEvent.offsetX || 100;\n                        y = $event.originalEvent.offsetY || 100;\n\n                        position = {\n                            x: x - 20,\n                            y: y - 20\n                        };\n\n                    }\n\n                    ga('send', 'event', 'avmComponent', 'dropped', component.id);\n\n                    $rootScope.$emit('componentInstantiationMustBeDone', component, position);\n\n                }\n\n            };\n\n\n            this.getVisibleArea = function () {\n                return $scope.visibleArea;\n            };\n\n            this.getId = function () {\n\n                var diagramId;\n\n                if (angular.isObject($scope.diagram)) {\n                    diagramId = $scope.diagram.id;\n                }\n\n                return diagramId;\n            };\n\n            this.getDiagram = function () {\n                return $scope.diagram;\n            };\n\n            this.getZoomLevel = function () {\n                return $scope.zoomLevel;\n            };\n\n            this.getCompiledDirective = function (directive) {\n                return compiledDirectives[directive];\n            };\n\n            this.setCompiledDirective = function (directive, compiledDirective) {\n                compiledDirectives[directive] = compiledDirective;\n            };\n\n            this.isEditable = function () {\n\n                if (angular.isObject($scope.diagram)) {\n\n                    $scope.diagram.config = $scope.diagram.config || {};\n\n                    return $scope.diagram.config.editable === true;\n\n                }\n\n            };\n\n            this.isComponentSelected = function (component) {\n\n                if (angular.isObject($scope.diagram)) {\n\n                    return $scope.diagram.state.selectedComponentIds.indexOf(component.id) > -1;\n\n                }\n\n            };\n\n            this.getConfig = function () {\n                return $scope.config;\n            };\n\n            this.setInitialized = function(val) {\n                $scope.initialized = val;\n            };\n\n        }\n    ])\n    .directive('diagramContainer', [\n        'diagramService', '$log', '$timeout', 'PanZoomService',\n        function (diagramService, $log, $timeout) {\n\n            return {\n                controller: 'DiagramContainerController',\n                scope: {\n                    diagram: '=',\n                    config: '='\n                },\n                restrict: 'E',\n                replace: true,\n                transclude: true,\n                templateUrl: '/mmsApp/templates/diagramContainer.html',\n                link: function (scope, element) {\n\n                    var $element;\n\n                    $log.debug('In diagram container', scope.visibleArea);\n\n                    scope.config = scope.config || {};\n\n//                    scope.canvasWidth = $(element)\n//                        .outerWidth();\n//                    scope.canvasHeight = $(element)\n//                        .outerHeight();\n//\n//\n//                    scope.visibleArea = {\n//                        top: 0,\n//                        left: 0,\n//                        right: scope.canvasWidth,\n//                        bottom: scope.canvasHeight\n//                    };\n\n                    $element = scope.$element = $(element);\n\n                    //scope.$watch(function(){\n                    //    return $element.attr('class');\n                    //}, function(cssClass){\n                    //    console.log(cssClass);\n                    //});\n\n                    scope.$contentPane = element.find('>.diagram-content-pane');\n\n                    $timeout(function() {\n                        scope.$broadcast('DiagramContainerInitialized');\n                    });\n                }\n\n            };\n        }\n    ]);\n\n","/*globals angular, $*/\n\n'use strict';\n\n// Move this to GME eventually\n\nangular.module( 'mms.designVisualization.drawingGrid', [] )\n    .directive( 'drawingGrid', [ '$log',\n        function () {\n\n            return {\n                restrict: 'E',\n                replace: true,\n                transclude: true,\n                templateUrl: '/mmsApp/templates/drawingGrid.html',\n                link: function (scope, element) {\n\n                    var $element;\n\n                    $element = $(element);\n\n                    scope.$watch('diagram.config.width', function(newVal) {\n                       $element.outerWidth(newVal);\n                    });\n\n                    scope.$watch('diagram.config.height', function(newVal) {\n                        $element.outerHeight(newVal);\n                    });\n\n                }\n\n\n            };\n        }] );","/*globals angular, fabric*/\n\n'use strict';\n\n// Move this to GME eventually\n\nangular.module( 'mms.designVisualization.fabricCanvas', [] )\n    .controller( 'FabricCanvasController', function () {\n\n    } )\n    .directive( 'fabricCanvas', [\n        '$log',\n        'diagramService',\n        function ( $log, diagramService ) {\n\n            return {\n\n                scope: {},\n                controller: 'FabricCanvasController',\n                require: '^diagramContainer',\n                restrict: 'E',\n                replace: true,\n                templateUrl: '/mmsApp/templates/fabricCanvas.html',\n                link: function ( scope, element, attributes, diagramContainerCtrl ) {\n\n                    var\n                    canvas,\n                        renderDiagram;\n\n                    scope.id = diagramContainerCtrl.getId() + 'fabric-canvas';\n\n                    canvas = new fabric.Canvas( scope.id );\n\n                    canvas.setBackgroundColor( 'rgba(255, 73, 64, 0.6)' );\n\n                    renderDiagram = function () {\n\n                        if ( angular.isObject( scope.diagramData ) ) {\n\n                            if ( angular.isArray( scope.diagramData.symbols ) ) {\n\n                                angular.forEach( scope.diagramData.symbols, function ( symbol ) {\n\n                                    diagramService.getSVGForSymbolType( symbol.type )\n                                        .then( function ( object ) {\n\n                                            var svgObject;\n\n                                            svgObject = object.set( {\n                                                left: symbol.x,\n                                                top: symbol.y,\n                                                angle: 0\n                                            } );\n\n                                            //                  canvas.add(svgObject);\n\n                                            var rect = new fabric.Rect( {\n                                                left: 100,\n                                                top: 50,\n                                                width: 100,\n                                                height: 100,\n                                                fill: 'green',\n                                                angle: 20,\n                                                padding: 10\n                                            } );\n\n                                            canvas.add( rect );\n\n                                            //                $log.debug('e', svgObject);\n\n                                            canvas.renderAll();\n\n                                        } );\n\n                                } );\n\n                            }\n\n                        }\n\n                        canvas.clear()\n                            .renderAll();\n\n                    };\n\n                    scope.$watch( diagramContainerCtrl.getDiagramData, function ( value ) {\n                        $log.debug( 'DiagramData is ', value );\n                        scope.diagramData = value;\n                        renderDiagram();\n\n                    } );\n\n                }\n\n            };\n        }\n    ] );","/*globals angular, ga*/\n\n'use strict';\n\n// Move this to GME eventually\n\nangular.module('mms.headerButtons', [])\n    .controller('HeaderButtonsController', function ($scope, $rootScope, $mdDialog, $log, $http, $mdToast, $cookies) {\n\n        $scope.openSubscribeDialog = function (ev) {\n\n            function DialogController($scope, $mdDialog) {\n\n                $scope.user = {};\n\n                $scope.hide = function () {\n                    $mdDialog.hide();\n                };\n                $scope.cancel = function () {\n                    $mdDialog.cancel();\n                };\n                $scope.send = function (userFields) {\n\n                    $mdDialog.hide(userFields);\n\n                    if ($scope.user && $scope.user.email) {\n\n                        $scope.emailDesign = function() {\n                            ga('send', 'event', 'submitEmail', 'click');\n                        };\n\n                        $http.post('http://mmsapp.metamorphsoftware.com/subscribe', {\n                            name: $scope.user.name,\n                            email: $scope.user.email,\n                            webgmeSid: $cookies.webgmeSid\n                        }).success(function () {\n\n                        }).\n                            error(function (data, status) {\n                                $log.error('Saving contact errored', data, status);\n                            });\n\n                        $mdToast.show(\n                            $mdToast.simple()\n                            .content('Your contact information was submitted. Thank you!')\n                        );\n\n\n                    }\n\n                };\n            }\n\n            ga('send', 'event', 'subscribeDialog', 'open');\n\n            $mdDialog.show({\n                controller: DialogController,\n                templateUrl: '/mmsApp/templates/subscribeDialog.html',\n                targetEvent: ev\n            })\n                .then(function (fields) {\n                    $log.debug('Subscription', fields);\n                }, function () {\n                    $log.debug('Subscription cancelled.');\n                });\n\n        };\n\n\n        $rootScope.openHelpDialog = $scope.openHelpDialog = function (ev) {\n\n            function DialogController($scope, $mdDialog) {\n\n                $scope.user = {};\n\n                $scope.hide = function () {\n                    $mdDialog.hide();\n                };\n                $scope.close = function () {\n                    $mdDialog.hide();\n                };\n            }\n\n            ga('send', 'event', 'helpDialog', 'open');\n\n            $mdDialog.show({\n                controller: DialogController,\n                templateUrl: '/mmsApp/templates/aboutDialog.html',\n                targetEvent: ev\n            })\n                .then(function () {\n                });\n        };\n\n\n        $scope.openShareDialog = function (ev) {\n\n            function DialogController($scope, $mdDialog, $window) {\n\n                $scope.designUrl = $window.location.href;\n\n                $scope.mailtoUrl =\n                    'mailto:?subject=Check out my ARA module design&body=' + $scope.designUrl;\n\n                $scope.emailDesign = function() {\n                    ga('send', 'event', 'emailDesign', 'click');\n                };\n\n                $scope.hide = function () {\n                    $mdDialog.hide();\n                };\n                $scope.close = function () {\n                    $mdDialog.hide();\n                };\n            }\n\n            ga('send', 'event', 'shareDialog', 'open');\n\n            $mdDialog.show({\n                controller: DialogController,\n                templateUrl: '/mmsApp/templates/shareDialog.html',\n                targetEvent: ev\n            })\n                .then(function () {\n                });\n        };\n\n\n    })\n    .directive('headerButtons', ['$rootScope',\n        function () {\n\n            return {\n                controller: 'HeaderButtonsController',\n                restrict: 'E',\n                replace: true,\n                transclude: true,\n                templateUrl: '/mmsApp/templates/headerButtons.html'\n            };\n        }]);\n","/*globals angular*/\n\n'use strict';\n\nangular.module(\n    'mms.designVisualization.port', []\n)\n    .controller( 'PortController', function ( $scope ) {\n\n        $scope.getPortTransform = function () {\n\n            var transformString;\n\n            transformString = 'translate(' + $scope.portInstance.portSymbol.x + ',' + $scope.portInstance.portSymbol\n                .y + ')';\n\n            return transformString;\n\n        };\n\n        $scope.getLabel = function() {\n\n            var label;\n\n            if (angular.isString($scope.portInstance.label)) {\n                label = $scope.portInstance.label;\n            } else if (angular.isFunction($scope.portInstance.label)){\n                label = $scope.portInstance.label();\n            } else {\n                label = $scope.portInstance.portSymbol.label;\n            }\n\n            return label;\n        };\n\n        $scope.isPortLabelVisible = function() {\n\n            return $scope.component.symbol.showPortLabels;\n\n        };\n\n        $scope.getCssClass = function() {\n\n            var cssClass;\n\n            cssClass = $scope.portInstance.portSymbol.cssClass;\n\n            return cssClass;\n\n        };\n\n    } )\n    .directive(\n        'port',\n\n        function () {\n\n            return {\n                scope: false,\n                controller: 'PortController',\n                restrict: 'E',\n                replace: true,\n                templateUrl: '/mmsApp/templates/port.html',\n                templateNamespace: 'SVG',\n                require: [ '^svgDiagram', '^diagramContainer' ],\n                link: function ( scope, element, attributes, controllers ) {\n\n                    var svgDiagramController;\n\n                    svgDiagramController = controllers[ 0 ];\n\n                    scope.onPortClick = function ( port, $event ) {\n                        svgDiagramController.onPortClick( scope.component, port, $event );\n                    };\n\n                    scope.onPortMouseDown = function ( port, $event ) {\n                        svgDiagramController.onPortMouseDown( scope.component, port, $event );\n                    };\n\n                    scope.onPortMouseUp = function ( port, $event ) {\n                        svgDiagramController.onPortMouseUp( scope.component, port, $event );\n                    };\n\n                }\n            };\n        }\n);\n","/*globals angular*/\n\n'use strict';\n\n// Move this to GME eventually\n\nangular.module( 'mms.designVisualization.processingCover', [] )\n    .directive( 'processingCover', [ '$rootScope', '$timeout',\n        function ($rootScope) {\n\n            return {\n                restrict: 'E',\n                replace: true,\n                transclude: true,\n                templateUrl: '/mmsApp/templates/processingCover.html',\n                link: function (/*scope, element*/) {\n\n                    $rootScope.setProcessing = function() {\n                        $rootScope.processing = true;\n                    };\n\n                    $rootScope.stopProcessing = function() {\n                        $rootScope.processing = false;\n                    };\n\n                }\n\n            };\n        }] );\n","/*globals angular*/\n'use strict';\n\nvar resizeToHeightModule = angular.module('mms.resizeToHeight', []);\n\n\nresizeToHeightModule.directive('resizeToHeight', function ($window) {\n\n    return {\n\n        scope: {\n            heightIsLessWith: '=?'\n        },\n        link: function (scope, element, attributes) {\n\n            var window = angular.element(\n                    $window\n                ),\n                minHeight = parseInt(attributes.mindHeight, 10) || 0,\n                maxHeight = parseInt(attributes.maxHeight, 10) || Infinity,\n                heightIsLessWith = parseInt(scope.heightIsLessWith, 10) || 0;\n\n            scope.getWindowHeight = function () {\n\n                var max, min,\n                    height;\n\n                height = ($window.innerHeight > 0) ? $window.innerHeight : screen.height;\n\n                max = maxHeight;\n                min = minHeight;\n\n                return Math.max(Math.min(height - heightIsLessWith, max), min);\n            };\n\n            scope.$watch(scope.getWindowHeight,\n                function (newValue) {\n                    element.outerHeight(newValue);\n                });\n\n            window.bind('resize', function () {\n                scope.$apply();\n            });\n        }\n    };\n});\n\nmodule.exports = resizeToHeightModule;","/*globals angular*/\n'use strict';\n\nvar resizeToWindowModule = angular.module('mms.resizeToWindow', []);\n\n\nresizeToWindowModule.directive('resizeToWindow', function ($window) {\n\n  return function (scope, element, attributes) {\n\n    var window = angular.element(\n        $window\n      ),\n      minWidth = parseInt(attributes.minWidth, 10) || 0,\n      minHeight = parseInt(attributes.mindHeight, 10) || 0,\n      maxWidth = parseInt(attributes.maxWidth, 10) || Infinity,\n      maxHeight = parseInt(attributes.maxHeight, 10) || Infinity,\n      widthIsLessWith = parseInt(attributes.widthIsLessWith, 10) || 0,\n      heightIsLessWith = parseInt(attributes.heightIsLessWith, 10) || 0,\n\n      reverseInPortrait = true;\n\n    scope.getWindowHeight = function () {\n\n      var max, min,\n        height, width;\n\n      height = ($window.innerHeight > 0) ? $window.innerHeight : screen.height;\n      width = ($window.innerWidth > 0) ? $window.innerWidth : screen.width;\n\n      if (reverseInPortrait && height>width) {\n        max = maxWidth;\n        min = minWidth;\n      } else {\n        max = maxHeight;\n        min = minHeight;\n      }\n\n      return Math.max(Math.min(height-heightIsLessWith, max), min);\n    };\n\n    scope.getWindowWidth = function () {\n\n      var max, min,\n        height, width;\n\n      height = ($window.innerHeight > 0) ? $window.innerHeight : screen.height;\n      width = ($window.innerWidth > 0) ? $window.innerWidth : screen.width;\n\n      if (reverseInPortrait && height>width) {\n        max = maxHeight;\n        min = minHeight;\n      } else {\n        max = maxWidth;\n        min = minWidth;\n      }\n\n      return Math.max(Math.min(width-widthIsLessWith, max), min);\n    };\n\n    scope.$watch(scope.getWindowWidth,\n      function (newValue) {\n        element.outerWidth(newValue);\n      });\n\n    scope.$watch(scope.getWindowHeight,\n      function (newValue) {\n        element.outerHeight(newValue);\n      });\n\n    window.bind('resize', function () {\n      scope.$apply();\n    });\n\n  };\n});\n\nmodule.exports = resizeToWindowModule;","/*globals angular, gapi*/\n\n'use strict';\n\n// Move this to GME eventually\n\nangular.module( 'mms.socialMediaButtons', [ 'djds4rce.angular-socialshare' ] )\n    .run(function($FB){\n        $FB.init('1517886365166675');\n    })\n    .controller('SocialMediaButtonsController', function(){\n\n\n    })\n    .directive( 'socialMediaButtons', [ '$rootScope',\n        function () {\n\n            return {\n                controller: 'SocialMediaButtonsController',\n                restrict: 'E',\n                replace: true,\n                transclude: true,\n                templateUrl: '/mmsApp/templates/socialMediaButtons.html',\n                link: function() {\n                    if (gapi !== undefined) {\n                        gapi.plus.go();\n                    }\n                }\n            };\n        }] );\n","/*globals angular, ga*/\n\n'use strict';\n\nmodule.exports = function ($scope, diagramService, wiringService, operationsManager, $timeout, gridService, $log) {\n\n    var self = this,\n        getOffsetToMouse,\n        possibbleDragTargetsDescriptor,\n        dragTargetsDescriptor,\n\n        dragTargetsWiresUpdate,\n        wireUpdateWait,\n        dragTargetsWiresUpdatePromises,\n\n        onDiagramMouseUp,\n        onDiagramMouseMove,\n        onDiagramMouseLeave,\n        onWindowBlur,\n        onComponentMouseUp,\n        onComponentMouseDown,\n\n        startDrag,\n        finishDrag,\n        cancelDrag;\n\n\n    getOffsetToMouse = function ($event) {\n\n        var offset;\n\n        offset = {\n            x: $event.pageX - $scope.elementOffset.left,\n            y: $event.pageY - $scope.elementOffset.top\n        };\n\n        return offset;\n\n    };\n\n\n    startDrag = function () {\n\n        self.dragging = true;\n\n        //self.dragOperation = operationsManager.initNew('setComponentPosition');\n\n        dragTargetsDescriptor = possibbleDragTargetsDescriptor;\n        possibbleDragTargetsDescriptor = null;\n\n        $log.debug('Dragging', dragTargetsDescriptor);\n\n    };\n\n    cancelDrag = function () {\n\n        possibbleDragTargetsDescriptor = null;\n\n        if (dragTargetsDescriptor) {\n\n            angular.forEach(dragTargetsDescriptor.targets, function (target) {\n\n                target.component.setPosition(\n                    target.originalPosition.x,\n                    target.originalPosition.y\n                );\n\n            });\n\n            angular.forEach(dragTargetsDescriptor.affectedWires, function (wire) {\n\n                wiringService.adjustWireEndSegments(wire);\n\n            });\n\n            dragTargetsDescriptor = null;\n\n        }\n\n        self.dragging = false;\n\n    };\n\n    finishDrag = function () {\n\n        var message,\n            components;\n\n        components = dragTargetsDescriptor.targets.map(\n            function (target) {\n                return target.component;\n            });\n\n        if (components.length > 1) {\n            message = 'Dragging selection';\n        } else {\n            message = 'Dragging ' + components[0].label;\n        }\n\n        ga('send', 'event', 'component', 'drag', components[0].label);\n\n        $scope.$emit('componentsPositionChange', {\n            diagramId: $scope.diagram.id,\n            components: components,\n            message: message\n        });\n\n        //$scope.$emit('wiresChange', {\n        //    diagramId: $scope.diagram.id,\n        //    wires: dragTargetsDescriptor.affectedWires\n        //});\n\n        self.dragging = false;\n\n        dragTargetsDescriptor = null;\n\n        $log.debug('Finish dragging');\n\n    };\n\n    wireUpdateWait = 20;\n    dragTargetsWiresUpdatePromises = {};\n\n    dragTargetsWiresUpdate = function (affectedWires) {\n\n        angular.forEach(affectedWires, function (wire) {\n\n            $timeout.cancel(dragTargetsWiresUpdatePromises[wire.id]);\n\n            dragTargetsWiresUpdatePromises[wire.id] = $timeout(function () {\n                wiringService.adjustWireEndSegments(wire);\n            }, wireUpdateWait);\n\n        });\n\n    };\n\n    onDiagramMouseMove = function ($event) {\n\n        var offset,\n            i,\n            target,\n            snappedPosition;\n\n        if (possibbleDragTargetsDescriptor) {\n            startDrag();\n        }\n\n        if (dragTargetsDescriptor) {\n\n            offset = getOffsetToMouse($event);\n\n            for (i = 0; i < dragTargetsDescriptor.targets.length; i++) {\n\n                target = dragTargetsDescriptor.targets[i];\n\n                snappedPosition = gridService.getSnappedPosition(\n                    {\n                        x: offset.x + target.deltaToCursor.x,\n                        y: offset.y + target.deltaToCursor.y\n                    });\n\n                target.component.setPosition(\n                    snappedPosition.x,\n                    snappedPosition.y\n                );\n\n            }\n\n            dragTargetsWiresUpdate(dragTargetsDescriptor.affectedWires);\n\n        }\n\n    };\n\n    onDiagramMouseUp = function ($event) {\n\n        possibbleDragTargetsDescriptor = null;\n\n        if (dragTargetsDescriptor) {\n            finishDrag();\n            $event.stopPropagation();\n        }\n\n    };\n\n    onDiagramMouseLeave = function (/*$event*/) {\n\n        cancelDrag();\n\n    };\n\n    onWindowBlur = function (/*$event*/) {\n\n        cancelDrag();\n\n    };\n\n    onComponentMouseUp = function (component, $event) {\n\n        possibbleDragTargetsDescriptor = null;\n\n        if (dragTargetsDescriptor) {\n            finishDrag();\n            $event.stopPropagation();\n        }\n\n    };\n\n    onComponentMouseDown = function (component, $event) {\n\n        var componentsToDrag,\n            getDragDescriptor;\n\n        componentsToDrag = [];\n\n        getDragDescriptor = function (component) {\n\n            var offset = getOffsetToMouse($event);\n\n            return {\n                component: component,\n                originalPosition: {\n                    x: component.x,\n                    y: component.y\n                },\n                deltaToCursor: {\n                    x: component.x - offset.x,\n                    y: component.y - offset.y\n                }\n            };\n\n        };\n\n        $scope.diagram.config = $scope.diagram.config || {};\n\n        if ($scope.diagram.config.editable === true &&\n            component.nonSelectable !== true &&\n            component.locationLocked !== true) {\n\n            $event.stopPropagation();\n\n            possibbleDragTargetsDescriptor = {\n                targets: [getDragDescriptor(component)]\n            };\n\n            componentsToDrag.push(component);\n\n            if ($scope.diagram.state.selectedComponentIds.indexOf(component.id) > -1) {\n\n                // Drag along other selected components\n\n                angular.forEach($scope.diagram.state.selectedComponentIds, function (selectedComponentId) {\n\n                    var selectedComponent;\n\n                    if (component.id !== selectedComponentId) {\n\n                        selectedComponent = $scope.diagram.componentsById[selectedComponentId];\n\n                        possibbleDragTargetsDescriptor.targets.push(getDragDescriptor(\n                            selectedComponent));\n\n                        componentsToDrag.push(selectedComponent);\n\n                    }\n\n                });\n            }\n\n            possibbleDragTargetsDescriptor.affectedWires = $scope.diagram.getWiresForComponents(\n                componentsToDrag\n            );\n\n        }\n\n    };\n\n    this.onDiagramMouseUp = onDiagramMouseUp;\n    this.onDiagramMouseMove = onDiagramMouseMove;\n    this.onDiagramMouseLeave = onDiagramMouseLeave;\n    this.onWindowBlur = onWindowBlur;\n    this.onComponentMouseUp = onComponentMouseUp;\n    this.onComponentMouseDown = onComponentMouseDown;\n\n    return this;\n\n};\n","/*globals angular*/\n\n'use strict';\n\nmodule.exports = function($scope, diagramService, gridService, $log) {\n\n    var onComponentMouseUp,\n\n        moveComponentElementToFront,\n        toggleComponentSelected;\n\n\n    moveComponentElementToFront = function ( componentId ) {\n\n        var z,\n            component,\n            needsTobeReordered;\n\n        needsTobeReordered = false;\n\n        z = diagramService.getHighestZ();\n        component = $scope.diagram.componentsById[ componentId ];\n\n        if (angular.isObject(component)) {\n\n            if (isNaN(component.z)) {\n                component.z = z;\n                needsTobeReordered = true;\n            } else {\n                if (component.z < z) {\n                    component.z = z + 1;\n                    needsTobeReordered = true;\n                }\n            }\n\n            if (needsTobeReordered) {\n                gridService.reorderVisibleComponents($scope.id);\n            }\n\n        }\n\n    };\n\n\n    toggleComponentSelected =  function ( component, $event ) {\n\n        var index;\n\n        $scope.diagram.config = $scope.diagram.config || {};\n\n        if ( angular.isObject( component ) && $scope.diagram.config.disallowSelection !== true && component.nonSelectable !== true ) {\n\n            index = $scope.diagram.state.selectedComponentIds.indexOf( component.id );\n\n            if ( index > -1 ) {\n\n                $scope.diagram.state.selectedComponentIds.splice( index, 1 );\n\n            } else {\n\n                if ( $scope.diagram.state.selectedComponentIds.length > 0 &&\n                    $scope.diagram.config.multiSelect !== true &&\n                    $event.shiftKey !== true ) {\n\n                    angular.forEach( $scope.diagram.state.selectedComponentIds, function ( componentId ) {\n                        $scope.diagram.componentsById[ componentId ].selected = false;\n                    } );\n                    $scope.diagram.state.selectedComponentIds = [];\n                }\n\n                $scope.diagram.state.selectedComponentIds.push( component.id );\n\n                moveComponentElementToFront( component.id );\n\n            }\n\n            $log.debug('selecteds', $scope.diagram.state.selectedComponentIds);\n\n        }\n\n    };\n\n\n    onComponentMouseUp = function(component, $event) {\n        toggleComponentSelected( component, $event );\n\n    };\n\n    this.onComponentMouseUp = onComponentMouseUp;\n\n    return this;\n\n};\n","/*globals angular, ga*/\n\n'use strict';\n\nmodule.exports = function ($scope, $rootScope, diagramService, wiringService, operationsManager, $timeout, gridService, $log) {\n\n    var self = this,\n        getOffsetToMouse,\n        possibbleDragTargetsDescriptor,\n        dragTargetsDescriptor,\n\n        onDiagramMouseUp,\n        onDiagramMouseMove,\n        onDiagramMouseLeave,\n        onWindowBlur,\n        onWireMouseUp,\n        onWireMouseDown,\n\n        startDrag,\n        finishDrag,\n        cancelDrag;\n\n\n    getOffsetToMouse = function ($event) {\n\n        var offset;\n\n        offset = {\n            x: $event.pageX - $scope.elementOffset.left,\n            y: $event.pageY - $scope.elementOffset.top\n        };\n\n        return offset;\n\n    };\n\n\n    startDrag = function () {\n\n        self.dragging = true;\n\n        //self.dragOperation = operationsManager.initNew('setComponentPosition');\n\n        dragTargetsDescriptor = possibbleDragTargetsDescriptor;\n        possibbleDragTargetsDescriptor = null;\n\n        $log.debug('Dragging wire', dragTargetsDescriptor);\n\n    };\n\n    cancelDrag = function () {\n\n        possibbleDragTargetsDescriptor = null;\n\n        if (dragTargetsDescriptor) {\n\n            angular.forEach(dragTargetsDescriptor.targets, function (target) {\n\n                target.wire.segments = target.originalSegments;\n\n            });\n\n            dragTargetsDescriptor = null;\n\n        }\n\n        self.dragging = false;\n\n    };\n\n    finishDrag = function () {\n\n        angular.forEach(dragTargetsDescriptor.targets, function (target) {\n            $rootScope.$emit('wireSegmentsMustBeSaved', target.wire);\n\n            if (target.wasCorner) {\n                ga('send', 'event', 'corner', 'drag', target.wire.id);\n            } else {\n                ga('send', 'event', 'wire', 'drag', target.wire.id);\n            }\n\n        });\n\n        self.dragging = false;\n\n        dragTargetsDescriptor = null;\n\n        $log.debug('Finish dragging');\n\n    };\n\n    onDiagramMouseMove = function ($event) {\n\n        var offset,\n            i,\n            target,\n            snappedPosition1,\n            snappedPosition2;\n\n        if (possibbleDragTargetsDescriptor) {\n            startDrag();\n        }\n\n        if (dragTargetsDescriptor) {\n\n            offset = getOffsetToMouse($event);\n\n            for (i = 0; i < dragTargetsDescriptor.targets.length; i++) {\n\n                target = dragTargetsDescriptor.targets[i];\n\n\n                if (!target.wasCorner) {\n\n                    snappedPosition1 = gridService.getSnappedPosition(\n                        {\n                            x: offset.x + target.deltaToCursor1.x,\n                            y: offset.y + target.deltaToCursor1.y\n                        });\n\n                    snappedPosition2 = gridService.getSnappedPosition(\n                        {\n                            x: offset.x + target.deltaToCursor2.x,\n                            y: offset.y + target.deltaToCursor2.y\n                        });\n\n\n                    target.wire.segments[target.segmentIndex - 1] =\n                        wiringService.getSegmentsBetweenPositions(\n                            {\n                                end1: {\n                                    x: target.wire.segments[target.segmentIndex - 1].x1,\n                                    y: target.wire.segments[target.segmentIndex - 1].y1\n                                },\n                                end2: snappedPosition1\n                            },\n                            'SimpleRouter')[0];\n\n                    target.wire.segments[target.segmentIndex] =\n                        wiringService.getSegmentsBetweenPositions(\n                            {\n                                end1: snappedPosition1,\n                                end2: snappedPosition2\n                            }, 'SimpleRouter')[0];\n\n                    target.wire.segments[target.segmentIndex + 1] =\n                        wiringService.getSegmentsBetweenPositions(\n                            {\n                                end1: snappedPosition2,\n                                end2: {\n                                    x: target.wire.segments[target.segmentIndex + 1].x2,\n                                    y: target.wire.segments[target.segmentIndex + 1].y2\n                                }\n                            },\n                            'SimpleRouter')[0];\n                } else {\n\n                    snappedPosition2 = gridService.getSnappedPosition(\n                        {\n                            x: offset.x + target.deltaToCursor2.x,\n                            y: offset.y + target.deltaToCursor2.y\n                        });\n\n                    target.wire.segments[target.segmentIndex] =\n                        wiringService.getSegmentsBetweenPositions(\n                            {\n                                end1: {\n                                    x: target.wire.segments[target.segmentIndex].x1,\n                                    y: target.wire.segments[target.segmentIndex].y1\n                                },\n                                end2: snappedPosition2\n                            }, 'SimpleRouter')[0];\n\n                    target.wire.segments[target.segmentIndex + 1] =\n                        wiringService.getSegmentsBetweenPositions(\n                            {\n                                end1: snappedPosition2,\n                                end2: {\n                                    x: target.wire.segments[target.segmentIndex + 1].x2,\n                                    y: target.wire.segments[target.segmentIndex + 1].y2\n                                }\n                            },\n                            'SimpleRouter')[0];\n\n                }\n            }\n\n        }\n\n    };\n\n    onDiagramMouseUp = function ($event) {\n\n        possibbleDragTargetsDescriptor = null;\n\n        if (dragTargetsDescriptor) {\n            finishDrag();\n            $event.stopPropagation();\n        }\n\n    };\n\n    onDiagramMouseLeave = function (/*$event*/) {\n\n        cancelDrag();\n\n    };\n\n    onWindowBlur = function (/*$event*/) {\n\n        cancelDrag();\n\n    };\n\n    onWireMouseUp = function (wire, segment, $event) {\n\n        possibbleDragTargetsDescriptor = null;\n\n        if (dragTargetsDescriptor) {\n            finishDrag();\n            $event.stopPropagation();\n        }\n\n    };\n\n    onWireMouseDown = function (wire, segment, $event, wasCorner) {\n\n        var getDragDescriptor,\n            indexOfSegment;\n\n        getDragDescriptor = function (wire, segment, sIndex) {\n\n            var offset = getOffsetToMouse($event);\n\n            return {\n                wire: wire,\n                segment: segment,\n                segmentIndex: sIndex,\n                originalSegments: angular.copy(wire.segments),\n                wasCorner: wasCorner,\n                deltaToCursor1: {\n                    x: segment.x1 - offset.x,\n                    y: segment.y1 - offset.y\n                },\n                deltaToCursor2: {\n                    x: segment.x2 - offset.x,\n                    y: segment.y2 - offset.y\n                }\n\n            };\n\n\n        };\n\n        if (angular.isObject(wire) && angular.isObject(segment)) {\n\n            indexOfSegment = wire.segments.indexOf(segment);\n\n            if ( (indexOfSegment > 0 || wasCorner) && indexOfSegment < wire.segments.length - 1) {\n\n                $scope.diagram.config = $scope.diagram.config || {};\n\n                if ($scope.diagram.config.editable === true &&\n                    wire.nonSelectable !== true &&\n                    wire.locationLocked !== true) {\n\n                    $event.stopPropagation();\n\n                    possibbleDragTargetsDescriptor = {\n                        targets: [getDragDescriptor(wire, segment, indexOfSegment)]\n                    };\n\n                }\n\n            }\n        }\n    };\n\n    this.onDiagramMouseUp = onDiagramMouseUp;\n    this.onDiagramMouseMove = onDiagramMouseMove;\n    this.onDiagramMouseLeave = onDiagramMouseLeave;\n    this.onWindowBlur = onWindowBlur;\n    this.onWireMouseUp = onWireMouseUp;\n    this.onWireMouseDown = onWireMouseDown;\n\n    return this;\n\n};\n","/*globals angular, ga*/\n\n'use strict';\n\nmodule.exports = function($scope, $rootScope, diagramService, wiringService, gridService, $timeout, $log) {\n\n    var self = this,\n\n        Wire = require( '../../../services/diagramService/classes/Wire.js' ),\n\n        wireStart,\n\n        startWire,\n        addCornerToNewWireLine,\n        finishWire,\n        cancelWire,\n\n        onDiagramMouseUp,\n        onDiagramMouseMove,\n        onDiagramMouseLeave,\n        onWindowBlur,\n        onPortMouseDown;\n\n\n\n    startWire = function (component, port) {\n\n        wireStart = {\n            component: component,\n            port: port\n        };\n\n        $log.debug( 'Starting wire', wireStart );\n\n        self.wiring = true;\n\n    };\n\n    addCornerToNewWireLine = function () {\n\n        var lastSegment;\n\n        $scope.newWireLine.lockedSegments = $scope.newWireLine.segments;\n\n        lastSegment = $scope.newWireLine.lockedSegments[ $scope.newWireLine.lockedSegments.length - 1 ];\n\n        $scope.newWireLine.activeSegmentStartPosition = {\n            x: lastSegment.x2,\n            y: lastSegment.y2\n        };\n\n    };\n\n    finishWire = function ( component, port ) {\n\n        var wire = new Wire( {\n            id: 'new-wire-' + Math.round( Math.random() * 10000 ),\n            end1: {\n                component: wireStart.component,\n                port: wireStart.port\n            },\n            end2: {\n                component: component,\n                port: port\n            }\n        } );\n\n        wire.segments = angular.copy(\n            $scope.newWireLine.lockedSegments.concat(\n                wiringService.getSegmentsBetweenPositions( {\n                        end1: $scope.newWireLine.activeSegmentStartPosition,\n                        end2: port.getGridPosition()\n                    },\n                    $scope.selectedRouter.type,\n                    $scope.selectedRouter.params\n                )\n            ) );\n\n        $rootScope.$emit('wireCreationMustBeDone', wire);\n\n        $log.debug( 'Finish wire', wire );\n\n        ga('send', 'event', 'wire', 'newWire', {\n            end1: wireStart.component.id,\n            end2: component.id\n        });\n\n        wireStart = null;\n        $scope.newWireLine = null;\n\n        self.wiring = false;\n\n    };\n\n    cancelWire = function () {\n        $scope.newWireLine = null;\n        wireStart = null;\n        self.wiring = false;\n\n        ga('send', 'event', 'wire', 'cancelNewWire');\n\n    };\n\n    onDiagramMouseMove = function($event) {\n\n        var snappedPosition;\n\n        if ( wireStart ) {\n\n\n            $scope.newWireLine = $scope.newWireLine || {};\n            $scope.newWireLine.lockedSegments = $scope.newWireLine.lockedSegments || [];\n            $scope.newWireLine.activeSegmentStartPosition =\n                $scope.newWireLine.activeSegmentStartPosition || wireStart.port.getGridPosition();\n\n            snappedPosition = gridService.getSnappedPosition(\n                {\n                    x: $event.pageX - $scope.elementOffset.left - 3,\n                    y: $event.pageY - $scope.elementOffset.top - 3\n                }\n            );\n\n\n            $scope.newWireLine.segments = $scope.newWireLine.lockedSegments.concat(\n                wiringService.getSegmentsBetweenPositions( {\n                        end1: $scope.newWireLine.activeSegmentStartPosition,\n                        end2: snappedPosition\n                    },\n                    $scope.selectedRouter.type,\n                    $scope.selectedRouter.params\n                )\n            );\n\n        }\n\n    };\n\n    onDiagramMouseUp = function() {\n\n        if ( wireStart ) {\n            addCornerToNewWireLine();\n        }\n\n    };\n\n    onPortMouseDown = function( component, port, $event ) {\n\n        if ( wireStart ) {\n\n            $event.stopPropagation();\n\n            if ( wireStart.port !== port ) {\n                finishWire( component, port );\n            } else {\n                cancelWire();\n            }\n\n        } else {\n\n            startWire(component, port);\n            $event.stopPropagation();\n\n        }\n\n    };\n\n    onDiagramMouseLeave = function(/*$event*/) {\n        if (self.wiring) {\n            cancelWire();\n        }\n    };\n\n    onWindowBlur = function(/*$event*/) {\n        if (self.wiring) {\n            cancelWire();\n        }\n    };\n\n    $scope.$on('keyupOnDiagram', function($event, e) {\n\n        //console.log(e.keyCode);\n\n        if (e.keyCode === 16) { // Esc\n            cancelWire();\n        }\n\n        if (e.keyCode === 27) { // Esc\n            cancelWire();\n        }\n\n    });\n\n    this.onDiagramMouseUp = onDiagramMouseUp;\n    this.onDiagramMouseMove = onDiagramMouseMove;\n    this.onDiagramMouseLeave = onDiagramMouseLeave;\n    this.onWindowBlur = onWindowBlur;\n    this.onPortMouseDown = onPortMouseDown;\n\n    return this;\n\n};\n","/*globals angular, ga, $*/\n\n'use strict';\n\nmodule.exports = function (\n    $scope, $rootScope, diagramService, $timeout, contextmenuService, operationsManager, wiringService, $log) {\n\n    var\n        onComponentContextmenu,\n        onWireContextmenu,\n        onPortContextmenu,\n        onDiagramContextmenu,\n        onDiagramMouseDown,\n        getOffsetToMouse,\n\n        openMenu;\n\n    $log.debug('Initializing context menus.');\n\n    getOffsetToMouse = function ($event) {\n\n        var offset;\n\n        offset = {\n            x: $event.pageX - $scope.elementOffset.left,\n            y: $event.pageY - $scope.elementOffset.top\n        };\n\n        return offset;\n\n    };\n\n    openMenu = function ($event) {\n\n        contextmenuService.close();\n\n        $timeout(function () {\n\n            var openContextMenuEvent;\n\n            openContextMenuEvent = angular.extend($.Event('openContextMenu'), {\n                clientX: $event.clientX + 2,\n                clientY: $event.clientY + 2,\n                pageX: $event.pageX + 2,\n                pageY: $event.pageY + 2,\n                screenX: $event.screenX + 2,\n                screenY: $event.screenY + 2,\n                target: $event.target\n            });\n\n            $scope.$element.triggerHandler(openContextMenuEvent);\n\n        });\n\n    };\n\n    onDiagramMouseDown = function () {\n        contextmenuService.close();\n    };\n\n    onWireContextmenu = function (wire, segment, $event, wasCorner) {\n\n        var wiringMenu;\n\n\n        if (wasCorner) {\n            ga('send', 'event', 'corner', 'contextmenu');\n        } else {\n            ga('send', 'event', 'wire', 'contextmenu');\n        }\n\n        wiringMenu = [];\n\n        angular.forEach($scope.routerTypes, function(routerType) {\n\n            wiringMenu.push(\n                {\n                    id: routerType.id,\n                    label: routerType.label,\n                    action: function(){\n                        wiringService.routeWire( wire, routerType.type, routerType.params);\n                        $rootScope.$emit('wireSegmentsMustBeSaved', wire);\n                    }\n                }\n            );\n\n        });\n\n        $scope.contextMenuData = [\n            {\n                id: 'adjust',\n                items: [\n                    {\n                        id: 'redraw',\n                        label: 'Redraw wire',\n                        menu: [\n                            {\n                                items: wiringMenu\n                            }\n                        ]\n                    }\n                ]\n            },\n            {\n                id: 'delete',\n                items: [\n                    {\n                        id: 'destroy',\n                        label: 'Destroy wire',\n                        iconClass: 'fa fa-trash-o',\n                        action: function () {\n\n                            ga('send', 'event', 'wire', 'destroy', wire.id);\n\n                            $rootScope.$emit('wireDeletionMustBeDone', wire);\n                        }\n                    }\n                ]\n            }\n\n        ];\n\n        if (wasCorner) {\n\n            $scope.contextMenuData.unshift(\n\n                {\n\n                    id: 'cornerManipulation',\n                    items: [\n                        {\n                            id: 'destroyCorner',\n                            label: 'Destroy corner',\n                            iconClass: 'fa fa-minus',\n                            action: function () {\n\n                                var sIndex,\n                                    nextSegment;\n\n                                sIndex = wire.segments.indexOf(segment);\n\n                                nextSegment = wire.segments[ sIndex + 1 ];\n\n                                wire.segments[ sIndex + 1 ] = wiringService.getSegmentsBetweenPositions(\n                                    {\n                                        end1: {\n                                            x: segment.x1,\n                                            y: segment.y1\n                                        },\n                                        end2: {\n                                            x: nextSegment.x2,\n                                            y: nextSegment.y2\n                                        }\n                                    }, 'SimpleRouter')[0];\n\n                                wire.segments.splice(sIndex, 1);\n\n                                ga('send', 'event', 'corner', 'destroy', wire.id, sIndex);\n\n                                $rootScope.$emit('wireSegmentsMustBeSaved', wire);\n                            }\n                        }\n                    ]\n                }\n            );\n\n        } else {\n\n            $scope.contextMenuData.unshift(\n\n                {\n\n                    id: 'cornerManipulation',\n                    items: [\n                        {\n                            id: 'addCorner',\n                            label: 'Add corner',\n                            iconClass: 'fa fa-plus',\n                            action: function () {\n\n                                var sIndex,\n                                    newSegment,\n                                    newPosition;\n\n                                sIndex = wire.segments.indexOf(segment);\n\n                                newPosition = getOffsetToMouse($event);\n\n                                newSegment = wiringService.getSegmentsBetweenPositions(\n                                    {\n                                        end1: {\n                                            x: newPosition.x,\n                                            y: newPosition.y\n                                        },\n\n                                        end2: {\n                                            x: segment.x2,\n                                            y: segment.y2\n                                        }\n                                    }, 'SimpleRouter')[0];\n\n\n                                wire.segments[ sIndex ] = wiringService.getSegmentsBetweenPositions(\n                                    {\n                                        end1: {\n                                            x: segment.x1,\n                                            y: segment.y1\n                                        },\n\n                                        end2: {\n                                            x: newPosition.x,\n                                            y: newPosition.y\n                                        }\n                                    }, 'SimpleRouter')[0];\n\n                                wire.segments.splice(sIndex + 1, 0, newSegment);\n\n                                ga('send', 'event', 'corner', 'add', wire.id, sIndex);\n\n                                $rootScope.$emit('wireSegmentsMustBeSaved', wire);\n                            }\n                        }\n                    ]\n                }\n            );\n\n\n        }\n\n        openMenu($event);\n\n        $event.stopPropagation();\n\n    };\n\n    onComponentContextmenu = function (component, $event) {\n\n        var inSelection,\n            selectedComponents,\n            destroyLabel,\n            wiringMenu;\n\n        wiringMenu = [];\n\n        ga('send', 'event', 'component', 'contextmenu');\n\n        angular.forEach($scope.routerTypes, function(routerType) {\n\n            wiringMenu.push(\n                {\n                    id: routerType.id,\n                    label: routerType.label,\n                    action: function(){\n\n                        var wires = $scope.diagram.getWiresForComponents([component]);\n\n                        angular.forEach(wires, function(wire) {\n\n                            ga('send', 'event', 'wire', 'redraw', wire.id);\n\n                            wiringService.routeWire(wire, routerType.type, routerType.params);\n                            $rootScope.$emit('wireSegmentsMustBeSaved', wire);\n\n                        });\n                    }\n                }\n            );\n\n        });\n\n\n        selectedComponents = $scope.diagram.getSelectedComponents();\n\n        if ($scope.diagram.isComponentSelected(component) && selectedComponents.length > 1) {\n\n            inSelection = true;\n\n            destroyLabel = 'Destroy selected [' + selectedComponents.length + ']';\n\n        } else {\n            destroyLabel = 'Destroy';\n        }\n\n        $scope.contextMenuData = [\n            {\n                id: 'reposition',\n                items: [\n                    {\n                        id: 'rotateCW',\n                        label: 'Rotate CW',\n                        iconClass: 'fa fa-rotate-right',\n                        action: function () {\n\n                            var operation;\n\n                            ga('send', 'event', 'component', 'rotate', component.id);\n\n                            operation = operationsManager.initNew('rotateComponents', component);\n                            operation.set(90);\n                            operation.commit();\n                        }\n                    },\n                    {\n                        id: 'rotateCCW',\n                        label: 'Rotate CCW',\n                        iconClass: 'fa fa-rotate-left',\n                        action: function () {\n\n                            var operation;\n\n                            console.log('Rotating anti-clockwise');\n\n                            ga('send', 'event', 'component', 'rotate', component.id);\n\n                            operation = operationsManager.initNew('rotateComponents', component);\n                            operation.set(-90);\n                            operation.commit();\n\n                        }\n                    }\n                ]\n            },\n            {\n                id: 'adjust',\n                items: [\n                    {\n                        id: 'redraw',\n                        label: 'Redraw all wires',\n                        menu: [\n                            {\n                                items: wiringMenu\n                            }\n                        ]\n                    }\n                ]\n            },\n            {\n                id: 'delete',\n                items: [\n                    {\n                        id: 'destroy',\n                        label: destroyLabel,\n                        iconClass: 'fa fa-trash-o',\n                        action: function () {\n\n                            ga('send', 'event', 'component', 'destroy', component.id);\n\n                            if (!inSelection) {\n                                $rootScope.$emit('componentDeletionMustBeDone', component);\n                            } else {\n                                $rootScope.$emit('componentDeletionMustBeDone', selectedComponents);\n                            }\n\n\n                        }\n                    }\n                ]\n            }\n\n        ];\n\n        openMenu($event);\n\n        $event.stopPropagation();\n\n    };\n\n    onPortContextmenu = function (component, port, $event) {\n\n        $scope.contextMenuData = [\n            {\n                id: 'properties',\n                items: [\n                    {\n                        id: 'info',\n                        label: 'Info',\n                        disabled: true,\n                        iconClass: null,\n                        action: function () {\n                            console.log('Port info');\n                        },\n                        actionData: {}\n                    }\n                ]\n            }\n        ];\n\n        openMenu($event);\n\n        $event.stopPropagation();\n\n        return false;\n\n    };\n\n    onDiagramContextmenu = function ($event) {\n\n        var wiringMenu;\n\n        wiringMenu = [];\n\n        ga('send', 'event', 'diagram', 'contextmenu');\n\n        angular.forEach($scope.routerTypes, function(routerType) {\n                var selected;\n\n                selected = routerType.id === $scope.selectedRouter.id;\n\n            wiringMenu.push(\n                {\n                    id: routerType.id,\n                    label: routerType.label,\n                    cssClass: selected ? 'selected' : 'not-selected',\n                    iconClass: selected ? 'fa fa-check' : undefined,\n                    action: function () {\n\n                        ga('send', 'event', 'diagram', 'changeRouter', routerType.id);\n\n                        $scope.selectedRouter = routerType;\n\n                    }\n                }\n            );\n\n        });\n\n\n        $scope.contextMenuData = [\n            {\n                id: 'testbenches',\n                items: [\n                    {\n                        id: 'generatePCB',\n                        label: 'Generate PCB',\n                        disabled: !angular.isFunction($rootScope.startTestbench) || $rootScope.runningTestbench,\n                        iconClass: 'fa fa-play',\n                        action: function () {\n                            $rootScope.startTestbench();\n                        },\n                        actionData: {}\n                    }\n                ]\n\n            },\n            {\n                id: 'gridSettings',\n                items: [\n                    {\n                        id: 'snapToGrid',\n                        label: 'Snap to grid',\n                        cssClass: $rootScope.snapToGrid ? 'selected' : 'not-selected',\n                        iconClass: $rootScope.snapToGrid ? 'fa fa-check' : undefined,\n                        action: function () {\n\n                            if ($rootScope.snapToGrid === true) {\n                                $rootScope.snapToGrid = false;\n                            } else {\n                                $rootScope.snapToGrid = true;\n                            }\n\n                            ga('send', 'event', 'diagram', 'changeSnapToGrid', $rootScope.snapToGrid);\n\n                        },\n                        actionData: {}\n                    }\n                ]\n\n            },\n            {\n                id: 'wiringMethods',\n                label: 'Wiring method',\n                items: wiringMenu\n            },\n            {\n                id: 'printMenu',\n                items: [\n                    {\n                        id: 'printDiagram',\n                        label: 'Print diagram',\n                        iconClass: 'glyphicon glyphicon-print',\n                        action: function() {\n                            window.print();\n                        }\n                    }\n                ]\n            }\n        ];\n\n        openMenu($event);\n\n        $event.stopPropagation();\n\n    };\n\n    this.onDiagramContextmenu = onDiagramContextmenu;\n    this.onComponentContextmenu = onComponentContextmenu;\n\n    this.onWireContextmenu = onWireContextmenu;\n\n    this.onPortContextmenu = onPortContextmenu;\n    this.onDiagramMouseDown = onDiagramMouseDown;\n\n    return this;\n\n};\n","/*globals angular, $*/\n\n'use strict';\n\n// Move this to GME eventually\n\nrequire('../componentWire/componentWire.js');\n\nangular.module('mms.designVisualization.svgDiagram', [\n    'mms.designVisualization.gridService',\n    'mms.designVisualization.componentWire',\n    'mms.designVisualization.operationsManager',\n    'isis.ui.contextmenu'\n])\n    .controller('SVGDiagramController', function (\n        $scope, $rootScope, $log, diagramService, wiringService, gridService, $window, $timeout, contextmenuService, operationsManager) {\n\n        var\n\n            ComponentSelectionHandler = require('./classes/ComponentSelectionHandler'),\n            componentSelectionHandler,\n\n            ComponentDragHandler = require('./classes/ComponentDragHandler'),\n            componentDragHandler,\n\n            WireDragHandler = require('./classes/WireDragHandler'),\n            wireDragHandler,\n\n            WireDrawHandler = require('./classes/WireDrawHandler'),\n            wireDrawHandler,\n\n            ContextMenuHandler = require('./classes/contextMenuHandler'),\n            contextMenuHandler,\n\n            componentElements,\n\n            $$window;\n\n        $$window = $($window);\n\n        componentDragHandler = new ComponentDragHandler(\n            $scope,\n            diagramService,\n            wiringService,\n            operationsManager,\n            $timeout,\n            gridService,\n            $log\n        );\n\n        wireDragHandler = new WireDragHandler(\n            $scope,\n            $rootScope,\n            diagramService,\n            wiringService,\n            operationsManager,\n            $timeout,\n            gridService,\n            $log\n        );\n\n        componentSelectionHandler = new ComponentSelectionHandler(\n            $scope,\n            diagramService,\n            gridService,\n            $log\n        );\n\n        wireDrawHandler = new WireDrawHandler(\n            $scope,\n            $rootScope,\n            diagramService,\n            wiringService,\n            gridService,\n            $timeout,\n            $log\n        );\n\n        contextMenuHandler = new ContextMenuHandler(\n            $scope,\n            $rootScope,\n            diagramService,\n            $timeout,\n            contextmenuService,\n            operationsManager,\n            wiringService,\n            $log\n        );\n\n        $scope.routerTypes = wiringService.getRouterTypes();\n\n        $scope.selectedRouter = $scope.routerTypes[0];\n\n        $scope.onDiagramMouseDown = function ($event) {\n\n\n            if ($event.which === 3) {\n                contextMenuHandler.onDiagramContextmenu($event);\n            } else {\n                contextMenuHandler.onDiagramMouseDown($event);\n            }\n\n        };\n\n        $scope.onDiagramMouseUp = function ($event) {\n\n            if (!componentDragHandler.dragging &&\n                !wireDrawHandler.wiring &&\n                !wireDragHandler.dragging &&\n                $event.which !== 3 ) {\n\n                $scope.diagram.state.selectedComponentIds = [];\n\n            }\n\n            componentDragHandler.onDiagramMouseUp($event);\n            wireDragHandler.onDiagramMouseUp($event);\n            wireDrawHandler.onDiagramMouseUp($event);\n\n        };\n\n        $scope.onDiagramClick = function (/*$event*/) {\n\n\n        };\n\n        $scope.onDiagramMouseMove = function ($event) {\n\n            componentDragHandler.onDiagramMouseMove($event);\n            wireDragHandler.onDiagramMouseMove($event);\n            wireDrawHandler.onDiagramMouseMove($event);\n\n        };\n\n        $scope.getCssClass = function () {\n\n            var result = '';\n\n            if (componentDragHandler.dragging) {\n                result += 'dragging';\n            }\n\n            return result;\n\n        };\n\n        $scope.onDiagramMouseLeave = function ($event) {\n\n            componentDragHandler.onDiagramMouseLeave($event);\n            wireDragHandler.onDiagramMouseLeave($event);\n            wireDrawHandler.onDiagramMouseLeave($event);\n\n        };\n\n        $$window.blur(function ($event) {\n\n            componentDragHandler.onWindowBlur($event);\n            wireDragHandler.onWindowBlur($event);\n            wireDrawHandler.onWindowBlur($event);\n\n        });\n\n\n        // Interactions with components\n\n        this.onComponentMouseUp = function (component, $event) {\n\n            if (!componentDragHandler.dragging &&\n                !wireDrawHandler.wiring &&\n                !wireDragHandler.dragging &&\n                $event.which !== 3 ) {\n\n                componentSelectionHandler.onComponentMouseUp(component, $event);\n                $event.stopPropagation();\n\n                componentDragHandler.onComponentMouseUp(component, $event);\n\n            } else {\n                componentDragHandler.onComponentMouseUp(component, $event);\n            }\n        };\n\n        this.onPortMouseDown = function (component, port, $event) {\n\n            if ( !wireDrawHandler.wiring && $event.which === 3 ) {\n\n                contextMenuHandler.onPortContextmenu(component, port, $event);\n\n            } else {\n                wireDrawHandler.onPortMouseDown(component, port, $event);\n            }\n\n        };\n\n        this.onPortMouseUp = function (component, port, $event) {\n\n            $event.stopPropagation();\n\n        };\n\n        this.onPortClick = function (component, port, $event) {\n\n            $event.stopPropagation();\n\n        };\n\n        this.onComponentMouseDown = function (component, $event) {\n\n            if ($event.which === 3) {\n\n                contextMenuHandler.onComponentContextmenu(component, $event);\n\n            } else {\n\n                componentDragHandler.onComponentMouseDown(component, $event);\n\n            }\n        };\n\n        this.onWireMouseUp = function (wire, segment, $event) {\n\n            wireDragHandler.onWireMouseUp(wire, segment, $event);\n            $event.stopPropagation();\n\n        };\n\n        this.onWireMouseDown = function (wire, segment, $event) {\n\n            if ($event.which === 3) {\n\n                contextMenuHandler.onWireContextmenu(wire, segment, $event);\n\n\n            } else {\n\n                wireDragHandler.onWireMouseDown(wire, segment, $event);\n\n            }\n        };\n\n        this.onWireCornerMouseUp = function (wire, segment, $event) {\n\n            wireDragHandler.onWireMouseUp(wire, segment, $event);\n            $event.stopPropagation();\n\n        };\n\n        this.onWireCornerMouseDown = function (wire, segment, $event) {\n\n            if ($event.which === 3) {\n\n                contextMenuHandler.onWireContextmenu(wire, segment, $event, true);\n\n\n            } else {\n\n                wireDragHandler.onWireMouseDown(wire, segment, $event, true);\n\n            }\n        };\n\n        this.isEditable = function () {\n\n            $scope.diagram.config = $scope.diagram.config || {};\n\n            return $scope.diagram.config.editable === true;\n        };\n\n        this.disallowSelection = function () {\n\n            $scope.diagram.config = $scope.diagram.config || {};\n\n            return $scope.diagram.config.disallowSelection === true;\n        };\n\n        this.registerComponentElement = function (id, el) {\n\n            componentElements = componentElements || {};\n\n            componentElements[id] = el;\n\n        };\n\n        this.unregisterComponentElement = function (id) {\n\n            componentElements = componentElements || {};\n\n            delete componentElements[id];\n\n        };\n\n        operationsManager.registerOperation({\n            id: 'rotateComponents',\n            operationClass: function() {\n\n                this.init = function(component) {\n\n                    this.component = component;\n                };\n\n                this.set = function(angle) {\n                    this.angle = angle;\n                };\n\n                this.commit = function() {\n\n                    var componentsToRotate,\n                        component,\n                        angle,\n                        affectedWires,\n                        message;\n\n                    componentsToRotate = [];\n\n                    component = this.component;\n                    angle = this.angle;\n\n                    componentsToRotate.push( this.component );\n\n                    if ( $scope.diagram.state.selectedComponentIds.indexOf( this.component.id ) > -1 ) {\n\n                        angular.forEach( $scope.diagram.state.selectedComponentIds, function ( selectedComponentId ) {\n\n                            var selectedComponent;\n\n                            if ( component.id !== selectedComponentId ) {\n\n                                selectedComponent = $scope.diagram.componentsById   [ selectedComponentId ];\n\n                                componentsToRotate.push( selectedComponent );\n\n                            }\n\n                        } );\n                    }\n\n                    affectedWires = $scope.diagram.getWiresForComponents(\n                        componentsToRotate\n                    );\n\n                    angular.forEach(componentsToRotate, function(component) {\n                        component.rotate(angle);\n                    });\n\n\n                    angular.forEach( affectedWires, function ( wire ) {\n                        wiringService.adjustWireEndSegments( wire );\n                    } );\n\n                    if (componentsToRotate.length > 1) {\n                        message = 'Rotating selection by ' + angle + 'deg';\n                    } else {\n                        message = 'Rotating ' + component.label + ' by ' + angle + 'deg';\n                    }\n\n                    $scope.$emit('componentsRotationChange', {\n                        diagramId: $scope.diagram.id,\n                        components: componentsToRotate,\n                        message: message\n                    });\n\n                    //$scope.$emit('wiresChange', {\n                    //    diagramId: $scope.diagram.id,\n                    //    wires: affectedWires\n                    //});\n\n                };\n            }\n\n        });\n\n        $rootScope.snapToGrid = true;\n\n    })\n    .directive('svgDiagram', [\n        '$rootScope',\n        '$log',\n        'diagramService',\n        'gridService',\n        '$timeout',\n        function ($rootScope, $log, diagramService, gridService, $timeout) {\n\n            return {\n                controller: 'SVGDiagramController',\n                require: '^diagramContainer',\n                restrict: 'E',\n                scope: false,\n                replace: true,\n                templateUrl: '/mmsApp/templates/svgDiagram.html',\n                link: function (scope, element, attributes, diagramContainerController) {\n\n                    var id,\n                        $element,\n                        killContextMenu;\n\n                    $element = $(element);\n\n                    killContextMenu = function($event) {\n\n                        $log.debug('killing default contextmenu');\n\n                        $event.stopPropagation();\n\n                        return false;\n\n                    };\n\n                    //scope.$watch(function(){\n                    //    return $element.attr('class');\n                    //}, function(cssClass){\n                    //   console.log(cssClass);\n                    //});\n\n                    scope.$watch('diagram', function(newDiagramValue) {\n\n                        if (newDiagramValue) {\n\n                            scope.diagram = scope.diagram || {};\n                            scope.$element = $element;\n\n                            $element.outerWidth(scope.diagram.config.width);\n                            $element.outerHeight(scope.diagram.config.width);\n\n                            scope.id = id = newDiagramValue.id;\n\n                            diagramContainerController.setInitialized(false);\n                            $rootScope.initializing = true;\n\n                            $rootScope.$on('GridInitialized', function (event, data) {\n\n                                if (data === id) {\n                                    diagramContainerController.setInitialized(true);\n                                }\n\n                                $rootScope.initializing = false;\n\n                            });\n\n                            scope.visibleObjects = gridService.createGrid(id,\n                                scope.diagram\n                            );\n\n\n                            scope.$watch(\n                                function () {\n                                    return diagramContainerController.getVisibleArea();\n                                }, function (visibleArea) {\n                                    scope.elementOffset = scope.$element.offset();\n                                    gridService.setVisibleArea(id, visibleArea);\n                                });\n\n\n                            scope.$emit('DiagramInitialized');\n                        }\n\n                    });\n\n                    //scope.$watch('visibleObjects.components', function(val) {\n                    //    console.log('visible objects', val);\n                    //});\n\n                    $element.bind('contextmenu', killContextMenu);\n\n                    $element.keyup(function(e){\n                        $timeout(function() {\n                            scope.$emit('keyupOnDiagram', e);\n                        });\n\n                    });\n\n                }\n\n            };\n        }\n    ]);\n","/*globals angular*/\n\n'use strict';\n\nangular.module(\n    'mms.designVisualization.symbols.box', []\n)\n    .controller( 'BoxController', function ( $scope ) {\n\n        $scope.portWires = [];\n\n        angular.forEach( $scope.component.symbol.ports, function ( port ) {\n\n            var toX = 0,\n                toY = 0,\n                portWireLength,\n                width, height;\n\n            portWireLength = $scope.component.symbol.portWireLength;\n            width = $scope.component.symbol.width;\n            height = $scope.component.symbol.height;\n\n            if ( port.x === 0 ) {\n                toX = portWireLength;\n                toY = port.y;\n            }\n\n            if ( port.y === 0 ) {\n                toY = portWireLength;\n                toX = port.x;\n            }\n\n            if ( port.x === width ) {\n                toX = width - portWireLength;\n                toY = port.y;\n            }\n\n            if ( port.y === height ) {\n                toY = height - portWireLength;\n                toX = port.x;\n            }\n\n            $scope.portWires.push( {\n                x1: port.x,\n                y1: port.y,\n                x2: toX,\n                y2: toY\n            } );\n        } );\n\n    } )\n    .directive(\n        'box',\n\n        function () {\n\n            return {\n                scope: false,\n                restrict: 'E',\n                replace: true,\n                controller: 'BoxController',\n                templateUrl: '/mmsApp/templates/box.html',\n                templateNamespace: 'SVG'\n            };\n        } );","/*globals angular*/\n\n'use strict';\n\nangular.module(\n        'mms.designVisualization.symbols.capacitor', []\n    )\n    .config([ 'symbolManagerProvider',\n        function (symbolManagerProvider) {\n            symbolManagerProvider.registerSymbol({\n                type: 'capacitor',\n                directive: null,\n                svgDecoration: 'images/symbols.svg#icon-capacitor',\n                labelPrefix: 'C',\n                labelPosition: {\n                    x: 10,\n                    y: -8\n                },\n                width: 60,\n                height: 15,\n                ports: {\n                    C: {\n                        id: 'C',\n                        wireAngle: 180,\n                        wireLeadIn: 20,\n                        label: 'C',\n                        x: 0,\n                        y: 7.5\n                    }, A: {\n                        id: 'A',\n                        wireAngle: 0,\n                        wireLeadIn: 20,\n                        label: 'A',\n                        x: 60,\n                        y: 7.5\n                    } }\n            });\n        }\n    ]);","/*globals angular, $*/\n\n'use strict';\n\nrequire( '../../services/symbolServices/symbolServices.js' );\nrequire( '../port/port.js' );\n\nrequire( './resistor/resistor.js' );\nrequire( './jFetP/jFetP.js' );\nrequire( './opAmp/opAmp.js' );\nrequire( './diode/diode.js' );\nrequire( './tvsDiode/tvsDiode.js' );\nrequire( './capacitor/capacitor.js' );\nrequire( './inductor/inductor.js' );\nrequire( './simpleConnector/simpleConnector.js' );\n\nrequire( './box/box.js' );\n\nvar symbolsModule = angular.module(\n    'mms.designVisualization.symbols', [\n        'mms.designVisualization.symbolServices',\n\n        'mms.designVisualization.port',\n\n        'mms.designVisualization.symbols.resistor',\n        'mms.designVisualization.symbols.jFetP',\n        'mms.designVisualization.symbols.opAmp',\n        'mms.designVisualization.symbols.diode',\n        'mms.designVisualization.symbols.tvsDiode',\n        'mms.designVisualization.symbols.capacitor',\n        'mms.designVisualization.symbols.inductor',\n        'mms.designVisualization.symbols.simpleConnector',\n\n        'mms.designVisualization.symbols.box'\n\n    ] );\n\nsymbolsModule.controller(\n    'SymbolController', function ( $scope ) {\n\n        $scope.getSymbolTransform = function () {\n\n            var transformString;\n\n            //    transformString = 'translate(' + $scope.component.x + ',' + $scope.component.y + ') ';\n            //    transformString +=\n            //      'rotate(' + $scope.component.rotation + ' ' + $scope.component.symbol.width/2 + ' ' + $scope.component.symbol.height/2  + ') ';\n            //    //transformString += 'scale(' + $scope.component.scaleX + ',' + $scope.component.scaleY + ') ';\n            //\n            //    console.log($scope.component.getTransformationMatrix().join(', '));\n\n            transformString = 'matrix(' + $scope.component.getSVGTransformationString() + ')';\n\n            return transformString;\n        };\n\n    } );\n\nsymbolsModule.directive(\n    'componentSymbol',\n\n    function ( $compile ) {\n\n        return {\n            scope: {\n                component: '=',\n                test: '=',\n                page: '=',\n                instance: '='\n            },\n            restrict: 'E',\n            replace: true,\n            controller: 'SymbolController',\n            templateUrl: '/mmsApp/templates/componentSymbol.html',\n            templateNamespace: 'SVG',\n            require: [ '^svgDiagram', '^diagramContainer' ],\n            link: function ( scope, element, attributes, controllers ) {\n\n                var templateStr,\n                    template,\n\n                    diagramContainerController,\n                    svgDiagramController,\n\n                    $el,\n                    $labelElement,\n                    compiledSymbol,\n                    symbolDirective;\n\n                svgDiagramController = controllers[ 0 ];\n                diagramContainerController = controllers[ 1 ];\n\n                scope.portsVisible = function () {\n                    return true;\n                };\n\n                scope.detailsVisible = function () {\n                    return diagramContainerController.getZoomLevel() > 1;\n                };\n\n                scope.getCssClass = function () {\n\n                    var result;\n\n                    result = scope.component.symbol.cssClass ? scope.component.symbol.cssClass : scope.component.symbol.type;\n\n                    if ( diagramContainerController.isComponentSelected( scope.component ) ) {\n                        result += ' selected';\n                    }\n\n                    return result;\n\n                };\n\n                // Interactions\n\n                scope.onMouseUp = function ( $event ) {\n                    svgDiagramController.onComponentMouseUp( scope.component, $event );\n                };\n\n                scope.onMouseDown = function ( $event ) {\n                    svgDiagramController.onComponentMouseDown( scope.component, $event );\n                    $event.stopPropagation();\n                };\n\n                symbolDirective = scope.component.symbol.symbolDirective || 'generic-svg';\n\n                compiledSymbol = diagramContainerController.getCompiledDirective( symbolDirective );\n\n                if ( !angular.isFunction( compiledSymbol ) ) {\n\n                    templateStr = '<' + symbolDirective + '>' +\n                        '</' + symbolDirective + '>';\n\n                    template = angular.element( templateStr );\n\n                    compiledSymbol = $compile( template );\n\n                    diagramContainerController.setCompiledDirective( symbolDirective, compiledSymbol );\n\n                }\n\n                $el = $( element );\n\n                compiledSymbol( scope, function ( clonedElement ) {\n                    $el.find( '.symbol-placeholder' )\n                        .replaceWith( clonedElement );\n                } );\n\n                svgDiagramController.registerComponentElement( scope.component.id, $el );\n\n                scope.$on( '$destroy', function () {\n                    svgDiagramController.unregisterComponentElement( scope.component.id );\n                } );\n\n                // Label ellipsis\n\n                function perfectEllipsis(textSelector, textString, maxWidth) {\n                    var textObject = textSelector[0];\n\n                    if (!textString) {\n                        textObject.textContent = '';\n                        return;\n                    }\n\n                    textObject.textContent = textString;\n                    maxWidth = maxWidth || 120;\n                    var strLength = textString.length;\n                    var width = textObject.getSubStringLength(0, strLength);\n\n                    // ellipsis is needed\n                    if (width >= maxWidth) {\n                        textObject.textContent = '...' + textString;\n                        strLength += 3;\n\n                        // guess truncate position\n                        var i = Math.floor(strLength * maxWidth / width) + 1;\n\n                        // refine by expansion if necessary\n                        while (++i < strLength && textObject.getSubStringLength(0, i) < maxWidth){}\n\n                        // refine by reduction if necessary\n                        while (--i > 3 && textObject.getSubStringLength(0, i) > maxWidth){}\n\n                        textObject.textContent = textString.substring(0, i-3) + '...';\n                    }\n                }\n\n                $labelElement = element.find('.component-label');\n\n                if (scope.component.symbol.limitLabelWidthTo && !isNaN(scope.component.symbol.limitLabelWidthTo)) {\n\n                    scope.$watch('component.label', function(labelText) {\n\n                        if (labelText) {\n                            perfectEllipsis($labelElement, labelText, scope.component.symbol.limitLabelWidthTo);\n                        }\n\n                    });\n                }\n            }\n        };\n    }\n);\n\nsymbolsModule.directive(\n    'genericSvg',\n\n    function () {\n\n        return {\n            scope: false,\n            restrict: 'E',\n            replace: true,\n            templateUrl: '/mmsApp/templates/genericSvg.html',\n            templateNamespace: 'SVG'\n        };\n    }\n);\n","/*globals angular*/\n\n'use strict';\n\nangular.module(\n        'mms.designVisualization.symbols.diode', []\n    )\n    .config([ 'symbolManagerProvider',\n        function (symbolManagerProvider) {\n            symbolManagerProvider.registerSymbol({\n                type: 'diode',\n                directive: null,\n                svgDecoration: 'images/symbols.svg#icon-diode',\n                labelPrefix: 'D',\n                labelPosition: {\n                    x: 10,\n                    y: -8\n                },\n                width: 60,\n                height: 15,\n                ports: {\n                    C: {\n                        id: 'C',\n                        wireAngle: 180,\n                        wireLeadIn: 20,\n                        label: 'C',\n                        x: 0,\n                        y: 7.5\n                    }, A: {\n                        id: 'A',\n                        wireAngle: 0,\n                        wireLeadIn: 20,\n                        label: 'A',\n                        x: 60,\n                        y: 7.5\n                    } }\n            });\n        }\n    ]);\n","/*globals angular*/\n\n'use strict';\n\nangular.module(\n        'mms.designVisualization.symbols.inductor', []\n    )\n    .config([ 'symbolManagerProvider',\n        function (symbolManagerProvider) {\n            symbolManagerProvider.registerSymbol({\n                type: 'inductor',\n                directive: null,\n                svgDecoration: 'images/symbols.svg#icon-inductor',\n                labelPrefix: 'L',\n                labelPosition: {\n                    x: 10,\n                    y: -8\n                },\n                width: 50,\n                height: 10,\n                ports: {\n                    p1: {\n                        id: 'p1',\n                        wireAngle: 180,\n                        wireLeadIn: 20,\n                        label: 'p1',\n                        x: 0,\n                        y: 6.5\n                    }, p2: {\n                        id: 'p2',\n                        wireAngle: 0,\n                        wireLeadIn: 20,\n                        label: 'p2',\n                        x: 50,\n                        y: 6.5\n                    } }\n            });\n        }\n    ]);","/*globals angular*/\n\n'use strict';\n\nangular.module(\n        'mms.designVisualization.symbols.jFetP', []\n    )\n    .config([ 'symbolManagerProvider',\n        function (symbolManagerProvider) {\n            symbolManagerProvider.registerSymbol({\n                type: 'jFetP',\n                directive: null,\n                svgDecoration: 'images/symbols.svg#icon-jFetP',\n                labelPrefix: 'Q',\n                labelPosition: {\n                    x: 60,\n                    y: 12\n                },\n                width: 62,\n                height: 70,\n                ports: {\n                    s: {\n                        id: 's',\n                        wireAngle: 270,\n                        wireLeadIn: 20,\n                        label: 'S',\n                        x: 47,\n                        y: 0\n                    }, d: {\n                        id: 'd',\n                        wireAngle: 90,\n                        wireLeadIn: 20,\n                        label: 'D',\n                        x: 47,\n                        y: 70\n                    }, g: {\n                        id: 'g',\n                        wireAngle: 180,\n                        wireLeadIn: 20,\n                        label: 'G',\n                        x: 0,\n                        y: 26\n                    } }\n            });\n        }\n    ]);","/*globals angular*/\n\n'use strict';\n\nangular.module(\n        'mms.designVisualization.symbols.opAmp', []\n    )\n    .config([ 'symbolManagerProvider',\n        function (symbolManagerProvider) {\n            symbolManagerProvider.registerSymbol({\n                type: 'opAmp',\n                directive: null,\n                svgDecoration: 'images/symbols.svg#icon-opAmp',\n                labelPrefix: 'A',\n                labelPosition: {\n                    x: 90,\n                    y: 15\n                },\n                width: 140,\n                height: 100,\n                ports: {\n                    'Vs+': {\n                        id: 'Vs+',\n                        wireAngle: 270,\n                        wireLeadIn: 20,\n                        label: 'Vs+',\n                        x: 65,\n                        y: 0\n                    }, 'Vout': {\n                        id: 'Vout',\n                        wireAngle: 0,\n                        wireLeadIn: 20,\n                        label: 'Vout',\n                        x: 140,\n                        y: 50\n                    }, 'Vs-': {\n                        id: 'Vs-',\n                        wireAngle: 90,\n                        wireLeadIn: 20,\n                        label: 'Vs-',\n                        x: 65,\n                        y: 100\n                    }, 'V-': {\n                        id: 'V-',\n                        wireAngle: 180,\n                        wireLeadIn: 20,\n                        label: 'V-',\n                        x: 0,\n                        y: 75\n                    }, 'V+': {\n                        id: 'V+',\n                        wireAngle: 180,\n                        wireLeadIn: 20,\n                        label: 'V+',\n                        x: 0,\n                        y: 25\n                    } }\n            });\n        }\n    ]);","/*globals angular*/\n\n'use strict';\n\nangular.module(\n        'mms.designVisualization.symbols.resistor', []\n    )\n    .config([ 'symbolManagerProvider',\n        function (symbolManagerProvider) {\n            symbolManagerProvider.registerSymbol({\n                type: 'resistor',\n                symbolDirective: null,\n                svgDecoration: 'images/symbols.svg#icon-resistor',\n                labelPrefix: 'R',\n                labelPosition: {\n                    x: 10,\n                    y: -8\n                },\n                width: 60,\n                height: 10,\n                ports: {\n                    p1: {\n                        id: 'p1',\n                        wireAngle: 180,\n                        wireLeadIn: 20,\n                        label: 'p1',\n                        x: 0,\n                        y: 5\n                    }, p2: {\n                        id: 'p2',\n                        wireAngle: 0,\n                        wireLeadIn: 20,\n                        label: 'p2',\n                        x: 60,\n                        y: 5\n                    } }\n            });\n        }\n    ]);","/*globals angular*/\n\n'use strict';\n\nangular.module(\n        'mms.designVisualization.symbols.simpleConnector', []\n    ).config([ 'symbolManagerProvider',\n        function (symbolManagerProvider) {\n            symbolManagerProvider.registerSymbol({\n                type: 'simpleConnector',\n                symbolDirective: 'simple-connector',\n                labelPrefix: '',\n                labelPosition: {\n                    x: 3,\n                    y: 11\n                },\n                width: 120,\n                height: 15,\n                ports: {\n                    p1: {\n                        id: 'p1',\n                        wireAngle: 0,\n                        wireLeadIn: 0,\n                        label: '',\n                        x: 117,\n                        y: 7\n                    } }\n            });\n        }\n    ])\n    .controller('SimpleConnectorController', function () {\n    })\n    .directive(\n    'simpleConnector',\n\n    function () {\n\n        return {\n            scope: false,\n            restrict: 'E',\n            replace: true,\n            controller: 'SimpleConnectorController',\n            templateUrl: '/mmsApp/templates/simpleConnector.html',\n            templateNamespace: 'SVG'\n        };\n    });\n","/*globals angular*/\n\n'use strict';\n\nangular.module(\n        'mms.designVisualization.symbols.tvsDiode', []\n    )\n    .config([ 'symbolManagerProvider',\n        function (symbolManagerProvider) {\n            symbolManagerProvider.registerSymbol({\n                type: 'tvsDiode',\n                directive: null,\n                svgDecoration: 'images/symbols.svg#icon-tvsDiode',\n                labelPrefix: 'D',\n                labelPosition: {\n                    x: 10,\n                    y: -8\n                },\n                width: 75,\n                height: 15,\n                ports: {\n                    C: {\n                        id: 'C',\n                        wireAngle: 180,\n                        wireLeadIn: 20,\n                        label: 'C',\n                        x: 0,\n                        y: 7.5\n                    }, A: {\n                        id: 'A',\n                        wireAngle: 0,\n                        wireLeadIn: 20,\n                        label: 'A',\n                        x: 75,\n                        y: 7.5\n                    } }\n            });\n        }\n    ]);\n","/*globals angular, ga*/\n\n'use strict';\n\n// Move this to GME eventually\n\nangular.module('mms.testbenchActions', [\n    'ngMaterial'\n])\n    .controller('TestbenchActionsController', function ($scope, $rootScope, $mdDialog, $mdToast, $timeout, testBenchService, $log) {\n\n        var progressMessage,\n            tooltipMessage,\n            progressTooltipMessage,\n\n            findResultById;\n\n        tooltipMessage = 'Generate PCB';\n        progressTooltipMessage = 'PCB generation in progress...';\n        progressMessage = 'PCB generation in progress. It will take a couple of minutes...';\n\n        findResultById = function (id) {\n\n            var result;\n\n            angular.forEach($scope.testbenchResults, function (aResult) {\n\n                if (aResult.id === id) {\n                    result = aResult;\n                }\n\n            });\n\n            return result;\n\n        };\n\n        $scope.testbenchResults = [\n            //\n            //{\n            //\n            //    id: 'testPCBResult1',\n            //    name: 'Generated PCB 1',\n            //    timestamp: Date.now(),\n            //    visualUrl: 'images/testPCBResult.png',\n            //    attachments: [\n            //        {\n            //            name: 'Download Eagle file',\n            //            url: 'http://google.com'\n            //        }\n            //    ],\n            //    status: 'SUCCESS'\n            //\n            //\n            //},\n            //\n            //{\n            //\n            //    id: 'testPCBResult2',\n            //    name: 'Generated PCB 2',\n            //    timestamp: Date.now(),\n            //    visualUrl: 'images/testPCBResult.png',\n            //    attachments: [\n            //        {\n            //            name: 'Download Eagle file',\n            //            url: 'http://google.com'\n            //        }\n            //    ],\n            //    status: 'FAILURE'\n            //\n            //},\n            //\n            //{\n            //\n            //    id: 'testPCBResult3',\n            //    name: 'Generated PCB 3',\n            //    timestamp: Date.now(),\n            //    visualUrl: 'images/testPCBResult.png',\n            //    attachments: [\n            //        {\n            //            name: 'Download Eagle file',\n            //            url: 'http://google.com'\n            //        }\n            //    ],\n            //    status: 'FAILURE'\n            //\n            //}\n            //\n\n        ];\n\n        $scope.setBusy = function () {\n\n            $rootScope.runningTestbench = $scope.busy = true;\n            $scope.tooltipMessage = progressTooltipMessage;\n\n        };\n\n        $scope.setReady = function () {\n\n            $rootScope.runningTestbench = $scope.busy = false;\n            $scope.tooltipMessage = tooltipMessage;\n\n        };\n\n        $scope.showResults = function (id, ev) {\n\n            var result;\n\n            ga('send', 'event', 'testbench', 'result', id);\n\n            function ShowResultsDialogController($scope, $mdDialog, results, currentResult) {\n\n                $scope.results = results;\n                $scope.state = {\n                    currentResult: currentResult\n                };\n\n                $scope.selectedIndex = results.indexOf(currentResult);\n\n                $scope.setSelected = function (index) {\n\n                    $scope.selectedIndex = index;\n\n                    $timeout(function () {\n                        $scope.state.curretResult = results[index];\n                        console.log(results[index]);\n                    });\n\n                };\n\n                $scope.hide = function () {\n                    $mdDialog.hide();\n                };\n                $scope.close = function () {\n                    $mdDialog.hide();\n                };\n            }\n\n            if (id !== undefined) {\n                result = findResultById(id);\n            } else {\n                result = $scope.testbenchResults[0];\n            }\n\n            if (angular.isObject(result)) {\n\n\n                $mdDialog.show({\n                    controller: ShowResultsDialogController,\n                    templateUrl: '/mmsApp/templates/testbenchResult.html',\n                    locals: {\n                        results: $scope.testbenchResults,\n                        currentResult: result\n                    },\n                    targetEvent: ev\n                })\n                    .then(function () {\n                    });\n            }\n\n        };\n\n        $rootScope.startTestbench = $scope.startTestbench = function () {\n\n            var onTestbenchFailed;\n\n            onTestbenchFailed = function(e) {\n                $log.error('Testbench execution failed!', e);\n                $scope.testbenchResultNotify();\n                $scope.setReady();\n            };\n\n            $scope.setBusy();\n\n            $mdToast.show({\n                    controller: 'TestbenchActionsToastController',\n                    templateUrl: '/mmsApp/templates/testbenchToast.html',\n                    locals: {\n                        message: progressMessage\n                    },\n                    hideDelay: 5000\n                }\n            );\n\n            ga('send', 'event', 'testbench', 'start');\n\n            testBenchService.runTestBench($rootScope.wsContext, $rootScope.activeTestbench.id)\n                .then(function (resultData) {\n\n                    var newResult,\n                        visualUrl,\n                        downloadUrl,\n                        timestamp,\n                        hash,\n                        id;\n\n                    if (resultData && resultData.success === true) {\n\n                        $log.debug('testbench result', resultData);\n\n                        hash = resultData.artifacts['all.zip'].hash;\n\n                        visualUrl = '/rest/blob/view/' + hash + '/results/1x2_ara_module.png';\n                        downloadUrl = '/rest/blob/download/' + hash + '/results/1x2_ara_module.brd';\n\n                        timestamp = Date.now();\n                        id = hash + '_' + timestamp;\n\n                        newResult = {\n                            id: id,\n                            name: 'Generated PCB ' + ( $scope.testbenchResults.length + 1 ),\n                            timestamp: timestamp,\n                            visualUrl: visualUrl,\n                            attachments: [\n                                {\n                                    name: 'Download Eagle File',\n                                    url: downloadUrl\n                                }\n                            ],\n                            status: 'SUCCESS'\n                        };\n\n                        $scope.testbenchResults.push(newResult);\n\n                        $scope.testbenchResultNotify(id);\n                        $scope.setReady();\n\n                        ga('send', 'event', 'testbench', 'received');\n\n\n                    } else {\n                        onTestbenchFailed(resultData);\n\n                        ga('send', 'event', 'testbench', 'failed');\n                    }\n\n                }).\n                catch(function (e) {\n                    onTestbenchFailed(e);\n                });\n\n        };\n\n        $scope.testbenchResultNotify = function (id) {\n\n            var result,\n\n                message,\n                delay;\n\n            result = findResultById(id);\n\n\n            if (angular.isObject(result) && result.status === 'SUCCESS') {\n\n                message = 'Generated PCB available.';\n                delay = 0;\n\n\n            } else {\n\n                message = 'PCB generation errored.';\n                delay = 0;\n\n            }\n\n            $mdToast.show({\n                    controller: 'TestbenchResultToastController',\n                    templateUrl: '/mmsApp/templates/testbenchResultToast.html',\n                    locals: {\n                        result: result,\n                        message: message,\n                        showAction: function (id, $event) {\n                            $scope.showResults(id, $event);\n\n                        }\n                    },\n                    hideDelay: delay\n                }\n            );\n\n        };\n\n        $scope.setReady();\n//        $scope.showResults('testPCBResult1');\n//        $scope.testbenchResultNotify('testPCBResult4');\n\n\n    })\n    .directive('testbenchActions', [\n        function () {\n\n            return {\n                controller: 'TestbenchActionsController',\n                restrict: 'E',\n                scope: true,\n                replace: true,\n                transclude: true,\n                templateUrl: '/mmsApp/templates/testbenchActions.html'\n            };\n        }])\n\n    .controller('TestbenchResultToastController',\n    function ($scope, $mdToast, message, result, showAction) {\n\n        $scope.result = result;\n\n        $scope.success = false;\n        $scope.success = result && result.status === 'SUCCESS';\n\n        $scope.progressMessage = message || 'Job execution has started...';\n\n\n        $scope.closeToast = function () {\n            $mdToast.hide();\n        };\n\n        $scope.showResult = function ($event) {\n\n            $scope.closeToast();\n            showAction(result.id, $event);\n\n        };\n\n\n    })\n    .controller('TestbenchActionsToastController',\n    function ($scope, $mdToast, message) {\n\n\n        $scope.progressMessage = message || 'Job execution has started...';\n\n\n        $scope.closeToast = function () {\n            $mdToast.hide();\n        };\n\n\n    });\n\n","","/*globals angular */\n\n'use strict';\n\nangular.module('mms.connectionHandling', [])\n    .service('connectionHandling', function ($q, dataStoreService) {\n\n        var mainConnectionId,\n            mainConnectionEstablished,\n\n            dataStorePromise;\n\n        mainConnectionId = 'main-db-connection-id';\n        mainConnectionEstablished = false;\n\n        this.establishMainGMEConnection = function() {\n\n            var deferred;\n\n            deferred = $q.defer();\n\n            if (!dataStorePromise && !mainConnectionEstablished) {\n\n                dataStorePromise = dataStoreService.connectToDatabase(mainConnectionId, {\n                    host: window.location.basename\n                }).then(function () {\n\n                    mainConnectionEstablished = true;\n\n                    deferred.resolve();\n\n                });\n\n            } else {\n                deferred.resolve();\n            }\n\n            return deferred.promise;\n\n        };\n\n        this.getMainGMEConnectionId = function(){\n            return mainConnectionId;\n        };\n\n    });\n","/*globals angular*/\n\n'use strict';\n\nvar glMatrix = require('glMatrix');\n\nvar ComponentPort = function (descriptor) {\n\n    angular.extend(this, descriptor);\n\n};\n\nComponentPort.prototype.getGridPosition = function () {\n\n    var position,\n        positionVector,\n\n        wireAngle,\n        leadInTransformation,\n        leadInVector;\n\n    if (angular.isObject(this.portSymbol) && angular.isObject(this.parentComponent)) {\n\n        positionVector = glMatrix.vec2.create();\n        glMatrix.vec2.set(positionVector, this.portSymbol.x, this.portSymbol.y);\n\n        glMatrix.vec2.transformMat3(positionVector, positionVector, this.parentComponent.getTransformationMatrix());\n\n        position = {\n\n            x: positionVector[0],\n            y: positionVector[1]\n\n        };\n\n        if (this.portSymbol.wireLeadIn) {\n\n            leadInVector = glMatrix.vec2.create();\n            glMatrix.vec2.set(leadInVector, this.portSymbol.wireLeadIn, 0);\n\n            leadInTransformation = glMatrix.mat2.create();\n\n            if (isNaN(this.portSymbol.wireAngleRad)) {\n\n                this.portSymbol.wireAngle = this.portSymbol.wireAngle || 0;\n                this.portSymbol.wireAngleRad = this.portSymbol.wireAngle / 180 * Math.PI;\n\n            }\n\n            wireAngle = this.portSymbol.wireAngleRad;\n\n\n            glMatrix.mat2.rotate(leadInTransformation, leadInTransformation, wireAngle);\n\n            glMatrix.vec2.transformMat2(leadInVector, leadInVector, leadInTransformation);\n\n            glMatrix.vec2.add(leadInVector, leadInVector, positionVector);\n\n            position.leadInPosition = {\n\n                x: leadInVector[0],\n                y: leadInVector[1]\n\n            };\n        }\n\n    }\n\n    return position;\n\n};\n\nmodule.exports = ComponentPort;\n","/*globals angular*/\n\n'use strict';\n\nmodule.exports = function (symbolManager, diagramService, wiringService) {\n\n    var getDiagram,\n        getDiagramElement,\n        avmComponentModelParser,\n        connectorParser,\n        containerParser,\n        labelParser,\n        wireParser,\n\n        Diagram,\n        DiagramComponent,\n        ComponentPort,\n        Wire,\n\n        minePortsFromInterfaces;\n\n\n\n    Diagram = require('./Diagram');\n    DiagramComponent = require('./DiagramComponent.js');\n    ComponentPort = require('./ComponentPort');\n    Wire = require('./Wire.js');\n\n    minePortsFromInterfaces = function (element) {\n\n        var minX,\n            maxX,\n            portDescriptors,\n            median,\n            allInterConnectors,\n            portInstances,\n            newPort;\n\n        portDescriptors = {};\n        portInstances = [];\n\n        allInterConnectors = [];\n\n        portDescriptors.top = [];\n        portDescriptors.right = [];\n        portDescriptors.bottom = [];\n        portDescriptors.left = [];\n\n        minX = null;\n        maxX = null;\n\n        if (angular.isObject(element.interfaces)) {\n\n            angular.forEach(element.interfaces.connectors, function (innerConnector) {\n\n                var x;\n\n                x = innerConnector.position.x;\n\n                if (minX === null) {\n                    minX = x;\n                }\n\n                if (maxX === null) {\n                    maxX = x;\n                }\n\n                if (x < minX) {\n                    minX = x;\n                }\n\n                if (x > maxX) {\n                    maxX = x;\n                }\n\n                allInterConnectors.push(innerConnector);\n\n            });\n\n            allInterConnectors.sort(function (a, b) {\n\n                if (a.position.y > b.position.y) {\n                    return 1;\n                }\n\n                if (a.position.y < b.position.y) {\n                    return -1;\n                }\n\n                return 0;\n\n            });\n\n            median = (minX + maxX) / 2;\n\n            angular.forEach(allInterConnectors, function (innerConnector) {\n\n                var portSymbol;\n\n                portSymbol = {\n                    id: innerConnector.id,\n                    label: labelParser(innerConnector.name)\n                };\n\n                if (innerConnector.position.x < median) {\n\n                    portDescriptors.left.push(portSymbol);\n\n                } else {\n\n                    portDescriptors.right.push(portSymbol);\n\n                }\n\n                newPort = new ComponentPort({\n                    id: innerConnector.id,\n                    portSymbol: portSymbol\n                });\n\n                portInstances.push(newPort);\n\n            });\n        }\n\n        return {\n            portDescriptors: portDescriptors,\n            portInstances: portInstances\n        };\n\n\n    };\n\n\n    labelParser = function (crappyName) {\n\n        var result;\n\n        result = crappyName.replace(/_/g, ' ');\n\n        return result;\n\n    };\n\n    wireParser = function(element, diagram) {\n\n        var sourcePort,\n            destinationPort,\n            wire;\n\n        if (angular.isObject(element.details) && angular.isObject(diagram)) {\n\n            sourcePort = diagram.portsById[element.details.sourceId];\n            destinationPort = diagram.portsById[element.details.destinationId];\n\n            if (sourcePort && destinationPort) {\n\n                wire = new Wire({\n                    id: element.id,\n                    end1: {\n                        component: sourcePort.parentComponent,\n                        port: sourcePort\n                    },\n                    end2: {\n                        component: destinationPort.parentComponent,\n                        port: destinationPort\n                    }\n                });\n\n                if (angular.isArray(element.details.wireSegments) && element.details.wireSegments.length > 0) {\n\n                    wire.segments = angular.copy(element.details.wireSegments);\n                    wiringService.adjustWireEndSegments(wire);\n\n                } else {\n\n                    wiringService.routeWire(wire, 'ElbowRouter');\n\n                }\n\n            }\n        }\n\n        return wire;\n\n    };\n\n    connectorParser = function(element,  zIndex) {\n        var portInstance,\n            symbol,\n            newDiagramComponent;\n\n        symbol = symbolManager.getSymbol('simpleConnector');\n\n        newDiagramComponent = new DiagramComponent({\n            id: element.id,\n            label: labelParser(element.name),\n            x: element.position.x,\n            y: element.position.y,\n            z: zIndex,\n            rotation: 0,\n            scaleX: 1,\n            scaleY: 1,\n            symbol: symbol,\n            nonSelectable: false,\n            locationLocked: false,\n            draggable: true\n        });\n\n        portInstance = new ComponentPort({\n            id: element.id,\n            portSymbol: symbol.ports.p1\n        });\n\n        newDiagramComponent.registerPortInstances([portInstance]);\n\n        return newDiagramComponent;\n\n    };\n\n    containerParser = function(element,  zIndex) {\n        var symbol,\n            newDiagramComponent,\n            portStuff;\n\n        zIndex = zIndex || 0;\n\n        portStuff = minePortsFromInterfaces(element);\n\n        symbol = symbolManager.makeBoxSymbol(element.name, {\n                showPortLabels: true,\n                limitLabelWidthTo: 150\n            }, portStuff.portDescriptors,\n            {\n                minWidth: 200,\n                portWireLeadInIncrement: 8\n            });\n\n        newDiagramComponent = new DiagramComponent({\n            id: element.id,\n            label: labelParser(element.name),\n            x: element.position.x,\n            y: element.position.y,\n            z: zIndex,\n            rotation: 0,\n            scaleX: 1,\n            scaleY: 1,\n            symbol: symbol,\n            nonSelectable: false,\n            locationLocked: false,\n            draggable: true\n        });\n\n        newDiagramComponent.registerPortInstances(portStuff.portInstances);\n\n        return newDiagramComponent;\n\n    };\n\n    avmComponentModelParser = function(element,  zIndex) {\n\n        var portStuff,\n            newModelComponent,\n            symbol;\n\n        zIndex = zIndex || 0;\n\n        portStuff = minePortsFromInterfaces(element);\n\n        if (angular.isString(element.name) &&\n            element.name.charAt(0) === 'C' &&\n            ( !isNaN(element.name.charAt(1)) ||\n            element.name.charAt(1) === ' ' ||\n            element.name.charAt(1) === '_')\n        ) {\n\n            // Cheap shot to figure if it is a capacitor\n\n            symbol = symbolManager.getSymbol('capacitor');\n\n            newModelComponent = new DiagramComponent({\n                id: element.id,\n                label: labelParser(element.name),\n                x: element.position.x,\n                y: element.position.y,\n                z: zIndex,\n                rotation: 0,\n                scaleX: 1,\n                scaleY: 1,\n                symbol: symbol,\n                nonSelectable: false,\n                locationLocked: false,\n                draggable: true\n            });\n\n            for (zIndex = 0; zIndex < portStuff.portInstances.length; zIndex++) {\n\n                if (portStuff.portInstances[zIndex].portSymbol.label === 'P2') {\n                    portStuff.portInstances[zIndex].portSymbol = symbol.ports.C;\n                }\n\n                if (portStuff.portInstances[zIndex].portSymbol.label === 'P1') {\n                    portStuff.portInstances[zIndex].portSymbol = symbol.ports.A;\n                }\n\n            }\n\n            newModelComponent.registerPortInstances(portStuff.portInstances);\n\n        } else if (angular.isString(element.name) &&\n            element.name.charAt(0) === 'L' &&\n            ( !isNaN(element.name.charAt(1)) ||\n            element.name.charAt(1) === ' ' ||\n            element.name.charAt(1) === '_')\n        ) {\n\n            // Cheap shot to figure if it is a capacitor\n\n            symbol = symbolManager.getSymbol('inductor');\n\n            newModelComponent = new DiagramComponent({\n                id: element.id,\n                label: labelParser(element.name),\n                x: element.position.x,\n                y: element.position.y,\n                z: zIndex,\n                rotation: 0,\n                scaleX: 1,\n                scaleY: 1,\n                symbol: symbol,\n                nonSelectable: false,\n                locationLocked: false,\n                draggable: true\n            });\n\n            for (zIndex = 0; zIndex < portStuff.portInstances.length; zIndex++) {\n\n                if (portStuff.portInstances[zIndex].portSymbol.label === 'P2') {\n                    portStuff.portInstances[zIndex].portSymbol = symbol.ports.p1;\n                }\n\n                if (portStuff.portInstances[zIndex].portSymbol.label === 'P1') {\n                    portStuff.portInstances[zIndex].portSymbol = symbol.ports.p2;\n                }\n\n            }\n\n            newModelComponent.registerPortInstances(portStuff.portInstances);\n\n        } else if (angular.isString(element.name) &&\n            element.name.charAt(0) === 'R' &&\n            ( !isNaN(element.name.charAt(1)) ||\n            element.name.charAt(1) === ' ' ||\n            element.name.charAt(1) === '_')\n        ) {\n\n            // Cheap shot to figure if it is a capacitor\n\n            symbol = symbolManager.getSymbol('resistor');\n\n            newModelComponent = new DiagramComponent({\n                id: element.id,\n                label: labelParser(element.name),\n                x: element.position.x,\n                y: element.position.y,\n                z: zIndex,\n                rotation: 0,\n                scaleX: 1,\n                scaleY: 1,\n                symbol: symbol,\n                nonSelectable: false,\n                locationLocked: false,\n                draggable: true\n            });\n\n            for (zIndex = 0; zIndex < portStuff.portInstances.length; zIndex++) {\n\n                if (portStuff.portInstances[zIndex].portSymbol.label === 'P2') {\n                    portStuff.portInstances[zIndex].portSymbol = symbol.ports.p1;\n                }\n\n                if (portStuff.portInstances[zIndex].portSymbol.label === 'P1') {\n                    portStuff.portInstances[zIndex].portSymbol = symbol.ports.p2;\n                }\n\n            }\n\n            newModelComponent.registerPortInstances(portStuff.portInstances);\n\n        } else if (angular.isString(element.name) &&\n            element.name.charAt(0) === 'D' && !isNaN(element.name.charAt(1))\n        ) {\n\n            // Cheap shot to figure if it is a diode\n\n            symbol = symbolManager.getSymbol('tvsDiode');\n\n            newModelComponent = new DiagramComponent({\n                id: element.id,\n                label: labelParser(element.name),\n                x: element.position.x,\n                y: element.position.y,\n                z: zIndex,\n                rotation: 0,\n                scaleX: 1,\n                scaleY: 1,\n                symbol: symbol,\n                nonSelectable: false,\n                locationLocked: false,\n                draggable: true\n            });\n\n            for (zIndex = 0; zIndex < portStuff.portInstances.length; zIndex++) {\n\n                if (portStuff.portInstances[zIndex].portSymbol.label === '2') {\n                    portStuff.portInstances[zIndex].portSymbol = symbol.ports.C;\n                }\n\n                if (portStuff.portInstances[zIndex].portSymbol.label === '1') {\n                    portStuff.portInstances[zIndex].portSymbol = symbol.ports.A;\n                }\n\n            }\n\n            newModelComponent.registerPortInstances(portStuff.portInstances);\n\n        } else {\n\n            if (element.name !== 'pcb') {\n                symbol = symbolManager.makeBoxSymbol(element.name, {\n                        showPortLabels: true,\n                        limitLabelWidthTo: 150\n                    }, portStuff.portDescriptors,\n                    {\n                        minWidth: 200,\n                        portWireLeadInIncrement: 10\n                    });\n\n                newModelComponent = new DiagramComponent({\n                    id: element.id,\n                    label: labelParser(element.name),\n                    x: element.position.x,\n                    y: element.position.y,\n                    z: zIndex,\n                    rotation: 0,\n                    scaleX: 1,\n                    scaleY: 1,\n                    symbol: symbol,\n                    nonSelectable: false,\n                    locationLocked: false,\n                    draggable: true\n                });\n\n\n                newModelComponent.registerPortInstances(portStuff.portInstances);\n\n            }\n\n        }\n\n        return newModelComponent;\n\n    };\n\n\n    getDiagram = function (diagramElements) {\n\n        var i,\n            newDiagramComponent,\n\n\n\n            diagram,\n            wire;\n\n\n        diagram = new Diagram();\n\n        if (angular.isObject(diagramElements)) {\n\n            i = 0;\n\n            diagram.config.width = 2500;\n            diagram.config.height = 2500;\n\n            angular.forEach(diagramElements.Connector, function (element) {\n\n                newDiagramComponent = connectorParser(element,  i);\n\n                diagram.addComponent(newDiagramComponent);\n\n                i++;\n\n            });\n\n            angular.forEach(diagramElements.AVMComponentModel, function (element) {\n\n                newDiagramComponent = avmComponentModelParser(element,  i);\n\n                diagram.addComponent(newDiagramComponent);\n\n                i++;\n\n            });\n\n            angular.forEach(diagramElements.Container, function (element) {\n\n                newDiagramComponent = containerParser(element,  i);\n\n                diagram.addComponent(newDiagramComponent);\n\n                i++;\n\n            });\n\n\n            angular.forEach(diagramElements.ConnectorComposition, function (element) {\n\n                wire = wireParser(element, diagram);\n\n                diagram.addWire(wire);\n\n            });\n\n        }\n\n        return diagram;\n\n    };\n\n    getDiagramElement = function(descriptor, zIndex, diagram) {\n\n        var element;\n\n        if (descriptor.baseName === 'AVMComponentModel') {\n\n            element = avmComponentModelParser(descriptor, zIndex);\n\n        } else if (descriptor.baseName === 'Connector') {\n\n            element = avmComponentModelParser(descriptor, zIndex);\n\n        } else if (descriptor.baseName === 'Container') {\n\n            element = avmComponentModelParser(descriptor, zIndex);\n\n        } else if (descriptor.baseName === 'ConnectorComposition') {\n\n            element = wireParser(descriptor, diagram);\n\n        }\n\n        return element;\n\n\n    };\n\n\n    this.getDiagram = getDiagram;\n    this.getDiagramElement = getDiagramElement;\n};\n","/*globals angular*/\n\n'use strict';\n\nvar Diagram = function (descriptor) {\n\n    angular.extend(this, descriptor);\n\n    this.components = [];\n    this.componentsById = {};\n    this.wires = [];\n    this.wiresById = {};\n    this.wiresByComponentId = {};\n    this.portsById = {};\n\n    this.config = {\n        editable: true,\n        disallowSelection: false,\n        width: 5000,\n        height: 5000\n    };\n\n    this.state = {\n        selectedComponentIds: []\n    };\n\n};\n\nDiagram.prototype.addComponent = function (aDiagramComponent) {\n\n    var i,\n        port;\n\n    if (angular.isObject(aDiagramComponent) && !angular.isDefined(this.componentsById[aDiagramComponent.id])) {\n\n        this.componentsById[aDiagramComponent.id] = aDiagramComponent;\n        this.components.push(aDiagramComponent);\n\n        for (i = 0; i < aDiagramComponent.portInstances.length; i++) {\n\n            port = aDiagramComponent.portInstances[i];\n            this.portsById[port.id] = port;\n\n        }\n    }\n\n};\n\nDiagram.prototype.addWire = function (aWire) {\n\n    var self=this,\n        registerWireForEnds;\n\n    registerWireForEnds = function (wire) {\n\n        var componentId;\n\n        if (angular.isObject(wire.end1.component) && angular.isObject(wire.end2.component)) {\n\n            componentId = wire.end1.component.id;\n\n            self.wiresByComponentId[componentId] = self.wiresByComponentId[componentId] || [];\n\n            if (self.wiresByComponentId[componentId].indexOf(wire) === -1) {\n                self.wiresByComponentId[componentId].push(wire);\n            }\n\n            componentId = wire.end2.component.id;\n\n            self.wiresByComponentId[componentId] = self.wiresByComponentId[componentId] || [];\n\n            if (self.wiresByComponentId[componentId].indexOf(wire) === -1) {\n                self.wiresByComponentId[componentId].push(wire);\n            }\n\n        }\n\n    };\n\n\n    if (angular.isObject(aWire) && !angular.isDefined(this.wiresById[aWire.id])) {\n\n        this.wiresById[aWire.id] = aWire;\n        this.wires.push(aWire);\n\n        registerWireForEnds(aWire);\n\n    }\n\n};\n\nDiagram.prototype.deleteWireById = function(anId) {\n\n    var wire,\n        self,\n        componentId,\n        index;\n\n    self = this;\n\n    wire = self.wiresById[anId];\n\n    if (angular.isObject(wire)) {\n\n        componentId = wire.end1.component.id;\n\n        self.wiresByComponentId[componentId] = self.wiresByComponentId[componentId] || [];\n\n        index = self.wiresByComponentId[componentId].indexOf(wire);\n\n        if (index >  -1) {\n            self.wiresByComponentId[componentId].splice(index,1);\n        }\n\n        componentId = wire.end2.component.id;\n\n        self.wiresByComponentId[componentId] = self.wiresByComponentId[componentId] || [];\n\n        index = self.wiresByComponentId[componentId].indexOf(wire);\n\n        if (index >  -1) {\n            self.wiresByComponentId[componentId].splice(index,1);\n        }\n\n        index = self.wires.indexOf(wire);\n        self.wires.splice(index, 1);\n\n        delete self.wiresById[wire.id];\n\n    }\n\n};\n\nDiagram.prototype.deleteComponentById = function(anId) {\n\n    var i,\n        index,\n        self,\n        component;\n\n    self = this;\n\n    component = this.componentsById[anId];\n\n    if (angular.isObject(component)) {\n\n\n        angular.forEach(self.wiresByComponentId[component.id], function(wire) {\n            self.deleteWireById(wire.id);\n        });\n\n        index = self.state.selectedComponentIds.indexOf(component.id);\n\n        if (index > -1) {\n            self.state.selectedComponentIds.splice(index, 1);\n        }\n\n        index = self.components.indexOf(component);\n        self.components.splice(index, 1);\n\n        delete self.wiresByComponentId[component.id];\n        delete self.componentsById[component.id];\n\n        for (i = 0; i < component.portInstances.length; i++) {\n            delete this.portsById[component.portInstances[i].id];\n        }\n\n        component = null;\n\n    }\n\n};\n\nDiagram.prototype.deleteComponentOrWireById = function(anId) {\n\n    var self,\n        element,\n        success;\n\n    self = this;\n\n    success = false;\n\n    element = self.componentsById[anId];\n\n    if (angular.isObject(element)) {\n\n        self.deleteComponentById(element.id);\n        success = true;\n\n    } else {\n\n        element = self.wiresById[anId];\n\n        if (angular.isObject(element)) {\n\n            self.deleteWireById(element.id);\n            success = true;\n\n        }\n\n    }\n\n    return success;\n\n};\n\n\nDiagram.prototype.getWiresForComponents = function (components) {\n\n    var self = this,\n        setOfWires = [];\n\n    angular.forEach(components, function (component) {\n\n        angular.forEach(self.wiresByComponentId[component.id], function (wire) {\n\n            if (setOfWires.indexOf(wire) === -1) {\n                setOfWires.push(wire);\n            }\n        });\n\n    });\n\n    return setOfWires;\n\n};\n\nDiagram.prototype.updateComponentPosition = function (componentId, newPosition) {\n\n    var self = this,\n        component;\n\n        component = self.componentsById[componentId];\n\n        if (angular.isObject(component)) {\n\n            component.setPosition(newPosition.x, newPosition.y);\n\n        }\n\n};\n\nDiagram.prototype.updateComponentRotation = function (componentId, newRotation) {\n\n    var self = this,\n        component;\n\n    component = self.componentsById[componentId];\n\n    if (angular.isObject(component)) {\n\n        component.setRotation(newRotation);\n\n    }\n\n};\n\nDiagram.prototype.isComponentSelected = function (component) {\n\n    return this.state.selectedComponentIds.indexOf(component.id) > -1;\n\n};\n\nDiagram.prototype.getSelectedComponents = function () {\n\n    var self,\n        selectedComponents;\n\n    self = this;\n    selectedComponents = [];\n\n    angular.forEach(this.state.selectedComponentIds, function(componentId){\n\n        selectedComponents.push(self.componentsById[componentId]);\n\n    });\n\n    return selectedComponents;\n\n};\n\n\nmodule.exports = Diagram;\n","/*globals angular*/\n\n'use strict';\n\nvar glMatrix = require( 'glMatrix' );\n\nvar DiagramComponent = function ( descriptor ) {\n\n    if ( !angular.isObject( descriptor.symbol ) ) {\n        throw new Error( 'No symbol found for component ' + this.id );\n    }\n\n    angular.extend( this, descriptor );\n\n    // For rotation\n    this._centerOffset = [ this.symbol.width / 2, this.symbol.height / 2 ];\n\n};\n\nDiagramComponent.prototype.isInViewPort = function ( viewPort, padding ) {\n\n    //TODO: count width and height for orientation\n    padding = padding || {\n        x: 0,\n        y: 0\n    };\n\n    return (\n        angular.isObject( viewPort ) &&\n        this.x + this.symbol.width >= ( viewPort.left + padding.x ) &&\n        this.x <= ( viewPort.right - padding.x ) &&\n        this.y + this.symbol.height >= ( viewPort.top + padding.y ) &&\n        this.y <= ( viewPort.bottom - padding.y ) );\n};\n\nDiagramComponent.prototype.getTransformationMatrix = function () {\n\n    if ( !angular.isArray( this.transformationMatrix ) ) {\n        this.updateTransformationMatrix();\n    }\n\n    return this.transformationMatrix;\n\n};\n\n\nDiagramComponent.prototype.getSVGTransformationMatrix = function () {\n\n    if ( !angular.isArray( this.svgTransformationMatrix ) ) {\n        this.updateTransformationMatrix();\n    }\n\n    return this.svgTransformationMatrix;\n\n};\n\nDiagramComponent.prototype.getSVGTransformationString = function () {\n\n    var transMatrix = this.getSVGTransformationMatrix();\n\n    return transMatrix.join( ', ' );\n};\n\nDiagramComponent.prototype.updateTransformationMatrix = function () {\n\n    var rotationRad,\n        //sinA, cosA,\n        translation,\n        transformMat3,\n        result;\n\n    if ( angular.isNumber( this.rotation ) &&\n        angular.isNumber( this.x ),\n        angular.isNumber( this.y ) ) {\n\n        rotationRad = this.rotation / 180 * Math.PI;\n\n        transformMat3 = glMatrix.mat3.create();\n\n        translation = glMatrix.vec2.create();\n\n        glMatrix.vec2.set( translation, this.x + this._centerOffset[0], this.y + this._centerOffset[1]);\n\n        glMatrix.mat3.translate(\n            transformMat3,\n            transformMat3,\n            translation\n        );\n\n        glMatrix.mat3.rotate(\n            transformMat3,\n            transformMat3,\n            rotationRad\n        );\n\n        glMatrix.vec2.set( translation, -this._centerOffset[0], -this._centerOffset[1]);\n\n        glMatrix.mat3.translate(\n            transformMat3,\n            transformMat3,\n            translation\n        );\n\n        this.transformationMatrix = transformMat3;\n\n        this.svgTransformationMatrix = [\n            transformMat3[ 0 ],\n            transformMat3[ 1 ],\n            transformMat3[ 3 ],\n            transformMat3[ 4 ],\n            transformMat3[ 6 ],\n            transformMat3[ 7 ]\n        ];\n\n        result = this.transformationMatrix;\n\n    }\n\n    return result;\n\n};\n\nDiagramComponent.prototype.getPosition = function () {\n\n    return {\n        x: this.x,\n        y: this.y\n    };\n\n};\n\n\nDiagramComponent.prototype.setPosition = function ( x, y ) {\n\n    if ( angular.isNumber( x ) && angular.isNumber( y ) ) {\n\n        this.x = x;\n        this.y = y;\n\n        this.updateTransformationMatrix();\n\n    } else {\n        throw new Error( 'Coordinates must be numbers!' );\n    }\n};\n\nDiagramComponent.prototype.rotate = function ( angle ) {\n\n    if ( angular.isNumber( angle ) ) {\n\n        this.rotation += angle;\n\n        this.updateTransformationMatrix();\n\n    } else {\n        throw new Error( 'Angle must be number!' );\n    }\n};\n\nDiagramComponent.prototype.setRotation = function ( newRotation ) {\n\n    if ( angular.isNumber( newRotation ) ) {\n\n        this.rotation = newRotation;\n\n        this.updateTransformationMatrix();\n\n    } else {\n        throw new Error( 'Angle must be number!' );\n    }\n};\n\nDiagramComponent.prototype.registerPortInstances = function ( newPorts ) {\n\n    var self = this;\n\n    this.portInstances = this.portInstances || [];\n\n    angular.forEach( newPorts, function ( newPort ) {\n\n        newPort.parentComponent = self;\n        self.portInstances.push( newPort );\n\n    } );\n};\n\nDiagramComponent.prototype.getTransformedDimensions = function () {\n    //  var width, height;\n};\n\nDiagramComponent.prototype.localToGlobal = function () {\n\n    if ( !this.transformationMatrix ) {\n        this.transformationMatrix = this.getTransformationMatrix();\n    }\n\n\n\n};\n\nmodule.exports = DiagramComponent;","/*globals angular*/\n\n'use strict';\n\nmodule.exports = function(symbolManager, diagramService, wiringService) {\n\n    var getDiagram;\n\n    getDiagram = function (countOfBoxes, countOfWires, canvasWidth, canvasHeight, symbolTypes) {\n\n        var i, id,\n            countOfTypes,\n            symbol,\n            typeId,\n            type,\n            x,\n            y,\n            symbolTypeIds,\n            component1,\n            component2,\n            port1,\n            port2,\n            createdPorts,\n            newDiagramComponent,\n\n            portCreator,\n\n            diagram,\n            wire,\n\n            Diagram,\n            DiagramComponent,\n            ComponentPort,\n            Wire;\n\n        Diagram = require('./Diagram');\n        DiagramComponent = require('./DiagramComponent.js');\n        ComponentPort = require('./ComponentPort');\n        Wire = require('./Wire.js');\n\n        diagram = new Diagram();\n\n        portCreator = function (componentId, ports) {\n\n            var portInstance,\n                portInstances,\n                portMapping;\n\n            portInstances = [];\n            portMapping = {};\n\n            angular.forEach(ports, function (port) {\n\n                portInstance = new ComponentPort({\n                    id: componentId + '_' + port.id,\n                    portSymbol: port\n                });\n\n                portInstances.push(portInstance);\n\n                portMapping[ port.id ] = portInstance.id;\n            });\n\n            return {\n                portInstances: portInstances,\n                portMapping: portMapping\n            };\n\n        };\n\n        symbolTypeIds = Object.keys(symbolTypes);\n\n        countOfTypes = symbolTypeIds.length;\n\n        diagram.config.width = canvasWidth;\n        diagram.config.height = canvasHeight;\n\n        for (i = 0; i < countOfBoxes; i++) {\n\n            typeId = symbolTypeIds[ Math.floor(Math.random() * countOfTypes) ];\n            type = symbolTypes[ typeId ];\n\n            x = Math.round(Math.random() * ( canvasWidth - 1 ));\n            y = Math.round(Math.random() * ( canvasHeight - 1 ));\n\n            id = 'component_' + typeId + '_' + i;\n\n            symbol = symbolManager.getSymbol(typeId);\n\n            createdPorts = portCreator(id, symbol.ports);\n\n            newDiagramComponent = new DiagramComponent({\n                id: id,\n                label: type.labelPrefix + i,\n                x: x,\n                y: y,\n                z: i,\n                rotation: Math.floor(Math.random() * 40) * 90,\n                scaleX: 1, //[1, -1][Math.round(Math.random())],\n                scaleY: 1, //[1, -1][Math.round(Math.random())],\n                symbol: symbol,\n                nonSelectable: false,\n                locationLocked: false,\n                draggable: true\n            });\n\n            newDiagramComponent.registerPortInstances(createdPorts.portInstances);\n\n            newDiagramComponent.updateTransformationMatrix();\n\n            diagram.addComponent(newDiagramComponent);\n\n\n        }\n\n        for (i = 0; i < countOfWires; i++) {\n\n            id = 'wire_' + i;\n\n            component1 = diagram.components.getRandomElement();\n\n            port1 = component1.portInstances.getRandomElement();\n            port2 = undefined;\n\n            while (!angular.isDefined(port2) || port1 === port2) {\n\n                component2 = diagram.components.getRandomElement();\n                port2 = component2.portInstances.getRandomElement();\n            }\n\n            wire = new Wire({\n                id: id,\n                end1: {\n                    component: component1,\n                    port: port1\n                },\n                end2: {\n                    component: component2,\n                    port: port2\n                }\n            });\n\n            wiringService.routeWire(wire, 'ElbowRouter');\n\n            diagram.addWire(wire);\n\n        }\n\n        return diagram;\n\n    };\n\n    this.getDiagram = getDiagram;\n};\n","/*globals angular*/\n\n'use strict';\n\nvar Wire = function ( descriptor ) {\n\n    angular.extend( this, descriptor );\n\n    this.segments = [];\n\n};\n\nWire.prototype.isInViewPort = function ( viewPort, padding ) {\n\n    var j,\n        shouldBeVisible,\n        segment;\n\n    padding = padding || {\n        x: 0,\n        y: 0\n    };\n\n    shouldBeVisible = false;\n\n    if ( this.router && this.router.type === 'ElbowRouter' ) {\n\n        if ( angular.isArray( this.segments ) ) {\n\n            for ( j = 0; j < this.segments.length && !shouldBeVisible; j++ ) {\n\n                segment = this.segments[ j ];\n\n                if ( segment.orientation === 'vertical' ) {\n\n                    if ( segment.x1 >= ( viewPort.left + padding.x ) &&\n                        segment.x1 <= ( viewPort.right - padding.x ) ) {\n                        shouldBeVisible = true;\n                    }\n\n                } else {\n\n                    if ( segment.y1 >= ( viewPort.top + padding.y ) &&\n                        segment.y1 <= ( viewPort.bottom - padding.y ) ) {\n                        shouldBeVisible = true;\n                    }\n\n                }\n\n            }\n\n        }\n\n    } else {\n        shouldBeVisible = true;\n    }\n\n    return shouldBeVisible;\n\n};\n\nWire.prototype.getEndPositions = function () {\n\n    var port1Position,\n        port2Position,\n        positions;\n\n    port1Position = this.end1.port.getGridPosition();\n    port2Position = this.end2.port.getGridPosition();\n\n    if (port1Position && port2Position) {\n\n        positions = {\n\n            end1: port1Position,\n            end2: port2Position\n\n        };\n\n    }\n\n    return positions;\n\n};\n\nmodule.exports = Wire;\n","/*globals angular */\n\n'use strict';\n\nangular.module('mms.designVisualization.diagramService', [\n    'mms.designVisualization.symbolServices',\n    'mms.designVisualization.operationsManager'\n])\n    .service('diagramService', [\n        '$q',\n        '$timeout',\n        'symbolManager',\n        '$stateParams',\n        'wiringService',\n        'operationsManager',\n        function ($q, $timeout, symbolManager, $stateParams, wiringService/*, operationsManager*/) {\n\n            var\n                self = this,\n\n                diagrams,\n\n                symbolTypes,\n\n                DummyDiagramGenerator,\n                dummyDiagramGenerator,\n\n                CyPhyDiagramParser,\n                cyPhyDiagramParser,\n\n                DiagramComponent,\n                ComponentPort,\n                Wire;\n\n            diagrams = {};\n\n            DummyDiagramGenerator = require('./classes/DummyDiagramGenerator.js');\n            CyPhyDiagramParser = require('./classes/CyPhyDiagramParser.js');\n\n            DiagramComponent = require('./classes/DiagramComponent.js');\n            ComponentPort = require('./classes/ComponentPort');\n            Wire = require('./classes/Wire.js');\n\n            dummyDiagramGenerator = new DummyDiagramGenerator(symbolManager, self, wiringService);\n            cyPhyDiagramParser = new CyPhyDiagramParser(symbolManager, self, wiringService);\n\n            symbolTypes = symbolManager.getAvailableSymbols();\n\n\n            this.addComponent = function (diagramId, aDiagramComponent) {\n\n                var diagram;\n\n                diagram = diagrams[diagramId];\n\n                if (angular.isObject(diagram)) {\n\n                    diagram.addComponent(aDiagramComponent);\n\n                }\n\n            };\n\n            this.updateComponentsAndItsWiresPosition = function( diagramId, componentId, newPosition) {\n\n                var diagram,\n                    setOfWires;\n\n                diagram = diagrams[diagramId];\n\n                if (angular.isObject(diagram)) {\n\n                    diagram.updateComponentPosition(componentId, newPosition);\n\n                    setOfWires = diagram.wiresByComponentId[componentId];\n\n                    angular.forEach( setOfWires, function ( wire ) {\n\n                        wiringService.adjustWireEndSegments( wire );\n\n                    } );\n\n\n                }\n\n            };\n\n            this.updateComponentsAndItsWiresRotation = function( diagramId, componentId, newRotation) {\n\n                var diagram,\n                    setOfWires;\n\n                diagram = diagrams[diagramId];\n\n                if (angular.isObject(diagram)) {\n\n                    diagram.updateComponentRotation(componentId, newRotation);\n\n                    setOfWires = diagram.wiresByComponentId[componentId];\n\n                    angular.forEach( setOfWires, function ( wire ) {\n\n                        wiringService.adjustWireEndSegments( wire );\n\n                    } );\n\n\n                }\n\n            };\n\n            this.updateWireSegments = function( diagramId, wireId, newSegments) {\n\n                var diagram,\n                    wire;\n\n                console.log(newSegments);\n\n                diagram = diagrams[diagramId];\n\n                if (angular.isObject(diagram)) {\n\n                    wire = diagram.wiresById[wireId];\n\n                    if (angular.isObject(wire)) {\n\n                        wire.segments = newSegments;\n\n                    }\n\n                }\n\n            };\n\n            this.addWire = function (diagramId, aWire) {\n\n                var diagram;\n\n                diagram = diagrams[diagramId];\n\n                if (angular.isObject(diagram)) {\n\n                    diagram.addWire(aWire);\n\n                }\n\n            };\n\n            this.getWiresForComponents = function (diagramId, components) {\n\n                var diagram,\n                    wires;\n\n                diagram = diagrams[diagramId];\n\n                if (angular.isObject(diagram)) {\n\n                    wires = diagram.getWiresForComponents(components);\n\n                }\n\n                return wires || [];\n\n            };\n\n            this.createDiagramFromCyPhyElements = function(diagramId, diagramElements) {\n\n                var diagram;\n\n                if (diagramId && angular.isObject(diagramElements)) {\n\n                    diagram = cyPhyDiagramParser.getDiagram(diagramElements);\n                    diagram.id = diagramId;\n\n                    diagrams[diagramId] = diagram;\n\n                }\n\n                return diagram;\n\n            };\n\n            this.createNewComponentFromFromCyPhyElement = function(diagramId, diagramElementDescriptor) {\n\n                var diagram,\n                    newDiagramStuff;\n\n                diagram = diagrams[diagramId];\n\n                if (angular.isObject(diagram) && angular.isObject(diagramElementDescriptor)) {\n\n                    newDiagramStuff = cyPhyDiagramParser.getDiagramElement(\n                        diagramElementDescriptor,\n                        self.getHighestZ() + 1,\n                        diagram\n                    );\n\n                    if (diagramElementDescriptor.baseName === 'ConnectorComposition') {\n                        diagram.addWire(newDiagramStuff);\n                    } else {\n                        diagram.addComponent(newDiagramStuff);\n                    }\n\n\n                }\n\n                return newDiagramStuff;\n\n            };\n\n            this.getDiagram = function (diagramId) {\n\n                var diagram;\n\n                if (diagramId) {\n\n                    diagram = diagrams[diagramId];\n\n                }\n\n                return diagram;\n\n            };\n\n            this.deleteComponentOrWireById = function(diagramId, elementId) {\n\n                var diagram,\n                    result;\n\n                result = false;\n\n                diagram = diagrams[diagramId];\n\n                if (diagram) {\n\n                    result = diagram.deleteComponentOrWireById(elementId);\n\n                }\n\n                return result;\n\n            };\n\n            this.addDummyDiagram = function (diagramId, countOfBoxes, countOfWires, canvasWidth, canvasHeight) {\n\n                var dummyDiagram;\n\n                if (diagramId) {\n\n                    dummyDiagram =\n                        dummyDiagramGenerator.getDiagram(\n                            countOfBoxes, countOfWires, canvasWidth, canvasHeight, symbolTypes\n                        );\n\n                    dummyDiagram.id = diagramId;\n\n                    diagrams[diagramId] = dummyDiagram;\n\n                }\n\n                return dummyDiagram;\n\n            };\n\n            this.getHighestZ = function (diagramId) {\n\n                var i,\n                    component,\n                    z;\n\n                var diagram;\n\n                diagram = diagrams[diagramId];\n\n                if (angular.isObject(diagram)) {\n\n                    for (i = 0; i < diagram.components.length; i++) {\n\n                        component = diagram.components[i];\n\n                        if (!isNaN(component.z)) {\n\n                            if (isNaN(z)) {\n                                z = component.z;\n                            } else {\n\n                                if (z < component.z) {\n                                    z = component.z;\n                                }\n\n                            }\n\n                        }\n                    }\n\n                    if (isNaN(z)) {\n                        z = -1;\n                    }\n\n                }\n\n                return z;\n\n            };\n\n//            operationsManager.registerOperation({\n//                id: 'setComponentPosition',\n//                commit: function (component, x, y) {\n//\n//                    if (angular.isObject(component)) {\n//                        component.setPosition(x, y);\n//                    }\n//\n//                }\n//\n//            });\n\n\n            //this.generateDummyDiagram(1000, 200, 5000, 5000);\n            //this.generateDummyDiagram(1000, 2000, 10000, 10000);\n            //this.generateDummyDiagram(10, 5, 1200, 1200);\n            //this.generateDummyDiagram( 100, 50, 3000, 3000 );\n\n        }\n    ]);\n","/*globals angular*/\n\n'use strict';\n\nvar gridServicesModule = angular.module(\n    'mms.designVisualization.gridService', [] );\n\ngridServicesModule.service( 'gridService', [ '$log', '$rootScope', '$timeout',\n    function ( $log, $rootScope, $timeout ) {\n\n        var self = this,\n\n            gridSize,\n\n            grids = {},\n\n            numberOfChangesAllowedInOneCycle = 1,\n            recalculateCycleDelay = 15,\n            viewPortPadding = {\n                x: -600,\n                y: -600\n            },\n\n            recalculateVisibleDiagramComponents,\n            _recalculateVisibleDiagramComponents,\n            recalculateVisibleWires;\n\n        gridSize = 10;\n\n        recalculateVisibleWires = function ( grid ) {\n\n            var index,\n                i,\n                wire;\n\n\n            for (i = 0; i < grid.wires.length; i++) {\n\n                wire = grid.wires[i];\n\n                index = grid.visibleWires.indexOf(wire);\n\n                if (wire.isInViewPort(grid.viewPort, viewPortPadding)) {\n\n                    if (index === -1) {\n                        grid.visibleWires.push(wire);\n                    }\n\n                } else {\n\n                    if (index > -1) {\n                        grid.visibleWires.splice(index, 1);\n                    }\n\n                }\n\n            }\n\n            //$log.debug( 'Number of visible wires: ' + grid.visibleWires.length );\n\n        };\n\n        recalculateVisibleDiagramComponents = function( grid, startIndex ) {\n\n            if (angular.isArray(grid.components) && angular.isArray(grid.wires)) {\n\n                if (grid.recalculateVisibleDiagramComponentsPromise) {\n\n                    if ($timeout.cancel(grid.recalculateVisibleDiagramComponentsPromise)) {\n                        $log.debug('Had to kill recalculateVisibleDiagramComponents');\n                    }\n\n                }\n\n                grid.recalculateVisibleDiagramComponentsPromise = $timeout(\n                    function () {\n                        _recalculateVisibleDiagramComponents(grid, startIndex);\n                    },\n\n                    recalculateCycleDelay\n                );\n            }\n        };\n\n        _recalculateVisibleDiagramComponents = function ( grid, startIndex ) {\n\n            var i, component,\n\n                countOfChanges = 0,\n                changesLimitReached = false,\n                index;\n\n            grid.insideVisibleDiagramComponentsRecalculate = true;\n\n\n            if (!changesLimitReached) {\n                recalculateVisibleWires( grid );\n            }\n\n            startIndex = startIndex || 0;\n\n            for (i = startIndex; i< grid.components.length && changesLimitReached === false; i++) {\n\n                component = grid.components[i];\n\n\n                index = grid.visibleDiagramComponents.indexOf( component );\n\n                if ( component.isInViewPort( grid.viewPort, viewPortPadding ) ) {\n\n                    if ( index === -1 ) {\n                        grid.visibleDiagramComponents.push( component );\n                        countOfChanges++;\n                    }\n                } else {\n\n                    if ( index > -1 ) {\n                        grid.visibleDiagramComponents.splice( index, 1 );\n                        //countOfChanges++;\n                    }\n                }\n\n                if ( countOfChanges >= numberOfChangesAllowedInOneCycle ) {\n                    changesLimitReached = true;\n                }\n\n            }\n\n            //$log.debug( 'Number of changes compared to previous diagram state:', countOfChanges );\n\n            if ( !changesLimitReached ) {\n\n                self.reorderVisibleComponents( grid.id );\n\n                grid.insideVisibleDiagramComponentsRecalculate = false;\n\n                if (!grid.initialized) {\n\n                    grid.initialized = true;\n\n                    $timeout(function() {\n                        $rootScope.$broadcast('GridInitialized', grid.id);\n                    });\n\n                }\n\n            } else {\n\n                recalculateVisibleDiagramComponents(grid, i);\n\n            }\n\n        };\n\n        this.invalidateVisibleDiagramComponents = function ( gridId, hard ) {\n\n            var grid;\n\n            grid = grids[ gridId ];\n\n            if ( angular.isDefined( grid ) ) {\n\n                if (hard === true) {\n\n                    grid.visibleWires = [];\n                    grid.visibleDiagramComponents = [];\n\n                    $timeout(function(){\n\n                        recalculateVisibleDiagramComponents(grid);\n\n                    });\n\n                } else {\n\n                    if (!grid.insideVisibleDiagramComponentsRecalculate) {\n\n                        recalculateVisibleDiagramComponents(grid);\n\n                    }\n                }\n            }\n\n        };\n\n\n        this.createGrid = function ( id, diagram ) {\n\n            var grid;\n\n\n            grid = grids[ id ] = {\n                id: id,\n                components: diagram.components,\n                visibleDiagramComponents: [],\n                wires: diagram.wires,\n                visibleWires: [],\n                viewPort: {},\n                insideVisibleDiagramComponentsRecalculate: false,\n                initialized: false\n            };\n\n            return grid;\n        };\n\n\n        this.setVisibleArea = function ( gridId, viewPort ) {\n            var grid = grids[ gridId ];\n\n            if ( angular.isDefined( grid ) ) {\n\n                if ( angular.isDefined( viewPort ) ) {\n\n                    grid.viewPort = viewPort;\n\n                    self.invalidateVisibleDiagramComponents( grid.id );\n\n                }\n\n            } else {\n                throw ( 'Grid was not defined!', gridId );\n            }\n\n        };\n\n        this.getViewPortCenter = function ( gridId ) {\n\n            var grid,\n                center;\n\n                grid = grids[ gridId ];\n\n            if ( angular.isDefined( grid ) && angular.isObject(grid.viewPort) ) {\n\n                center = {\n\n                    x: (grid.viewPort.left + grid.viewPort.right) / 2,\n                    y: (grid.viewPort.top + grid.viewPort.bottom) / 2\n\n                };\n            }\n\n            return center;\n\n        };\n\n        this.reorderVisibleComponents = function ( gridId ) {\n\n            var grid = grids[ gridId ];\n\n            if ( angular.isDefined( grid ) ) {\n                grid.visibleDiagramComponents.sort( function ( a, b ) {\n\n                    if ( a.z > b.z ) {\n                        return 1;\n                    }\n\n                    if ( a.z < b.z ) {\n                        return -1;\n                    }\n\n                    return 0;\n\n                } );\n            }\n\n        };\n\n        this.getSnappedPosition = function(position) {\n\n            var x,\n                y;\n\n            if ($rootScope.snapToGrid !== true) {\n                return position;\n            }\n\n            x = 0;\n            y = 0;\n\n            if (isNaN(gridSize)) {\n                gridSize  = 1;\n            }\n\n            if (angular.isObject(position)) {\n\n                x = position.x || 0;\n                y = position.y || 0;\n\n                x = ( Math.round( x / gridSize ) * gridSize );\n                y = ( Math.round( y / gridSize ) * gridSize );\n\n                //console.log(gridSize, x, y);\n\n            }\n\n            return {\n                x: x,\n                y: y\n            };\n\n        };\n\n    }\n] );\n","/*globals angular*/\n\n'use strict';\n\nvar operationsManagerModule = angular.module(\n    'mms.designVisualization.operationsManager', []);\n\noperationsManagerModule.provider('operationsManager', function OperationsManagerProvider() {\n    var self,\n        availableOperations;\n\n    self = this;\n\n    availableOperations = {};\n\n    this.registerOperation = function (operationDescriptor) {\n\n        if (angular.isObject(operationDescriptor) &&\n            angular.isString(operationDescriptor.id)) {\n            availableOperations[ operationDescriptor.id ] = operationDescriptor.operationClass;\n        }\n    };\n\n    this.$get = [\n\n        function () {\n\n            var OperationsManager;\n\n            OperationsManager = function () {\n\n                this.registerOperation = function (operationDescriptor) {\n\n                    if (angular.isObject(operationDescriptor) &&\n                        angular.isString(operationDescriptor.id)) {\n                        availableOperations[ operationDescriptor.id ] = operationDescriptor.operationClass;\n                    }\n\n                };\n\n                this.getAvailableOperations = function () {\n                    return availableOperations;\n                };\n\n                this.initNew = function (operationId) {\n\n                    var OperationClass,\n                        operationInstance;\n\n                    OperationClass = availableOperations[ operationId ];\n\n                    if (angular.isFunction(OperationClass)) {\n\n                        operationInstance = new OperationClass();\n\n                        Array.prototype.shift.call(arguments);\n\n                        operationInstance.init.apply(operationInstance, arguments);\n\n                    }\n\n                    return operationInstance;\n                };\n\n            };\n\n            return new OperationsManager();\n\n        }\n    ];\n});","/*globals angular */\n\n'use strict';\n\nangular.module('mms.projectHandling', [])\n    .service('projectHandling', function ($q, $log, branchService, connectionHandling, $http) {\n\n        var randomString;\n\n        randomString = function(length) {\n            var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz'.split('');\n\n            if (! length) {\n                length = Math.floor(Math.random() * chars.length);\n            }\n\n            var str = '';\n            for (var i = 0; i < length; i++) {\n                str += chars[Math.floor(Math.random() * chars.length)];\n            }\n            return str;\n        };\n\n        this.copyProject = function () {\n            return $http.get('/rest/external/copyproject/noredirect');\n\n        };\n\n        this.cloneMaster = function () {\n\n            var deferred,\n                connectionId;\n\n            deferred = $q.defer();\n\n            connectionHandling.establishMainGMEConnection()\n                .then(function () {\n\n                    connectionId = connectionHandling.getMainGMEConnectionId();\n\n                    branchService.getBranches(connectionId)\n                        .then(function (branches) {\n\n                            var newBranchId,\n                                hashId,\n                                i;\n\n                            $log.debug('Available branches', branches);\n\n                            if (!branches.length) {\n\n                                $log.error('No branches, what now?');\n                                deferred.reject();\n\n                            } else {\n\n                                for (i=0; i < branches.length; i++) {\n\n                                    if (branches[i].name === 'master') {\n                                        hashId = branches[i].commitId;\n                                    }\n                                }\n\n                                if (!hashId) {\n                                    deferred.reject('Could not find master branch!');\n                                }\n\n                                newBranchId = randomString(6) + (new Date()).getTime();\n\n                                branchService.createBranch(\n                                    connectionId,\n                                    newBranchId,\n                                    hashId\n                                )\n                                    .then(function () {\n                                        deferred.resolve(newBranchId);\n                                    })\n                                    .catch(function (err) {\n                                        deferred.reject(err);\n                                    });\n\n\n                            }\n\n                        })\n                        .catch(function (error) {\n                            deferred.reject(error);\n                        });\n\n                });\n\n            return deferred.promise;\n\n        };\n\n        this.findFirstBranch = function () {\n\n            var deferred,\n                connectionId;\n\n            deferred = $q.defer();\n\n            connectionId = connectionHandling.getMainGMEConnectionId();\n\n            branchService.getBranches(connectionId)\n                .then(function (branches) {\n\n                    $log.debug('Available branches', branches);\n\n                    if (!branches.length) {\n\n                        $log.error('No branches, what now?');\n                        deferred.reject();\n\n                    } else {\n\n                        deferred.resolve(branches[0].name);\n\n                    }\n\n                });\n\n            return deferred.promise;\n\n        };\n\n\n    });\n","/*globals angular*/\n'use strict';\n\nmodule.exports = function() {\n    var keywordsBySymbols,\n        symbolsByKeywords;\n\n    keywordsBySymbols = {\n        'capacitor': [\n            'capacitors',\n            'c'\n        ],\n        'resistors': [\n            'resistors',\n            'r'\n        ],\n        'diodes': [\n            'diodes',\n            'led'\n        ],\n        'inductors': [\n            'inductors',\n            'l'\n        ],\n        'transistors': [\n            'jFetP'\n        ]\n    };\n\n    symbolsByKeywords = {};\n\n    angular.forEach(keywordsBySymbols, function(symbol, keywords){\n\n        angular.forEach(keywords, function(keyword) {\n\n            symbolsByKeywords[ keyword ] = symbol;\n\n        });\n\n    });\n\n    return symbolsByKeywords;\n};\n","/*globals angular*/\n\n'use strict';\n\nvar symbolServicesModule = angular.module(\n    'mms.designVisualization.symbolServices', [] ),\n\n    symbolTypesSearchIndex = require('./classes/SymbolTypesSearchIndex')();\n\n\n\nsymbolServicesModule.provider( 'symbolManager', function SymbolManagerProvider() {\n    var provider = this,\n        availableSymbols = {},\n\n        portCreator,\n        spreadPortsAlongSide,\n\n        portHorizontalTranslation;\n\n\n    spreadPortsAlongSide = function (somePorts, side, width, height, parameters) {\n\n        var offset,\n            increment,\n\n            i,\n            aPort,\n\n            numberOfPorts,\n            wireLeadIn;\n\n        numberOfPorts = somePorts.length;\n\n        offset = parameters.portWireLength + parameters.portSpacing;\n\n        if (side === 'right' || side === 'left') {\n            offset += parameters.topPortPadding;\n        }\n\n        if (parameters.justifyPorts) {\n\n            if (side === 'top' || side === 'bottom') {\n                increment = (width - 2 * parameters.portSpacing) / ( somePorts.length + 1 );\n            } else {\n                increment =\n                    ( height -\n                        2 * parameters.portSpacing -\n                        parameters.topPortPadding - parameters.bottomPortPadding) / ( somePorts.length + 1 );\n            }\n\n        } else {\n            increment = parameters.portSpacing;\n        }\n\n        portHorizontalTranslation = parameters.portWireLength + parameters.portLabelHorizontalPadding;\n\n        wireLeadIn = 0;\n\n        for (i=0; i < numberOfPorts; i++) {\n\n            aPort = somePorts[i];\n\n            if (i < numberOfPorts) {\n                wireLeadIn += parameters.portWireLeadInIncrement;\n            } else {\n                wireLeadIn -= parameters.portWireLeadInIncrement;\n            }\n\n            switch (side) {\n\n                case 'top':\n                    aPort.x = offset;\n                    aPort.y = 0;\n                    aPort.wireAngle = -90;\n                    aPort.cssClass = 'top';\n                    aPort.labelPosition = {\n                        x: 0,\n                        y: 0\n                    };\n\n                    offset += increment;\n\n                    break;\n\n                case 'right':\n                    aPort.x = width;\n                    aPort.y = offset;\n                    aPort.wireAngle = 0;\n                    aPort.cssClass = 'right';\n                    aPort.labelPosition = {\n                        x: -portHorizontalTranslation,\n                        y: parameters.portLabelVerticalPadding\n                    };\n\n\n                    offset += increment;\n\n                    break;\n\n                case 'bottom':\n                    aPort.x = offset;\n                    aPort.y = height;\n                    aPort.wireAngle = 90;\n                    aPort.cssClass = 'bottom';\n                    aPort.labelPosition = {\n                        x: 0,\n                        y: 0\n                    };\n\n                    offset += increment;\n\n                    break;\n\n                case 'left':\n                    aPort.x = 0;\n                    aPort.y = offset;\n                    aPort.wireAngle = 180;\n                    aPort.cssClass = 'left';\n                    aPort.labelPosition = {\n                        x: portHorizontalTranslation,\n                        y: parameters.portLabelVerticalPadding\n                    };\n\n\n                    offset += increment;\n\n                    break;\n\n            }\n\n            aPort.wireLeadIn = wireLeadIn;\n\n        }\n\n    };\n\n\n    portCreator = function(portDescriptors, parameters) {\n\n        var width,\n            height,\n            ports,\n\n            top,\n            right,\n            bottom,\n            left;\n\n        portDescriptors = portDescriptors || {};\n        ports = [];\n\n        top = portDescriptors.top || [];\n        right = portDescriptors.right || [];\n        bottom = portDescriptors.bottom || [];\n        left = portDescriptors.left || [];\n\n        width = Math.max(\n            parameters.portSpacing * ( top.length + 3 ),\n            parameters.portSpacing * ( bottom.length + 3),\n            parameters.minWidth\n        );\n\n        height = Math.max(\n            parameters.portSpacing * ( left.length + 3) + parameters.topPortPadding + parameters.bottomPortPadding,\n            parameters.portSpacing * ( right.length + 3) + parameters.topPortPadding + parameters.bottomPortPadding,\n            parameters.minHeight\n        );\n\n        spreadPortsAlongSide(top, 'top', width, height, parameters);\n        spreadPortsAlongSide(right, 'right', width, height, parameters);\n        spreadPortsAlongSide(bottom, 'bottom', width, height, parameters);\n        spreadPortsAlongSide(left, 'left', width, height, parameters);\n\n        ports = ports.concat(top)\n            .concat(right)\n            .concat(bottom)\n            .concat(left);\n\n        return {\n            ports: ports,\n            width: width,\n            height: height\n        };\n\n    };\n\n\n    this.registerSymbol = function ( symbolDescriptor ) {\n\n        if ( angular.isObject( symbolDescriptor ) &&\n            angular.isString( symbolDescriptor.type ) ) {\n            availableSymbols[ symbolDescriptor.type ] = symbolDescriptor;\n        }\n    };\n\n    this.makeBoxSymbol = function( type, descriptor, portDescriptors, givenParameters ) {\n\n        var symbol,\n            parameters,\n            portsAndSizes,\n            cssClass;\n\n        parameters = angular.extend({\n\n            portWireLength: 20,\n            portSpacing: 20,\n            topPortPadding: 20,\n            bottomPortPadding: 0,\n            portLabelHorizontalPadding: 5,\n            portLabelVerticalPadding: 3,\n            minWidth: 140,\n            minHeight: 80,\n            justifyPorts: false,\n            portWireLeadInIncrement: 0\n\n        }, givenParameters || {});\n\n        if (angular.isObject(descriptor) && type) {\n\n            portDescriptors = portDescriptors || {};\n\n            portsAndSizes = portCreator(portDescriptors, parameters);\n\n            cssClass = 'box';\n\n            if (parameters.cssClass) {\n                cssClass += ' parameters.cssClass';\n            }\n\n            symbol = angular.extend(descriptor,\n                {\n                    type: type,\n                    cssClass: cssClass,\n                    symbolDirective: 'box',\n                    svgDecoration: null,\n                    labelPosition: {\n                        x: portsAndSizes.width/2,\n                        y: parameters.portWireLength + 24\n                    },\n                    portWireLength: parameters.portWireLength,\n                    width: portsAndSizes.width,\n                    height: portsAndSizes.height,\n                    ports: portsAndSizes.ports,\n                    boxHeight: portsAndSizes.height - 2 * parameters.portWireLength,\n                    boxWidth: portsAndSizes.width - 2 * parameters.portWireLength\n                });\n\n            provider.registerSymbol(symbol);\n\n\n        }\n\n        return symbol;\n    };\n\n\n    this.$get = [\n\n        function () {\n\n            var SymbolManager;\n\n            SymbolManager = function () {\n\n                var self;\n\n                self = this;\n\n                this.registerSymbol = provider.registerSymbol;\n\n                this.makeBoxSymbol = provider.makeBoxSymbol;\n\n                this.getAvailableSymbols = function () {\n                    return availableSymbols;\n                };\n\n                this.getSymbol = function ( symbolType ) {\n                    return availableSymbols[ symbolType ];\n                };\n\n                this.getAccurateSymbolType = function ( approximateName ) {\n\n                    return symbolTypesSearchIndex[approximateName.toLowerCase()];\n\n                };\n\n\n            };\n\n            return new SymbolManager();\n\n        }\n    ];\n} );\n","/*globals angular*/\n\n'use strict';\n\nvar ElbowRouter = function () {\n\n    var self = this;\n\n    this.name = 'ElbowRouter';\n\n    this.makeSegments = function ( points, method ) {\n\n        var i,\n            point1, elbow, point2,\n            segments;\n\n        method = method || 'verticalFirst';\n\n        if ( angular.isArray( points ) && points.length >= 2 ) {\n\n            segments = [];\n\n            for ( i = 0; i < points.length - 1; i++ ) {\n\n                point1 = points[ i ];\n                point2 = points[ i + 1 ];\n\n                if ( method === 'verticalFirst' ) {\n\n                    elbow = {\n                        x: point1.x,\n                        y: point2.y\n                    };\n\n                } else {\n\n                    elbow = {\n                        x: point2.x,\n                        y: point1.y\n                    };\n\n                }\n\n                segments.push( {\n\n                    type: 'line',\n\n                    x1: point1.x,\n                    y1: point1.y,\n\n                    x2: elbow.x,\n                    y2: elbow.y,\n\n                    router: {\n                        type: self.name,\n                        params: method\n                    },\n\n                    orientation: ( method === 'verticalFirst' ) ? 'vertical' : 'horizontal'\n\n                }, {\n\n                    type: 'line',\n\n                    x1: elbow.x,\n                    y1: elbow.y,\n\n                    x2: point2.x,\n                    y2: point2.y,\n\n                    router: {\n                        type: self.name,\n                        params: method\n                    },\n\n                    orientation: ( method === 'verticalFirst' ) ? 'horizontal' : 'vertical'\n\n                } );\n\n            }\n\n        }\n\n        return segments;\n\n    };\n\n};\n\nmodule.exports = ElbowRouter;","/*globals angular*/\n\n'use strict';\n\nvar SimpleRouter = function () {\n\n    this.makeSegments = function ( points ) {\n\n        var i,\n            point1, point2,\n            segments;\n\n        if ( angular.isArray( points ) && points.length >= 2 ) {\n\n            segments = [];\n\n            for ( i = 0; i < points.length - 1; i++ ) {\n\n                point1 = points[ i ];\n                point2 = points[ i + 1 ];\n\n                segments.push( {\n\n                    router: {\n                        type: 'SimpleRouter'\n                    },\n\n                    type: 'line',\n\n                    x1: point1.x,\n                    y1: point1.y,\n\n                    x2: point2.x,\n                    y2: point2.y\n\n                } );\n\n            }\n\n        }\n\n        return segments;\n\n    };\n\n};\n\nmodule.exports = SimpleRouter;","/*globals angular*/\n\n'use strict';\n\nvar wiringServicesModule = angular.module(\n    'mms.designVisualization.wiringService', []);\n\nwiringServicesModule.service('wiringService', ['$log', '$rootScope', '$timeout',\n    function () {\n\n        var self = this,\n            SimpleRouter = require('./classes/SimpleRouter.js'),\n            ElbowRouter = require('./classes/ElbowRouter.js'),\n            routers = {\n\n                SimpleRouter: new SimpleRouter(),\n                ElbowRouter: new ElbowRouter()\n\n            };\n\n        this.getRouterTypes = function () {\n\n            return [\n\n                {\n                    id: 'elbowHorizontal',\n                    label: 'Elbow - horizontal first',\n                    type: 'ElbowRouter',\n                    params: 'horizontalFirst'\n                },\n\n                {\n                    id: 'elbowVertical',\n                    label: 'Elbow - vertical first',\n                    type: 'ElbowRouter',\n                    params: 'verticalFirst'\n                },\n\n                {\n                    id: 'simpleRouter',\n                    label: 'Straight wire',\n                    type: 'SimpleRouter'\n                }\n\n\n            ];\n\n        };\n\n        this.getSegmentsBetweenPositions = function (endPositions, routerType, params) {\n\n            var segments,\n                router;\n\n            router = routers[routerType] || 'SimpleRouter';\n\n            if (angular.isObject(router) && angular.isFunction(router.makeSegments)) {\n                segments = router.makeSegments(\n                    [endPositions.end1, endPositions.end2],\n                    params\n                );\n            }\n\n            return segments;\n\n        };\n\n        this.routeWire = function (wire, routerType, params, ignoreLeadIn) {\n\n            var router,\n                simpleRouter,\n                elbowRouter,\n\n                endPositions,\n                p1,\n                p2,\n                s1, s2, s3;\n\n\n            simpleRouter = routers.SimpleRouter;\n            elbowRouter = routers.ElbowRouter;\n\n            router = routers[routerType] || simpleRouter;\n\n            if (angular.isObject(router) && angular.isFunction(router.makeSegments)) {\n\n                endPositions = wire.getEndPositions();\n\n                if (endPositions) {\n\n                    s1 = [];\n                    s2 = [];\n                    s3 = [];\n\n                    if (endPositions.end1.leadInPosition && !ignoreLeadIn) {\n\n                        s1 = elbowRouter.makeSegments([\n                            endPositions.end1,\n                            endPositions.end1.leadInPosition\n                        ]);\n\n                        p1 = endPositions.end1.leadInPosition;\n\n                    } else {\n                        p1 = endPositions.end1;\n                    }\n\n\n                    if (endPositions.end2.leadInPosition && !ignoreLeadIn) {\n\n                        s3 = elbowRouter.makeSegments([\n                            endPositions.end2.leadInPosition,\n                            endPositions.end2\n                        ]);\n\n                        p2 = endPositions.end2.leadInPosition;\n\n                    } else {\n                        p2 = endPositions.end2;\n                    }\n\n                    s2 = router.makeSegments([\n                        p1,\n                        p2\n                    ], params);\n\n\n                    wire.segments = s1.concat(s2).concat(s3);\n\n                }\n\n            }\n\n        };\n\n        this.adjustWireEndSegments = function (wire) {\n\n            var firstSegment,\n                secondSegment,\n                secondToLastSegment,\n                lastSegment,\n                endPositions,\n                newSegments,\n                pos;\n\n            endPositions = wire.getEndPositions();\n\n            if (angular.isArray(wire.segments) && wire.segments.length > 1) {\n\n                firstSegment = wire.segments[0];\n\n                if (firstSegment.router && firstSegment.router.type === 'ElbowRouter') {\n\n                    secondSegment = wire.segments[1];\n\n                    pos = {\n                        x: secondSegment.x2,\n                        y: secondSegment.y2\n                    };\n\n                    wire.segments.splice(0, 2);\n\n                } else {\n\n                    // SimpleRouter\n\n                    pos = {\n                        x: firstSegment.x2,\n                        y: firstSegment.y2\n                    };\n\n                    wire.segments.splice(0, 1);\n                }\n\n                newSegments = self.getSegmentsBetweenPositions({\n                    end1: endPositions.end1,\n                    end2: pos\n                }, firstSegment.router.type, firstSegment.router.params);\n\n                wire.segments = newSegments.concat(wire.segments);\n\n                lastSegment = wire.segments[wire.segments.length - 1];\n\n                if (lastSegment.router && lastSegment.router.type === 'ElbowRouter') {\n\n                    secondToLastSegment = wire.segments[wire.segments.length - 2];\n\n                    pos = {\n                        x: secondToLastSegment.x1,\n                        y: secondToLastSegment.y1\n                    };\n\n                    wire.segments.splice(wire.segments.length - 2, 2);\n\n                } else {\n\n                    pos = {\n                        x: lastSegment.x1,\n                        y: lastSegment.y1\n                    };\n\n                    wire.segments.splice(wire.segments.length - 1, 1);\n                }\n\n                newSegments = self.getSegmentsBetweenPositions({\n                    end1: pos,\n                    end2: endPositions.end2\n                }, lastSegment.router.type, lastSegment.router.params);\n\n                wire.segments = wire.segments.concat(newSegments);\n\n            } else {\n\n                //Simple-routing\n\n                self.routeWire(wire, null, null, true);\n            }\n\n        };\n\n    }\n]);\n","'use strict';\n\nrequire( 'Array.prototype.find' );\n\nif ( !Array.prototype.findById ) {\n    Array.prototype.findById = function ( id ) {\n        return this.find( function ( a ) {\n            return a.id !== undefined && a.id === id;\n        } );\n    };\n}\n\nif ( !Array.prototype.getRandomElement ) {\n    Array.prototype.getRandomElement = function () {\n        return this[ Math.round( Math.random() * ( this.length - 1 ) ) ];\n    };\n}\n\nif ( !Array.prototype.shuffle ) {\n    Array.prototype.shuffle = function () {\n        var currentIndex = this.length,\n            temporaryValue, randomIndex;\n\n        // While there remain elements to shuffle...\n        while ( 0 !== currentIndex ) {\n\n            // Pick a remaining element...\n            randomIndex = Math.floor( Math.random() * currentIndex );\n            currentIndex -= 1;\n\n            // And swap it with the current element.\n            temporaryValue = this[ currentIndex ];\n            this[ currentIndex ] = this[ randomIndex ];\n            this[ randomIndex ] = temporaryValue;\n        }\n\n        return this;\n    };\n}"]}